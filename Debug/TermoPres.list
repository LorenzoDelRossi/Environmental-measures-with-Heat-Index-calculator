
TermoPres.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a484  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  0800a614  0800a614  0001a614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a804  0800a804  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a804  0800a804  0001a804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a80c  0800a80c  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a80c  0800a80c  0001a80c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a810  0800a810  0001a810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0800a814  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000038c4  2000009c  0800a8b0  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003960  0800a8b0  00023960  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b8c0  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004ce2  00000000  00000000  0004b98c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002448  00000000  00000000  00050670  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000021f0  00000000  00000000  00052ab8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00006ef5  00000000  00000000  00054ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001cc57  00000000  00000000  0005bb9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010a07e  00000000  00000000  000787f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00182872  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009eb8  00000000  00000000  001828f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000009c 	.word	0x2000009c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a5fc 	.word	0x0800a5fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a0 	.word	0x200000a0
 80001cc:	0800a5fc 	.word	0x0800a5fc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b10:	f000 b972 	b.w	8000df8 <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9e08      	ldr	r6, [sp, #32]
 8000b32:	4604      	mov	r4, r0
 8000b34:	4688      	mov	r8, r1
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d14b      	bne.n	8000bd2 <__udivmoddi4+0xa6>
 8000b3a:	428a      	cmp	r2, r1
 8000b3c:	4615      	mov	r5, r2
 8000b3e:	d967      	bls.n	8000c10 <__udivmoddi4+0xe4>
 8000b40:	fab2 f282 	clz	r2, r2
 8000b44:	b14a      	cbz	r2, 8000b5a <__udivmoddi4+0x2e>
 8000b46:	f1c2 0720 	rsb	r7, r2, #32
 8000b4a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b4e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b52:	4095      	lsls	r5, r2
 8000b54:	ea47 0803 	orr.w	r8, r7, r3
 8000b58:	4094      	lsls	r4, r2
 8000b5a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b5e:	0c23      	lsrs	r3, r4, #16
 8000b60:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b64:	fa1f fc85 	uxth.w	ip, r5
 8000b68:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b6c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b70:	fb07 f10c 	mul.w	r1, r7, ip
 8000b74:	4299      	cmp	r1, r3
 8000b76:	d909      	bls.n	8000b8c <__udivmoddi4+0x60>
 8000b78:	18eb      	adds	r3, r5, r3
 8000b7a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b7e:	f080 811b 	bcs.w	8000db8 <__udivmoddi4+0x28c>
 8000b82:	4299      	cmp	r1, r3
 8000b84:	f240 8118 	bls.w	8000db8 <__udivmoddi4+0x28c>
 8000b88:	3f02      	subs	r7, #2
 8000b8a:	442b      	add	r3, r5
 8000b8c:	1a5b      	subs	r3, r3, r1
 8000b8e:	b2a4      	uxth	r4, r4
 8000b90:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b94:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b9c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ba0:	45a4      	cmp	ip, r4
 8000ba2:	d909      	bls.n	8000bb8 <__udivmoddi4+0x8c>
 8000ba4:	192c      	adds	r4, r5, r4
 8000ba6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000baa:	f080 8107 	bcs.w	8000dbc <__udivmoddi4+0x290>
 8000bae:	45a4      	cmp	ip, r4
 8000bb0:	f240 8104 	bls.w	8000dbc <__udivmoddi4+0x290>
 8000bb4:	3802      	subs	r0, #2
 8000bb6:	442c      	add	r4, r5
 8000bb8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bbc:	eba4 040c 	sub.w	r4, r4, ip
 8000bc0:	2700      	movs	r7, #0
 8000bc2:	b11e      	cbz	r6, 8000bcc <__udivmoddi4+0xa0>
 8000bc4:	40d4      	lsrs	r4, r2
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bcc:	4639      	mov	r1, r7
 8000bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd2:	428b      	cmp	r3, r1
 8000bd4:	d909      	bls.n	8000bea <__udivmoddi4+0xbe>
 8000bd6:	2e00      	cmp	r6, #0
 8000bd8:	f000 80eb 	beq.w	8000db2 <__udivmoddi4+0x286>
 8000bdc:	2700      	movs	r7, #0
 8000bde:	e9c6 0100 	strd	r0, r1, [r6]
 8000be2:	4638      	mov	r0, r7
 8000be4:	4639      	mov	r1, r7
 8000be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bea:	fab3 f783 	clz	r7, r3
 8000bee:	2f00      	cmp	r7, #0
 8000bf0:	d147      	bne.n	8000c82 <__udivmoddi4+0x156>
 8000bf2:	428b      	cmp	r3, r1
 8000bf4:	d302      	bcc.n	8000bfc <__udivmoddi4+0xd0>
 8000bf6:	4282      	cmp	r2, r0
 8000bf8:	f200 80fa 	bhi.w	8000df0 <__udivmoddi4+0x2c4>
 8000bfc:	1a84      	subs	r4, r0, r2
 8000bfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000c02:	2001      	movs	r0, #1
 8000c04:	4698      	mov	r8, r3
 8000c06:	2e00      	cmp	r6, #0
 8000c08:	d0e0      	beq.n	8000bcc <__udivmoddi4+0xa0>
 8000c0a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c0e:	e7dd      	b.n	8000bcc <__udivmoddi4+0xa0>
 8000c10:	b902      	cbnz	r2, 8000c14 <__udivmoddi4+0xe8>
 8000c12:	deff      	udf	#255	; 0xff
 8000c14:	fab2 f282 	clz	r2, r2
 8000c18:	2a00      	cmp	r2, #0
 8000c1a:	f040 808f 	bne.w	8000d3c <__udivmoddi4+0x210>
 8000c1e:	1b49      	subs	r1, r1, r5
 8000c20:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c24:	fa1f f885 	uxth.w	r8, r5
 8000c28:	2701      	movs	r7, #1
 8000c2a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c2e:	0c23      	lsrs	r3, r4, #16
 8000c30:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c38:	fb08 f10c 	mul.w	r1, r8, ip
 8000c3c:	4299      	cmp	r1, r3
 8000c3e:	d907      	bls.n	8000c50 <__udivmoddi4+0x124>
 8000c40:	18eb      	adds	r3, r5, r3
 8000c42:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c46:	d202      	bcs.n	8000c4e <__udivmoddi4+0x122>
 8000c48:	4299      	cmp	r1, r3
 8000c4a:	f200 80cd 	bhi.w	8000de8 <__udivmoddi4+0x2bc>
 8000c4e:	4684      	mov	ip, r0
 8000c50:	1a59      	subs	r1, r3, r1
 8000c52:	b2a3      	uxth	r3, r4
 8000c54:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c58:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c5c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c60:	fb08 f800 	mul.w	r8, r8, r0
 8000c64:	45a0      	cmp	r8, r4
 8000c66:	d907      	bls.n	8000c78 <__udivmoddi4+0x14c>
 8000c68:	192c      	adds	r4, r5, r4
 8000c6a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6e:	d202      	bcs.n	8000c76 <__udivmoddi4+0x14a>
 8000c70:	45a0      	cmp	r8, r4
 8000c72:	f200 80b6 	bhi.w	8000de2 <__udivmoddi4+0x2b6>
 8000c76:	4618      	mov	r0, r3
 8000c78:	eba4 0408 	sub.w	r4, r4, r8
 8000c7c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c80:	e79f      	b.n	8000bc2 <__udivmoddi4+0x96>
 8000c82:	f1c7 0c20 	rsb	ip, r7, #32
 8000c86:	40bb      	lsls	r3, r7
 8000c88:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c8c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c90:	fa01 f407 	lsl.w	r4, r1, r7
 8000c94:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c98:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c9c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ca0:	4325      	orrs	r5, r4
 8000ca2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000ca6:	0c2c      	lsrs	r4, r5, #16
 8000ca8:	fb08 3319 	mls	r3, r8, r9, r3
 8000cac:	fa1f fa8e 	uxth.w	sl, lr
 8000cb0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cb4:	fb09 f40a 	mul.w	r4, r9, sl
 8000cb8:	429c      	cmp	r4, r3
 8000cba:	fa02 f207 	lsl.w	r2, r2, r7
 8000cbe:	fa00 f107 	lsl.w	r1, r0, r7
 8000cc2:	d90b      	bls.n	8000cdc <__udivmoddi4+0x1b0>
 8000cc4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cc8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ccc:	f080 8087 	bcs.w	8000dde <__udivmoddi4+0x2b2>
 8000cd0:	429c      	cmp	r4, r3
 8000cd2:	f240 8084 	bls.w	8000dde <__udivmoddi4+0x2b2>
 8000cd6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cda:	4473      	add	r3, lr
 8000cdc:	1b1b      	subs	r3, r3, r4
 8000cde:	b2ad      	uxth	r5, r5
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cec:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cf0:	45a2      	cmp	sl, r4
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x1da>
 8000cf4:	eb1e 0404 	adds.w	r4, lr, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	d26b      	bcs.n	8000dd6 <__udivmoddi4+0x2aa>
 8000cfe:	45a2      	cmp	sl, r4
 8000d00:	d969      	bls.n	8000dd6 <__udivmoddi4+0x2aa>
 8000d02:	3802      	subs	r0, #2
 8000d04:	4474      	add	r4, lr
 8000d06:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d0e:	eba4 040a 	sub.w	r4, r4, sl
 8000d12:	454c      	cmp	r4, r9
 8000d14:	46c2      	mov	sl, r8
 8000d16:	464b      	mov	r3, r9
 8000d18:	d354      	bcc.n	8000dc4 <__udivmoddi4+0x298>
 8000d1a:	d051      	beq.n	8000dc0 <__udivmoddi4+0x294>
 8000d1c:	2e00      	cmp	r6, #0
 8000d1e:	d069      	beq.n	8000df4 <__udivmoddi4+0x2c8>
 8000d20:	ebb1 050a 	subs.w	r5, r1, sl
 8000d24:	eb64 0403 	sbc.w	r4, r4, r3
 8000d28:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d2c:	40fd      	lsrs	r5, r7
 8000d2e:	40fc      	lsrs	r4, r7
 8000d30:	ea4c 0505 	orr.w	r5, ip, r5
 8000d34:	e9c6 5400 	strd	r5, r4, [r6]
 8000d38:	2700      	movs	r7, #0
 8000d3a:	e747      	b.n	8000bcc <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f703 	lsr.w	r7, r0, r3
 8000d44:	4095      	lsls	r5, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d4e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d52:	4338      	orrs	r0, r7
 8000d54:	0c01      	lsrs	r1, r0, #16
 8000d56:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d5a:	fa1f f885 	uxth.w	r8, r5
 8000d5e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d62:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d66:	fb07 f308 	mul.w	r3, r7, r8
 8000d6a:	428b      	cmp	r3, r1
 8000d6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d70:	d907      	bls.n	8000d82 <__udivmoddi4+0x256>
 8000d72:	1869      	adds	r1, r5, r1
 8000d74:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d78:	d22f      	bcs.n	8000dda <__udivmoddi4+0x2ae>
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	d92d      	bls.n	8000dda <__udivmoddi4+0x2ae>
 8000d7e:	3f02      	subs	r7, #2
 8000d80:	4429      	add	r1, r5
 8000d82:	1acb      	subs	r3, r1, r3
 8000d84:	b281      	uxth	r1, r0
 8000d86:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d92:	fb00 f308 	mul.w	r3, r0, r8
 8000d96:	428b      	cmp	r3, r1
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x27e>
 8000d9a:	1869      	adds	r1, r5, r1
 8000d9c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da0:	d217      	bcs.n	8000dd2 <__udivmoddi4+0x2a6>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d915      	bls.n	8000dd2 <__udivmoddi4+0x2a6>
 8000da6:	3802      	subs	r0, #2
 8000da8:	4429      	add	r1, r5
 8000daa:	1ac9      	subs	r1, r1, r3
 8000dac:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000db0:	e73b      	b.n	8000c2a <__udivmoddi4+0xfe>
 8000db2:	4637      	mov	r7, r6
 8000db4:	4630      	mov	r0, r6
 8000db6:	e709      	b.n	8000bcc <__udivmoddi4+0xa0>
 8000db8:	4607      	mov	r7, r0
 8000dba:	e6e7      	b.n	8000b8c <__udivmoddi4+0x60>
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	e6fb      	b.n	8000bb8 <__udivmoddi4+0x8c>
 8000dc0:	4541      	cmp	r1, r8
 8000dc2:	d2ab      	bcs.n	8000d1c <__udivmoddi4+0x1f0>
 8000dc4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dc8:	eb69 020e 	sbc.w	r2, r9, lr
 8000dcc:	3801      	subs	r0, #1
 8000dce:	4613      	mov	r3, r2
 8000dd0:	e7a4      	b.n	8000d1c <__udivmoddi4+0x1f0>
 8000dd2:	4660      	mov	r0, ip
 8000dd4:	e7e9      	b.n	8000daa <__udivmoddi4+0x27e>
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	e795      	b.n	8000d06 <__udivmoddi4+0x1da>
 8000dda:	4667      	mov	r7, ip
 8000ddc:	e7d1      	b.n	8000d82 <__udivmoddi4+0x256>
 8000dde:	4681      	mov	r9, r0
 8000de0:	e77c      	b.n	8000cdc <__udivmoddi4+0x1b0>
 8000de2:	3802      	subs	r0, #2
 8000de4:	442c      	add	r4, r5
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0x14c>
 8000de8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dec:	442b      	add	r3, r5
 8000dee:	e72f      	b.n	8000c50 <__udivmoddi4+0x124>
 8000df0:	4638      	mov	r0, r7
 8000df2:	e708      	b.n	8000c06 <__udivmoddi4+0xda>
 8000df4:	4637      	mov	r7, r6
 8000df6:	e6e9      	b.n	8000bcc <__udivmoddi4+0xa0>

08000df8 <__aeabi_idiv0>:
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop

08000dfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e00:	f001 fedb 	bl	8002bba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e04:	f000 f862 	bl	8000ecc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e08:	f000 fa6e 	bl	80012e8 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000e0c:	f000 f902 	bl	8001014 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000e10:	f000 f938 	bl	8001084 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000e14:	f000 f976 	bl	8001104 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000e18:	f000 f99a 	bl	8001150 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000e1c:	f000 f9d6 	bl	80011cc <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000e20:	f000 fa04 	bl	800122c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000e24:	f000 fa32 	bl	800128c <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  BSP_TSENSOR_Init();
 8000e28:	f001 fc48 	bl	80026bc <BSP_TSENSOR_Init>
  BSP_HSENSOR_Init();
 8000e2c:	f001 fbea 	bl	8002604 <BSP_HSENSOR_Init>
  BSP_PSENSOR_Init();
 8000e30:	f001 fc16 	bl	8002660 <BSP_PSENSOR_Init>
  /* USER CODE END 2 */
  /* Init scheduler */
  osKernelInitialize();
 8000e34:	f006 fa20 	bl	8007278 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000e38:	4a15      	ldr	r2, [pc, #84]	; (8000e90 <main+0x94>)
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	4815      	ldr	r0, [pc, #84]	; (8000e94 <main+0x98>)
 8000e3e:	f006 fa85 	bl	800734c <osThreadNew>
 8000e42:	4602      	mov	r2, r0
 8000e44:	4b14      	ldr	r3, [pc, #80]	; (8000e98 <main+0x9c>)
 8000e46:	601a      	str	r2, [r3, #0]

  /* creation of temperature */
  temperatureHandle = osThreadNew(StartTemp, NULL, &temperature_attributes);
 8000e48:	4a14      	ldr	r2, [pc, #80]	; (8000e9c <main+0xa0>)
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	4814      	ldr	r0, [pc, #80]	; (8000ea0 <main+0xa4>)
 8000e4e:	f006 fa7d 	bl	800734c <osThreadNew>
 8000e52:	4602      	mov	r2, r0
 8000e54:	4b13      	ldr	r3, [pc, #76]	; (8000ea4 <main+0xa8>)
 8000e56:	601a      	str	r2, [r3, #0]

  /* creation of pressure */
  pressureHandle = osThreadNew(StartTPres, NULL, &pressure_attributes);
 8000e58:	4a13      	ldr	r2, [pc, #76]	; (8000ea8 <main+0xac>)
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	4813      	ldr	r0, [pc, #76]	; (8000eac <main+0xb0>)
 8000e5e:	f006 fa75 	bl	800734c <osThreadNew>
 8000e62:	4602      	mov	r2, r0
 8000e64:	4b12      	ldr	r3, [pc, #72]	; (8000eb0 <main+0xb4>)
 8000e66:	601a      	str	r2, [r3, #0]

  /* creation of humidity */
  humidityHandle = osThreadNew(StartHumidity, NULL, &humidity_attributes);
 8000e68:	4a12      	ldr	r2, [pc, #72]	; (8000eb4 <main+0xb8>)
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	4812      	ldr	r0, [pc, #72]	; (8000eb8 <main+0xbc>)
 8000e6e:	f006 fa6d 	bl	800734c <osThreadNew>
 8000e72:	4602      	mov	r2, r0
 8000e74:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <main+0xc0>)
 8000e76:	601a      	str	r2, [r3, #0]

  /* creation of HeatIndex */
  HeatIndexHandle = osThreadNew(StartIndex, NULL, &HeatIndex_attributes);
 8000e78:	4a11      	ldr	r2, [pc, #68]	; (8000ec0 <main+0xc4>)
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	4811      	ldr	r0, [pc, #68]	; (8000ec4 <main+0xc8>)
 8000e7e:	f006 fa65 	bl	800734c <osThreadNew>
 8000e82:	4602      	mov	r2, r0
 8000e84:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <main+0xcc>)
 8000e86:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000e88:	f006 fa2a 	bl	80072e0 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <main+0x90>
 8000e8e:	bf00      	nop
 8000e90:	0800a6d4 	.word	0x0800a6d4
 8000e94:	08001649 	.word	0x08001649
 8000e98:	200031fc 	.word	0x200031fc
 8000e9c:	0800a6f8 	.word	0x0800a6f8
 8000ea0:	08001659 	.word	0x08001659
 8000ea4:	20003738 	.word	0x20003738
 8000ea8:	0800a71c 	.word	0x0800a71c
 8000eac:	08001721 	.word	0x08001721
 8000eb0:	200037bc 	.word	0x200037bc
 8000eb4:	0800a740 	.word	0x0800a740
 8000eb8:	080017e9 	.word	0x080017e9
 8000ebc:	200037c4 	.word	0x200037c4
 8000ec0:	0800a764 	.word	0x0800a764
 8000ec4:	080018b1 	.word	0x080018b1
 8000ec8:	200037c0 	.word	0x200037c0

08000ecc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b0b8      	sub	sp, #224	; 0xe0
 8000ed0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ed2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ed6:	2244      	movs	r2, #68	; 0x44
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f008 ff3b 	bl	8009d56 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ef0:	463b      	mov	r3, r7
 8000ef2:	2288      	movs	r2, #136	; 0x88
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f008 ff2d 	bl	8009d56 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000efc:	f003 fa64 	bl	80043c8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000f00:	4b42      	ldr	r3, [pc, #264]	; (800100c <SystemClock_Config+0x140>)
 8000f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f06:	4a41      	ldr	r2, [pc, #260]	; (800100c <SystemClock_Config+0x140>)
 8000f08:	f023 0318 	bic.w	r3, r3, #24
 8000f0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000f10:	2314      	movs	r3, #20
 8000f12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000f16:	2301      	movs	r3, #1
 8000f18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000f28:	2360      	movs	r3, #96	; 0x60
 8000f2a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000f34:	2301      	movs	r3, #1
 8000f36:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000f40:	2328      	movs	r3, #40	; 0x28
 8000f42:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f46:	2307      	movs	r3, #7
 8000f48:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f52:	2302      	movs	r3, #2
 8000f54:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f58:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f003 fb7f 	bl	8004660 <HAL_RCC_OscConfig>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000f68:	f000 fe8c 	bl	8001c84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f6c:	230f      	movs	r3, #15
 8000f6e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f72:	2303      	movs	r3, #3
 8000f74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f84:	2300      	movs	r3, #0
 8000f86:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f8a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000f8e:	2104      	movs	r1, #4
 8000f90:	4618      	mov	r0, r3
 8000f92:	f003 ff4b 	bl	8004e2c <HAL_RCC_ClockConfig>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000f9c:	f000 fe72 	bl	8001c84 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8000fa0:	4b1b      	ldr	r3, [pc, #108]	; (8001010 <SystemClock_Config+0x144>)
 8000fa2:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_DFSDM1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000fac:	2300      	movs	r3, #0
 8000fae:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000fb6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000fba:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000fc4:	2318      	movs	r3, #24
 8000fc6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000fc8:	2307      	movs	r3, #7
 8000fca:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000fd4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000fd8:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fda:	463b      	mov	r3, r7
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f004 f95b 	bl	8005298 <HAL_RCCEx_PeriphCLKConfig>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <SystemClock_Config+0x120>
  {
    Error_Handler();
 8000fe8:	f000 fe4c 	bl	8001c84 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000fec:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ff0:	f003 fa08 	bl	8004404 <HAL_PWREx_ControlVoltageScaling>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <SystemClock_Config+0x132>
  {
    Error_Handler();
 8000ffa:	f000 fe43 	bl	8001c84 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000ffe:	f004 fc31 	bl	8005864 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001002:	bf00      	nop
 8001004:	37e0      	adds	r7, #224	; 0xe0
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40021000 	.word	0x40021000
 8001010:	00012085 	.word	0x00012085

08001014 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8001018:	4b18      	ldr	r3, [pc, #96]	; (800107c <MX_DFSDM1_Init+0x68>)
 800101a:	4a19      	ldr	r2, [pc, #100]	; (8001080 <MX_DFSDM1_Init+0x6c>)
 800101c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800101e:	4b17      	ldr	r3, [pc, #92]	; (800107c <MX_DFSDM1_Init+0x68>)
 8001020:	2201      	movs	r2, #1
 8001022:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001024:	4b15      	ldr	r3, [pc, #84]	; (800107c <MX_DFSDM1_Init+0x68>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800102a:	4b14      	ldr	r3, [pc, #80]	; (800107c <MX_DFSDM1_Init+0x68>)
 800102c:	2202      	movs	r2, #2
 800102e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001030:	4b12      	ldr	r3, [pc, #72]	; (800107c <MX_DFSDM1_Init+0x68>)
 8001032:	2200      	movs	r2, #0
 8001034:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001036:	4b11      	ldr	r3, [pc, #68]	; (800107c <MX_DFSDM1_Init+0x68>)
 8001038:	2200      	movs	r2, #0
 800103a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 800103c:	4b0f      	ldr	r3, [pc, #60]	; (800107c <MX_DFSDM1_Init+0x68>)
 800103e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001042:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001044:	4b0d      	ldr	r3, [pc, #52]	; (800107c <MX_DFSDM1_Init+0x68>)
 8001046:	2200      	movs	r2, #0
 8001048:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800104a:	4b0c      	ldr	r3, [pc, #48]	; (800107c <MX_DFSDM1_Init+0x68>)
 800104c:	2204      	movs	r2, #4
 800104e:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001050:	4b0a      	ldr	r3, [pc, #40]	; (800107c <MX_DFSDM1_Init+0x68>)
 8001052:	2200      	movs	r2, #0
 8001054:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8001056:	4b09      	ldr	r3, [pc, #36]	; (800107c <MX_DFSDM1_Init+0x68>)
 8001058:	2201      	movs	r2, #1
 800105a:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 800105c:	4b07      	ldr	r3, [pc, #28]	; (800107c <MX_DFSDM1_Init+0x68>)
 800105e:	2200      	movs	r2, #0
 8001060:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8001062:	4b06      	ldr	r3, [pc, #24]	; (800107c <MX_DFSDM1_Init+0x68>)
 8001064:	2200      	movs	r2, #0
 8001066:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8001068:	4804      	ldr	r0, [pc, #16]	; (800107c <MX_DFSDM1_Init+0x68>)
 800106a:	f001 fee1 	bl	8002e30 <HAL_DFSDM_ChannelInit>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8001074:	f000 fe06 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}
 800107c:	200031c4 	.word	0x200031c4
 8001080:	40016020 	.word	0x40016020

08001084 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001088:	4b1b      	ldr	r3, [pc, #108]	; (80010f8 <MX_I2C2_Init+0x74>)
 800108a:	4a1c      	ldr	r2, [pc, #112]	; (80010fc <MX_I2C2_Init+0x78>)
 800108c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800108e:	4b1a      	ldr	r3, [pc, #104]	; (80010f8 <MX_I2C2_Init+0x74>)
 8001090:	4a1b      	ldr	r2, [pc, #108]	; (8001100 <MX_I2C2_Init+0x7c>)
 8001092:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001094:	4b18      	ldr	r3, [pc, #96]	; (80010f8 <MX_I2C2_Init+0x74>)
 8001096:	2200      	movs	r2, #0
 8001098:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800109a:	4b17      	ldr	r3, [pc, #92]	; (80010f8 <MX_I2C2_Init+0x74>)
 800109c:	2201      	movs	r2, #1
 800109e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010a0:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <MX_I2C2_Init+0x74>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80010a6:	4b14      	ldr	r3, [pc, #80]	; (80010f8 <MX_I2C2_Init+0x74>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010ac:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <MX_I2C2_Init+0x74>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010b2:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <MX_I2C2_Init+0x74>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010b8:	4b0f      	ldr	r3, [pc, #60]	; (80010f8 <MX_I2C2_Init+0x74>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80010be:	480e      	ldr	r0, [pc, #56]	; (80010f8 <MX_I2C2_Init+0x74>)
 80010c0:	f002 fa99 	bl	80035f6 <HAL_I2C_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80010ca:	f000 fddb 	bl	8001c84 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010ce:	2100      	movs	r1, #0
 80010d0:	4809      	ldr	r0, [pc, #36]	; (80010f8 <MX_I2C2_Init+0x74>)
 80010d2:	f002 ff99 	bl	8004008 <HAL_I2CEx_ConfigAnalogFilter>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80010dc:	f000 fdd2 	bl	8001c84 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80010e0:	2100      	movs	r1, #0
 80010e2:	4805      	ldr	r0, [pc, #20]	; (80010f8 <MX_I2C2_Init+0x74>)
 80010e4:	f002 ffdb 	bl	800409e <HAL_I2CEx_ConfigDigitalFilter>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80010ee:	f000 fdc9 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20003688 	.word	0x20003688
 80010fc:	40005800 	.word	0x40005800
 8001100:	10909cec 	.word	0x10909cec

08001104 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001108:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <MX_QUADSPI_Init+0x44>)
 800110a:	4a10      	ldr	r2, [pc, #64]	; (800114c <MX_QUADSPI_Init+0x48>)
 800110c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800110e:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <MX_QUADSPI_Init+0x44>)
 8001110:	22ff      	movs	r2, #255	; 0xff
 8001112:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001114:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <MX_QUADSPI_Init+0x44>)
 8001116:	2201      	movs	r2, #1
 8001118:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800111a:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <MX_QUADSPI_Init+0x44>)
 800111c:	2200      	movs	r2, #0
 800111e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001120:	4b09      	ldr	r3, [pc, #36]	; (8001148 <MX_QUADSPI_Init+0x44>)
 8001122:	2201      	movs	r2, #1
 8001124:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001126:	4b08      	ldr	r3, [pc, #32]	; (8001148 <MX_QUADSPI_Init+0x44>)
 8001128:	2200      	movs	r2, #0
 800112a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <MX_QUADSPI_Init+0x44>)
 800112e:	2200      	movs	r2, #0
 8001130:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001132:	4805      	ldr	r0, [pc, #20]	; (8001148 <MX_QUADSPI_Init+0x44>)
 8001134:	f003 f9cc 	bl	80044d0 <HAL_QSPI_Init>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800113e:	f000 fda1 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	200037c8 	.word	0x200037c8
 800114c:	a0001000 	.word	0xa0001000

08001150 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001154:	4b1b      	ldr	r3, [pc, #108]	; (80011c4 <MX_SPI3_Init+0x74>)
 8001156:	4a1c      	ldr	r2, [pc, #112]	; (80011c8 <MX_SPI3_Init+0x78>)
 8001158:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800115a:	4b1a      	ldr	r3, [pc, #104]	; (80011c4 <MX_SPI3_Init+0x74>)
 800115c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001160:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001162:	4b18      	ldr	r3, [pc, #96]	; (80011c4 <MX_SPI3_Init+0x74>)
 8001164:	2200      	movs	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001168:	4b16      	ldr	r3, [pc, #88]	; (80011c4 <MX_SPI3_Init+0x74>)
 800116a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800116e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001170:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <MX_SPI3_Init+0x74>)
 8001172:	2200      	movs	r2, #0
 8001174:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001176:	4b13      	ldr	r3, [pc, #76]	; (80011c4 <MX_SPI3_Init+0x74>)
 8001178:	2200      	movs	r2, #0
 800117a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800117c:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <MX_SPI3_Init+0x74>)
 800117e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001182:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001184:	4b0f      	ldr	r3, [pc, #60]	; (80011c4 <MX_SPI3_Init+0x74>)
 8001186:	2200      	movs	r2, #0
 8001188:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800118a:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <MX_SPI3_Init+0x74>)
 800118c:	2200      	movs	r2, #0
 800118e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001190:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <MX_SPI3_Init+0x74>)
 8001192:	2200      	movs	r2, #0
 8001194:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001196:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <MX_SPI3_Init+0x74>)
 8001198:	2200      	movs	r2, #0
 800119a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800119c:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <MX_SPI3_Init+0x74>)
 800119e:	2207      	movs	r2, #7
 80011a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011a2:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <MX_SPI3_Init+0x74>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <MX_SPI3_Init+0x74>)
 80011aa:	2208      	movs	r2, #8
 80011ac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80011ae:	4805      	ldr	r0, [pc, #20]	; (80011c4 <MX_SPI3_Init+0x74>)
 80011b0:	f004 fd32 	bl	8005c18 <HAL_SPI_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80011ba:	f000 fd63 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	200036d4 	.word	0x200036d4
 80011c8:	40003c00 	.word	0x40003c00

080011cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011d0:	4b14      	ldr	r3, [pc, #80]	; (8001224 <MX_USART1_UART_Init+0x58>)
 80011d2:	4a15      	ldr	r2, [pc, #84]	; (8001228 <MX_USART1_UART_Init+0x5c>)
 80011d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011d6:	4b13      	ldr	r3, [pc, #76]	; (8001224 <MX_USART1_UART_Init+0x58>)
 80011d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011de:	4b11      	ldr	r3, [pc, #68]	; (8001224 <MX_USART1_UART_Init+0x58>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011e4:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <MX_USART1_UART_Init+0x58>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011ea:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <MX_USART1_UART_Init+0x58>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011f0:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <MX_USART1_UART_Init+0x58>)
 80011f2:	220c      	movs	r2, #12
 80011f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011f6:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <MX_USART1_UART_Init+0x58>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011fc:	4b09      	ldr	r3, [pc, #36]	; (8001224 <MX_USART1_UART_Init+0x58>)
 80011fe:	2200      	movs	r2, #0
 8001200:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001202:	4b08      	ldr	r3, [pc, #32]	; (8001224 <MX_USART1_UART_Init+0x58>)
 8001204:	2200      	movs	r2, #0
 8001206:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001208:	4b06      	ldr	r3, [pc, #24]	; (8001224 <MX_USART1_UART_Init+0x58>)
 800120a:	2200      	movs	r2, #0
 800120c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800120e:	4805      	ldr	r0, [pc, #20]	; (8001224 <MX_USART1_UART_Init+0x58>)
 8001210:	f004 ffec 	bl	80061ec <HAL_UART_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800121a:	f000 fd33 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	2000373c 	.word	0x2000373c
 8001228:	40013800 	.word	0x40013800

0800122c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001230:	4b14      	ldr	r3, [pc, #80]	; (8001284 <MX_USART3_UART_Init+0x58>)
 8001232:	4a15      	ldr	r2, [pc, #84]	; (8001288 <MX_USART3_UART_Init+0x5c>)
 8001234:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001236:	4b13      	ldr	r3, [pc, #76]	; (8001284 <MX_USART3_UART_Init+0x58>)
 8001238:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800123c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800123e:	4b11      	ldr	r3, [pc, #68]	; (8001284 <MX_USART3_UART_Init+0x58>)
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001244:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <MX_USART3_UART_Init+0x58>)
 8001246:	2200      	movs	r2, #0
 8001248:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800124a:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <MX_USART3_UART_Init+0x58>)
 800124c:	2200      	movs	r2, #0
 800124e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001250:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <MX_USART3_UART_Init+0x58>)
 8001252:	220c      	movs	r2, #12
 8001254:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001256:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <MX_USART3_UART_Init+0x58>)
 8001258:	2200      	movs	r2, #0
 800125a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800125c:	4b09      	ldr	r3, [pc, #36]	; (8001284 <MX_USART3_UART_Init+0x58>)
 800125e:	2200      	movs	r2, #0
 8001260:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001262:	4b08      	ldr	r3, [pc, #32]	; (8001284 <MX_USART3_UART_Init+0x58>)
 8001264:	2200      	movs	r2, #0
 8001266:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001268:	4b06      	ldr	r3, [pc, #24]	; (8001284 <MX_USART3_UART_Init+0x58>)
 800126a:	2200      	movs	r2, #0
 800126c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800126e:	4805      	ldr	r0, [pc, #20]	; (8001284 <MX_USART3_UART_Init+0x58>)
 8001270:	f004 ffbc 	bl	80061ec <HAL_UART_Init>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800127a:	f000 fd03 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20003200 	.word	0x20003200
 8001288:	40004800 	.word	0x40004800

0800128c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001290:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001292:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001296:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001298:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800129a:	2206      	movs	r2, #6
 800129c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800129e:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012a0:	2202      	movs	r2, #2
 80012a2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80012a4:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012a6:	2202      	movs	r2, #2
 80012a8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80012aa:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80012b0:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80012b6:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80012bc:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012be:	2200      	movs	r2, #0
 80012c0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80012c2:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80012c8:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80012ce:	4805      	ldr	r0, [pc, #20]	; (80012e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012d0:	f002 ff31 	bl	8004136 <HAL_PCD_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80012da:	f000 fcd3 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20003280 	.word	0x20003280

080012e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08a      	sub	sp, #40	; 0x28
 80012ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ee:	f107 0314 	add.w	r3, r7, #20
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	605a      	str	r2, [r3, #4]
 80012f8:	609a      	str	r2, [r3, #8]
 80012fa:	60da      	str	r2, [r3, #12]
 80012fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012fe:	4bba      	ldr	r3, [pc, #744]	; (80015e8 <MX_GPIO_Init+0x300>)
 8001300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001302:	4ab9      	ldr	r2, [pc, #740]	; (80015e8 <MX_GPIO_Init+0x300>)
 8001304:	f043 0310 	orr.w	r3, r3, #16
 8001308:	64d3      	str	r3, [r2, #76]	; 0x4c
 800130a:	4bb7      	ldr	r3, [pc, #732]	; (80015e8 <MX_GPIO_Init+0x300>)
 800130c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130e:	f003 0310 	and.w	r3, r3, #16
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001316:	4bb4      	ldr	r3, [pc, #720]	; (80015e8 <MX_GPIO_Init+0x300>)
 8001318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131a:	4ab3      	ldr	r2, [pc, #716]	; (80015e8 <MX_GPIO_Init+0x300>)
 800131c:	f043 0304 	orr.w	r3, r3, #4
 8001320:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001322:	4bb1      	ldr	r3, [pc, #708]	; (80015e8 <MX_GPIO_Init+0x300>)
 8001324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001326:	f003 0304 	and.w	r3, r3, #4
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800132e:	4bae      	ldr	r3, [pc, #696]	; (80015e8 <MX_GPIO_Init+0x300>)
 8001330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001332:	4aad      	ldr	r2, [pc, #692]	; (80015e8 <MX_GPIO_Init+0x300>)
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	64d3      	str	r3, [r2, #76]	; 0x4c
 800133a:	4bab      	ldr	r3, [pc, #684]	; (80015e8 <MX_GPIO_Init+0x300>)
 800133c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	60bb      	str	r3, [r7, #8]
 8001344:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001346:	4ba8      	ldr	r3, [pc, #672]	; (80015e8 <MX_GPIO_Init+0x300>)
 8001348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134a:	4aa7      	ldr	r2, [pc, #668]	; (80015e8 <MX_GPIO_Init+0x300>)
 800134c:	f043 0302 	orr.w	r3, r3, #2
 8001350:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001352:	4ba5      	ldr	r3, [pc, #660]	; (80015e8 <MX_GPIO_Init+0x300>)
 8001354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800135e:	4ba2      	ldr	r3, [pc, #648]	; (80015e8 <MX_GPIO_Init+0x300>)
 8001360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001362:	4aa1      	ldr	r2, [pc, #644]	; (80015e8 <MX_GPIO_Init+0x300>)
 8001364:	f043 0308 	orr.w	r3, r3, #8
 8001368:	64d3      	str	r3, [r2, #76]	; 0x4c
 800136a:	4b9f      	ldr	r3, [pc, #636]	; (80015e8 <MX_GPIO_Init+0x300>)
 800136c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136e:	f003 0308 	and.w	r3, r3, #8
 8001372:	603b      	str	r3, [r7, #0]
 8001374:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8001376:	2200      	movs	r2, #0
 8001378:	f44f 718a 	mov.w	r1, #276	; 0x114
 800137c:	489b      	ldr	r0, [pc, #620]	; (80015ec <MX_GPIO_Init+0x304>)
 800137e:	f002 f8ff 	bl	8003580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8001382:	2200      	movs	r2, #0
 8001384:	f248 1104 	movw	r1, #33028	; 0x8104
 8001388:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800138c:	f002 f8f8 	bl	8003580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 8001390:	2200      	movs	r2, #0
 8001392:	f24f 0114 	movw	r1, #61460	; 0xf014
 8001396:	4896      	ldr	r0, [pc, #600]	; (80015f0 <MX_GPIO_Init+0x308>)
 8001398:	f002 f8f2 	bl	8003580 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 800139c:	2200      	movs	r2, #0
 800139e:	f241 0181 	movw	r1, #4225	; 0x1081
 80013a2:	4894      	ldr	r0, [pc, #592]	; (80015f4 <MX_GPIO_Init+0x30c>)
 80013a4:	f002 f8ec 	bl	8003580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80013a8:	2201      	movs	r2, #1
 80013aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013ae:	4891      	ldr	r0, [pc, #580]	; (80015f4 <MX_GPIO_Init+0x30c>)
 80013b0:	f002 f8e6 	bl	8003580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80013b4:	2200      	movs	r2, #0
 80013b6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80013ba:	488f      	ldr	r0, [pc, #572]	; (80015f8 <MX_GPIO_Init+0x310>)
 80013bc:	f002 f8e0 	bl	8003580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80013c0:	2201      	movs	r2, #1
 80013c2:	2120      	movs	r1, #32
 80013c4:	488a      	ldr	r0, [pc, #552]	; (80015f0 <MX_GPIO_Init+0x308>)
 80013c6:	f002 f8db 	bl	8003580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80013ca:	2201      	movs	r2, #1
 80013cc:	2101      	movs	r1, #1
 80013ce:	4887      	ldr	r0, [pc, #540]	; (80015ec <MX_GPIO_Init+0x304>)
 80013d0:	f002 f8d6 	bl	8003580 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80013d4:	f240 1315 	movw	r3, #277	; 0x115
 80013d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013da:	2301      	movs	r3, #1
 80013dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e2:	2300      	movs	r3, #0
 80013e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013e6:	f107 0314 	add.w	r3, r7, #20
 80013ea:	4619      	mov	r1, r3
 80013ec:	487f      	ldr	r0, [pc, #508]	; (80015ec <MX_GPIO_Init+0x304>)
 80013ee:	f001 fe2b 	bl	8003048 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80013f2:	236a      	movs	r3, #106	; 0x6a
 80013f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013f6:	4b81      	ldr	r3, [pc, #516]	; (80015fc <MX_GPIO_Init+0x314>)
 80013f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013fe:	f107 0314 	add.w	r3, r7, #20
 8001402:	4619      	mov	r1, r3
 8001404:	4879      	ldr	r0, [pc, #484]	; (80015ec <MX_GPIO_Init+0x304>)
 8001406:	f001 fe1f 	bl	8003048 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 800140a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800140e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001410:	4b7b      	ldr	r3, [pc, #492]	; (8001600 <MX_GPIO_Init+0x318>)
 8001412:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8001418:	f107 0314 	add.w	r3, r7, #20
 800141c:	4619      	mov	r1, r3
 800141e:	4876      	ldr	r0, [pc, #472]	; (80015f8 <MX_GPIO_Init+0x310>)
 8001420:	f001 fe12 	bl	8003048 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin 
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin 
 8001424:	233f      	movs	r3, #63	; 0x3f
 8001426:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001428:	230b      	movs	r3, #11
 800142a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001430:	f107 0314 	add.w	r3, r7, #20
 8001434:	4619      	mov	r1, r3
 8001436:	4870      	ldr	r0, [pc, #448]	; (80015f8 <MX_GPIO_Init+0x310>)
 8001438:	f001 fe06 	bl	8003048 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 800143c:	2303      	movs	r3, #3
 800143e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001440:	2302      	movs	r3, #2
 8001442:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001448:	2303      	movs	r3, #3
 800144a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800144c:	2308      	movs	r3, #8
 800144e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	4619      	mov	r1, r3
 8001456:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800145a:	f001 fdf5 	bl	8003048 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 800145e:	f248 1304 	movw	r3, #33028	; 0x8104
 8001462:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001464:	2301      	movs	r3, #1
 8001466:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146c:	2300      	movs	r3, #0
 800146e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	4619      	mov	r1, r3
 8001476:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800147a:	f001 fde5 	bl	8003048 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 800147e:	2308      	movs	r3, #8
 8001480:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001482:	2302      	movs	r3, #2
 8001484:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148a:	2300      	movs	r3, #0
 800148c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800148e:	2301      	movs	r3, #1
 8001490:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001492:	f107 0314 	add.w	r3, r7, #20
 8001496:	4619      	mov	r1, r3
 8001498:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800149c:	f001 fdd4 	bl	8003048 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 80014a0:	2310      	movs	r3, #16
 80014a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80014a4:	230b      	movs	r3, #11
 80014a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	4619      	mov	r1, r3
 80014b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014b6:	f001 fdc7 	bl	8003048 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80014ba:	23e0      	movs	r3, #224	; 0xe0
 80014bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014be:	2302      	movs	r3, #2
 80014c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c6:	2303      	movs	r3, #3
 80014c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014ca:	2305      	movs	r3, #5
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ce:	f107 0314 	add.w	r3, r7, #20
 80014d2:	4619      	mov	r1, r3
 80014d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014d8:	f001 fdb6 	bl	8003048 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80014dc:	2301      	movs	r3, #1
 80014de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014e0:	4b46      	ldr	r3, [pc, #280]	; (80015fc <MX_GPIO_Init+0x314>)
 80014e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80014e8:	f107 0314 	add.w	r3, r7, #20
 80014ec:	4619      	mov	r1, r3
 80014ee:	4840      	ldr	r0, [pc, #256]	; (80015f0 <MX_GPIO_Init+0x308>)
 80014f0:	f001 fdaa 	bl	8003048 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80014f4:	2302      	movs	r3, #2
 80014f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80014f8:	230b      	movs	r3, #11
 80014fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	4619      	mov	r1, r3
 8001506:	483a      	ldr	r0, [pc, #232]	; (80015f0 <MX_GPIO_Init+0x308>)
 8001508:	f001 fd9e 	bl	8003048 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin 
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 800150c:	f24f 0334 	movw	r3, #61492	; 0xf034
 8001510:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001512:	2301      	movs	r3, #1
 8001514:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151a:	2300      	movs	r3, #0
 800151c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800151e:	f107 0314 	add.w	r3, r7, #20
 8001522:	4619      	mov	r1, r3
 8001524:	4832      	ldr	r0, [pc, #200]	; (80015f0 <MX_GPIO_Init+0x308>)
 8001526:	f001 fd8f 	bl	8003048 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin 
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin 
 800152a:	f64c 4304 	movw	r3, #52228	; 0xcc04
 800152e:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001530:	4b32      	ldr	r3, [pc, #200]	; (80015fc <MX_GPIO_Init+0x314>)
 8001532:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	4619      	mov	r1, r3
 800153e:	482d      	ldr	r0, [pc, #180]	; (80015f4 <MX_GPIO_Init+0x30c>)
 8001540:	f001 fd82 	bl	8003048 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001544:	f243 0381 	movw	r3, #12417	; 0x3081
 8001548:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154a:	2301      	movs	r3, #1
 800154c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154e:	2300      	movs	r3, #0
 8001550:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001552:	2300      	movs	r3, #0
 8001554:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001556:	f107 0314 	add.w	r3, r7, #20
 800155a:	4619      	mov	r1, r3
 800155c:	4825      	ldr	r0, [pc, #148]	; (80015f4 <MX_GPIO_Init+0x30c>)
 800155e:	f001 fd73 	bl	8003048 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001562:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001566:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001568:	2301      	movs	r3, #1
 800156a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001570:	2300      	movs	r3, #0
 8001572:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	4619      	mov	r1, r3
 800157a:	481f      	ldr	r0, [pc, #124]	; (80015f8 <MX_GPIO_Init+0x310>)
 800157c:	f001 fd64 	bl	8003048 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001580:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001584:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001586:	4b1d      	ldr	r3, [pc, #116]	; (80015fc <MX_GPIO_Init+0x314>)
 8001588:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800158e:	f107 0314 	add.w	r3, r7, #20
 8001592:	4619      	mov	r1, r3
 8001594:	4818      	ldr	r0, [pc, #96]	; (80015f8 <MX_GPIO_Init+0x310>)
 8001596:	f001 fd57 	bl	8003048 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 800159a:	2302      	movs	r3, #2
 800159c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159e:	2302      	movs	r3, #2
 80015a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a6:	2303      	movs	r3, #3
 80015a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015aa:	2305      	movs	r3, #5
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80015ae:	f107 0314 	add.w	r3, r7, #20
 80015b2:	4619      	mov	r1, r3
 80015b4:	480f      	ldr	r0, [pc, #60]	; (80015f4 <MX_GPIO_Init+0x30c>)
 80015b6:	f001 fd47 	bl	8003048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80015ba:	2378      	movs	r3, #120	; 0x78
 80015bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015be:	2302      	movs	r3, #2
 80015c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c6:	2303      	movs	r3, #3
 80015c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015ca:	2307      	movs	r3, #7
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015ce:	f107 0314 	add.w	r3, r7, #20
 80015d2:	4619      	mov	r1, r3
 80015d4:	4807      	ldr	r0, [pc, #28]	; (80015f4 <MX_GPIO_Init+0x30c>)
 80015d6:	f001 fd37 	bl	8003048 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80015da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015e0:	2312      	movs	r3, #18
 80015e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e00d      	b.n	8001604 <MX_GPIO_Init+0x31c>
 80015e8:	40021000 	.word	0x40021000
 80015ec:	48001000 	.word	0x48001000
 80015f0:	48000400 	.word	0x48000400
 80015f4:	48000c00 	.word	0x48000c00
 80015f8:	48000800 	.word	0x48000800
 80015fc:	10110000 	.word	0x10110000
 8001600:	10210000 	.word	0x10210000
 8001604:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001606:	2303      	movs	r3, #3
 8001608:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800160a:	2304      	movs	r3, #4
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160e:	f107 0314 	add.w	r3, r7, #20
 8001612:	4619      	mov	r1, r3
 8001614:	480b      	ldr	r0, [pc, #44]	; (8001644 <MX_GPIO_Init+0x35c>)
 8001616:	f001 fd17 	bl	8003048 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800161a:	2200      	movs	r2, #0
 800161c:	2105      	movs	r1, #5
 800161e:	2017      	movs	r0, #23
 8001620:	f001 fbdc 	bl	8002ddc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001624:	2017      	movs	r0, #23
 8001626:	f001 fbf5 	bl	8002e14 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800162a:	2200      	movs	r2, #0
 800162c:	2105      	movs	r1, #5
 800162e:	2028      	movs	r0, #40	; 0x28
 8001630:	f001 fbd4 	bl	8002ddc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001634:	2028      	movs	r0, #40	; 0x28
 8001636:	f001 fbed 	bl	8002e14 <HAL_NVIC_EnableIRQ>

}
 800163a:	bf00      	nop
 800163c:	3728      	adds	r7, #40	; 0x28
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	48000400 	.word	0x48000400

08001648 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
		/*snprintf(str_tmp,100,"Stampa task default \r\n");
		HAL_UART_Transmit(&huart1,( uint8_t * )str_tmp,sizeof(str_tmp),1000);*/
	    osDelay(1); //3000
 8001650:	2001      	movs	r0, #1
 8001652:	f005 ff21 	bl	8007498 <osDelay>
 8001656:	e7fb      	b.n	8001650 <StartDefaultTask+0x8>

08001658 <StartTemp>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTemp */
void StartTemp(void *argument)
{
 8001658:	b590      	push	{r4, r7, lr}
 800165a:	b085      	sub	sp, #20
 800165c:	af02      	add	r7, sp, #8
 800165e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTemp */
  /* Infinite loop */
  for(;;)
  {
	  temp_value = BSP_TSENSOR_ReadTemp();
 8001660:	f001 f848 	bl	80026f4 <BSP_TSENSOR_ReadTemp>
 8001664:	eef0 7a40 	vmov.f32	s15, s0
 8001668:	4b25      	ldr	r3, [pc, #148]	; (8001700 <StartTemp+0xa8>)
 800166a:	edc3 7a00 	vstr	s15, [r3]
	  tmpInt1 = temp_value;
 800166e:	4b24      	ldr	r3, [pc, #144]	; (8001700 <StartTemp+0xa8>)
 8001670:	edd3 7a00 	vldr	s15, [r3]
 8001674:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001678:	ee17 2a90 	vmov	r2, s15
 800167c:	4b21      	ldr	r3, [pc, #132]	; (8001704 <StartTemp+0xac>)
 800167e:	601a      	str	r2, [r3, #0]
	  tmpFrac = temp_value - tmpInt1;
 8001680:	4b1f      	ldr	r3, [pc, #124]	; (8001700 <StartTemp+0xa8>)
 8001682:	ed93 7a00 	vldr	s14, [r3]
 8001686:	4b1f      	ldr	r3, [pc, #124]	; (8001704 <StartTemp+0xac>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	ee07 3a90 	vmov	s15, r3
 800168e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001692:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001696:	4b1c      	ldr	r3, [pc, #112]	; (8001708 <StartTemp+0xb0>)
 8001698:	edc3 7a00 	vstr	s15, [r3]
	  tmpInt2 = trunc(tmpFrac * 100);
 800169c:	4b1a      	ldr	r3, [pc, #104]	; (8001708 <StartTemp+0xb0>)
 800169e:	edd3 7a00 	vldr	s15, [r3]
 80016a2:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800170c <StartTemp+0xb4>
 80016a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016aa:	ee17 0a90 	vmov	r0, s15
 80016ae:	f7fe ff43 	bl	8000538 <__aeabi_f2d>
 80016b2:	4603      	mov	r3, r0
 80016b4:	460c      	mov	r4, r1
 80016b6:	ec44 3b10 	vmov	d0, r3, r4
 80016ba:	f008 ff65 	bl	800a588 <trunc>
 80016be:	ec54 3b10 	vmov	r3, r4, d0
 80016c2:	4618      	mov	r0, r3
 80016c4:	4621      	mov	r1, r4
 80016c6:	f7ff f9a1 	bl	8000a0c <__aeabi_d2iz>
 80016ca:	4602      	mov	r2, r0
 80016cc:	4b10      	ldr	r3, [pc, #64]	; (8001710 <StartTemp+0xb8>)
 80016ce:	601a      	str	r2, [r3, #0]
	  //tmpInt2 = trunc(temp_value);
	  snprintf(str_tmp1,30," TEMPERATURE = %d.%02d \xB0""C\r\n", tmpInt1, tmpInt2);
 80016d0:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <StartTemp+0xac>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <StartTemp+0xb8>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	9300      	str	r3, [sp, #0]
 80016da:	4613      	mov	r3, r2
 80016dc:	4a0d      	ldr	r2, [pc, #52]	; (8001714 <StartTemp+0xbc>)
 80016de:	211e      	movs	r1, #30
 80016e0:	480d      	ldr	r0, [pc, #52]	; (8001718 <StartTemp+0xc0>)
 80016e2:	f008 fb41 	bl	8009d68 <sniprintf>
	 // snprintf(str_tmp1,30," TEMPERATURE = %d C\r\n", tmpInt2);
	  HAL_UART_Transmit(&huart1,( uint8_t * )str_tmp1,sizeof(str_tmp1),1000);
 80016e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ea:	221e      	movs	r2, #30
 80016ec:	490a      	ldr	r1, [pc, #40]	; (8001718 <StartTemp+0xc0>)
 80016ee:	480b      	ldr	r0, [pc, #44]	; (800171c <StartTemp+0xc4>)
 80016f0:	f004 fdca 	bl	8006288 <HAL_UART_Transmit>
	  osDelay(6000);
 80016f4:	f241 7070 	movw	r0, #6000	; 0x1770
 80016f8:	f005 fece 	bl	8007498 <osDelay>
	  temp_value = BSP_TSENSOR_ReadTemp();
 80016fc:	e7b0      	b.n	8001660 <StartTemp+0x8>
 80016fe:	bf00      	nop
 8001700:	20000138 	.word	0x20000138
 8001704:	20000148 	.word	0x20000148
 8001708:	2000014c 	.word	0x2000014c
 800170c:	42c80000 	.word	0x42c80000
 8001710:	20000150 	.word	0x20000150
 8001714:	0800a650 	.word	0x0800a650
 8001718:	200000b8 	.word	0x200000b8
 800171c:	2000373c 	.word	0x2000373c

08001720 <StartTPres>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTPres */
void StartTPres(void *argument)
{
 8001720:	b590      	push	{r4, r7, lr}
 8001722:	b085      	sub	sp, #20
 8001724:	af02      	add	r7, sp, #8
 8001726:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTPres */
  /* Infinite loop */
  for(;;)
  {
	  pres_value = BSP_PSENSOR_ReadPressure();
 8001728:	f000 ffba 	bl	80026a0 <BSP_PSENSOR_ReadPressure>
 800172c:	eef0 7a40 	vmov.f32	s15, s0
 8001730:	4b25      	ldr	r3, [pc, #148]	; (80017c8 <StartTPres+0xa8>)
 8001732:	edc3 7a00 	vstr	s15, [r3]
	  tmpInt1 = pres_value;
 8001736:	4b24      	ldr	r3, [pc, #144]	; (80017c8 <StartTPres+0xa8>)
 8001738:	edd3 7a00 	vldr	s15, [r3]
 800173c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001740:	ee17 2a90 	vmov	r2, s15
 8001744:	4b21      	ldr	r3, [pc, #132]	; (80017cc <StartTPres+0xac>)
 8001746:	601a      	str	r2, [r3, #0]
	  tmpFrac = pres_value - tmpInt1;
 8001748:	4b1f      	ldr	r3, [pc, #124]	; (80017c8 <StartTPres+0xa8>)
 800174a:	ed93 7a00 	vldr	s14, [r3]
 800174e:	4b1f      	ldr	r3, [pc, #124]	; (80017cc <StartTPres+0xac>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	ee07 3a90 	vmov	s15, r3
 8001756:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800175a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800175e:	4b1c      	ldr	r3, [pc, #112]	; (80017d0 <StartTPres+0xb0>)
 8001760:	edc3 7a00 	vstr	s15, [r3]
	  //tmpInt2 = trunc(heatIndex);
	  tmpInt2 = trunc(tmpFrac * 100);
 8001764:	4b1a      	ldr	r3, [pc, #104]	; (80017d0 <StartTPres+0xb0>)
 8001766:	edd3 7a00 	vldr	s15, [r3]
 800176a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80017d4 <StartTPres+0xb4>
 800176e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001772:	ee17 0a90 	vmov	r0, s15
 8001776:	f7fe fedf 	bl	8000538 <__aeabi_f2d>
 800177a:	4603      	mov	r3, r0
 800177c:	460c      	mov	r4, r1
 800177e:	ec44 3b10 	vmov	d0, r3, r4
 8001782:	f008 ff01 	bl	800a588 <trunc>
 8001786:	ec54 3b10 	vmov	r3, r4, d0
 800178a:	4618      	mov	r0, r3
 800178c:	4621      	mov	r1, r4
 800178e:	f7ff f93d 	bl	8000a0c <__aeabi_d2iz>
 8001792:	4602      	mov	r2, r0
 8001794:	4b10      	ldr	r3, [pc, #64]	; (80017d8 <StartTPres+0xb8>)
 8001796:	601a      	str	r2, [r3, #0]
	  //tmpInt2 = trunc(pres_value);
	  snprintf(str_tmp2,30," PRESSURE = %d.%02d hPa\r\n", tmpInt1, tmpInt2);
 8001798:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <StartTPres+0xac>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <StartTPres+0xb8>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	9300      	str	r3, [sp, #0]
 80017a2:	4613      	mov	r3, r2
 80017a4:	4a0d      	ldr	r2, [pc, #52]	; (80017dc <StartTPres+0xbc>)
 80017a6:	211e      	movs	r1, #30
 80017a8:	480d      	ldr	r0, [pc, #52]	; (80017e0 <StartTPres+0xc0>)
 80017aa:	f008 fadd 	bl	8009d68 <sniprintf>
	  //snprintf(str_tmp2,30," PRESSURE = %d hPa \r\n", tmpInt2);
	  HAL_UART_Transmit(&huart1,( uint8_t * )str_tmp2,sizeof(str_tmp2),1000);
 80017ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017b2:	221e      	movs	r2, #30
 80017b4:	490a      	ldr	r1, [pc, #40]	; (80017e0 <StartTPres+0xc0>)
 80017b6:	480b      	ldr	r0, [pc, #44]	; (80017e4 <StartTPres+0xc4>)
 80017b8:	f004 fd66 	bl	8006288 <HAL_UART_Transmit>
	  osDelay(9000);
 80017bc:	f242 3028 	movw	r0, #9000	; 0x2328
 80017c0:	f005 fe6a 	bl	8007498 <osDelay>
	  pres_value = BSP_PSENSOR_ReadPressure();
 80017c4:	e7b0      	b.n	8001728 <StartTPres+0x8>
 80017c6:	bf00      	nop
 80017c8:	2000013c 	.word	0x2000013c
 80017cc:	20000148 	.word	0x20000148
 80017d0:	2000014c 	.word	0x2000014c
 80017d4:	42c80000 	.word	0x42c80000
 80017d8:	20000150 	.word	0x20000150
 80017dc:	0800a66c 	.word	0x0800a66c
 80017e0:	200000d8 	.word	0x200000d8
 80017e4:	2000373c 	.word	0x2000373c

080017e8 <StartHumidity>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartHumidity */
void StartHumidity(void *argument)
{
 80017e8:	b590      	push	{r4, r7, lr}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af02      	add	r7, sp, #8
 80017ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHumidity */
  /* Infinite loop */
  for(;;)
  {
	  hum_value = BSP_HSENSOR_ReadHumidity();
 80017f0:	f000 ff28 	bl	8002644 <BSP_HSENSOR_ReadHumidity>
 80017f4:	eef0 7a40 	vmov.f32	s15, s0
 80017f8:	4b25      	ldr	r3, [pc, #148]	; (8001890 <StartHumidity+0xa8>)
 80017fa:	edc3 7a00 	vstr	s15, [r3]
	  tmpInt1 = hum_value;
 80017fe:	4b24      	ldr	r3, [pc, #144]	; (8001890 <StartHumidity+0xa8>)
 8001800:	edd3 7a00 	vldr	s15, [r3]
 8001804:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001808:	ee17 2a90 	vmov	r2, s15
 800180c:	4b21      	ldr	r3, [pc, #132]	; (8001894 <StartHumidity+0xac>)
 800180e:	601a      	str	r2, [r3, #0]
	  tmpFrac = hum_value - tmpInt1;
 8001810:	4b1f      	ldr	r3, [pc, #124]	; (8001890 <StartHumidity+0xa8>)
 8001812:	ed93 7a00 	vldr	s14, [r3]
 8001816:	4b1f      	ldr	r3, [pc, #124]	; (8001894 <StartHumidity+0xac>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	ee07 3a90 	vmov	s15, r3
 800181e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001822:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001826:	4b1c      	ldr	r3, [pc, #112]	; (8001898 <StartHumidity+0xb0>)
 8001828:	edc3 7a00 	vstr	s15, [r3]
	  tmpInt2 = trunc(tmpFrac * 100);
 800182c:	4b1a      	ldr	r3, [pc, #104]	; (8001898 <StartHumidity+0xb0>)
 800182e:	edd3 7a00 	vldr	s15, [r3]
 8001832:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800189c <StartHumidity+0xb4>
 8001836:	ee67 7a87 	vmul.f32	s15, s15, s14
 800183a:	ee17 0a90 	vmov	r0, s15
 800183e:	f7fe fe7b 	bl	8000538 <__aeabi_f2d>
 8001842:	4603      	mov	r3, r0
 8001844:	460c      	mov	r4, r1
 8001846:	ec44 3b10 	vmov	d0, r3, r4
 800184a:	f008 fe9d 	bl	800a588 <trunc>
 800184e:	ec54 3b10 	vmov	r3, r4, d0
 8001852:	4618      	mov	r0, r3
 8001854:	4621      	mov	r1, r4
 8001856:	f7ff f8d9 	bl	8000a0c <__aeabi_d2iz>
 800185a:	4602      	mov	r2, r0
 800185c:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <StartHumidity+0xb8>)
 800185e:	601a      	str	r2, [r3, #0]
	  //tmpInt2 = trunc(hum_value);
	  snprintf(str_tmp3,30," HUMIDITY = %d.%02d %%\r\n", tmpInt1, tmpInt2);
 8001860:	4b0c      	ldr	r3, [pc, #48]	; (8001894 <StartHumidity+0xac>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <StartHumidity+0xb8>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	9300      	str	r3, [sp, #0]
 800186a:	4613      	mov	r3, r2
 800186c:	4a0d      	ldr	r2, [pc, #52]	; (80018a4 <StartHumidity+0xbc>)
 800186e:	211e      	movs	r1, #30
 8001870:	480d      	ldr	r0, [pc, #52]	; (80018a8 <StartHumidity+0xc0>)
 8001872:	f008 fa79 	bl	8009d68 <sniprintf>
	  //snprintf(str_tmp3,30," HUMIDITY = %d percent \r\n", tmpInt2);
	  HAL_UART_Transmit(&huart1,( uint8_t * )str_tmp3,sizeof(str_tmp3),1000);
 8001876:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800187a:	221e      	movs	r2, #30
 800187c:	490a      	ldr	r1, [pc, #40]	; (80018a8 <StartHumidity+0xc0>)
 800187e:	480b      	ldr	r0, [pc, #44]	; (80018ac <StartHumidity+0xc4>)
 8001880:	f004 fd02 	bl	8006288 <HAL_UART_Transmit>
	  osDelay(12000);
 8001884:	f642 60e0 	movw	r0, #12000	; 0x2ee0
 8001888:	f005 fe06 	bl	8007498 <osDelay>
	  hum_value = BSP_HSENSOR_ReadHumidity();
 800188c:	e7b0      	b.n	80017f0 <StartHumidity+0x8>
 800188e:	bf00      	nop
 8001890:	20000140 	.word	0x20000140
 8001894:	20000148 	.word	0x20000148
 8001898:	2000014c 	.word	0x2000014c
 800189c:	42c80000 	.word	0x42c80000
 80018a0:	20000150 	.word	0x20000150
 80018a4:	0800a688 	.word	0x0800a688
 80018a8:	200000f8 	.word	0x200000f8
 80018ac:	2000373c 	.word	0x2000373c

080018b0 <StartIndex>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartIndex */
void StartIndex(void *argument)
{
 80018b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018b4:	b084      	sub	sp, #16
 80018b6:	af02      	add	r7, sp, #8
 80018b8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartIndex */
  /* Infinite loop */
  for(;;)
  {
	  temp_value = (temp_value * (1.8)) + 32;
 80018ba:	4bd9      	ldr	r3, [pc, #868]	; (8001c20 <StartIndex+0x370>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4618      	mov	r0, r3
 80018c0:	f7fe fe3a 	bl	8000538 <__aeabi_f2d>
 80018c4:	a3c0      	add	r3, pc, #768	; (adr r3, 8001bc8 <StartIndex+0x318>)
 80018c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ca:	f7fe fe8d 	bl	80005e8 <__aeabi_dmul>
 80018ce:	4603      	mov	r3, r0
 80018d0:	460c      	mov	r4, r1
 80018d2:	4618      	mov	r0, r3
 80018d4:	4621      	mov	r1, r4
 80018d6:	f04f 0200 	mov.w	r2, #0
 80018da:	4bd2      	ldr	r3, [pc, #840]	; (8001c24 <StartIndex+0x374>)
 80018dc:	f7fe fcce 	bl	800027c <__adddf3>
 80018e0:	4603      	mov	r3, r0
 80018e2:	460c      	mov	r4, r1
 80018e4:	4618      	mov	r0, r3
 80018e6:	4621      	mov	r1, r4
 80018e8:	f7ff f8b8 	bl	8000a5c <__aeabi_d2f>
 80018ec:	4602      	mov	r2, r0
 80018ee:	4bcc      	ldr	r3, [pc, #816]	; (8001c20 <StartIndex+0x370>)
 80018f0:	601a      	str	r2, [r3, #0]
	  heatIndex = -42.379 + (2.04901523 * temp_value) + (10.14333127 * hum_value) + (-.22475541 * temp_value*hum_value) + (-0.00683783 * (temp_value*temp_value)) + (-0.05481717 * (hum_value * hum_value)) + (0.00122874 * (temp_value * temp_value) * hum_value) + (0.00085282 * temp_value * (hum_value * hum_value)) + (-0.00000199 * (temp_value * temp_value) * (hum_value * hum_value));
 80018f2:	4bcb      	ldr	r3, [pc, #812]	; (8001c20 <StartIndex+0x370>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7fe fe1e 	bl	8000538 <__aeabi_f2d>
 80018fc:	a3b4      	add	r3, pc, #720	; (adr r3, 8001bd0 <StartIndex+0x320>)
 80018fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001902:	f7fe fe71 	bl	80005e8 <__aeabi_dmul>
 8001906:	4603      	mov	r3, r0
 8001908:	460c      	mov	r4, r1
 800190a:	4618      	mov	r0, r3
 800190c:	4621      	mov	r1, r4
 800190e:	a3b2      	add	r3, pc, #712	; (adr r3, 8001bd8 <StartIndex+0x328>)
 8001910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001914:	f7fe fcb0 	bl	8000278 <__aeabi_dsub>
 8001918:	4603      	mov	r3, r0
 800191a:	460c      	mov	r4, r1
 800191c:	4625      	mov	r5, r4
 800191e:	461c      	mov	r4, r3
 8001920:	4bc1      	ldr	r3, [pc, #772]	; (8001c28 <StartIndex+0x378>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4618      	mov	r0, r3
 8001926:	f7fe fe07 	bl	8000538 <__aeabi_f2d>
 800192a:	a3ad      	add	r3, pc, #692	; (adr r3, 8001be0 <StartIndex+0x330>)
 800192c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001930:	f7fe fe5a 	bl	80005e8 <__aeabi_dmul>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	4620      	mov	r0, r4
 800193a:	4629      	mov	r1, r5
 800193c:	f7fe fc9e 	bl	800027c <__adddf3>
 8001940:	4603      	mov	r3, r0
 8001942:	460c      	mov	r4, r1
 8001944:	4625      	mov	r5, r4
 8001946:	461c      	mov	r4, r3
 8001948:	4bb5      	ldr	r3, [pc, #724]	; (8001c20 <StartIndex+0x370>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	f7fe fdf3 	bl	8000538 <__aeabi_f2d>
 8001952:	a3a5      	add	r3, pc, #660	; (adr r3, 8001be8 <StartIndex+0x338>)
 8001954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001958:	f7fe fe46 	bl	80005e8 <__aeabi_dmul>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	4690      	mov	r8, r2
 8001962:	4699      	mov	r9, r3
 8001964:	4bb0      	ldr	r3, [pc, #704]	; (8001c28 <StartIndex+0x378>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4618      	mov	r0, r3
 800196a:	f7fe fde5 	bl	8000538 <__aeabi_f2d>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	4640      	mov	r0, r8
 8001974:	4649      	mov	r1, r9
 8001976:	f7fe fe37 	bl	80005e8 <__aeabi_dmul>
 800197a:	4602      	mov	r2, r0
 800197c:	460b      	mov	r3, r1
 800197e:	4620      	mov	r0, r4
 8001980:	4629      	mov	r1, r5
 8001982:	f7fe fc7b 	bl	800027c <__adddf3>
 8001986:	4603      	mov	r3, r0
 8001988:	460c      	mov	r4, r1
 800198a:	4625      	mov	r5, r4
 800198c:	461c      	mov	r4, r3
 800198e:	4ba4      	ldr	r3, [pc, #656]	; (8001c20 <StartIndex+0x370>)
 8001990:	ed93 7a00 	vldr	s14, [r3]
 8001994:	4ba2      	ldr	r3, [pc, #648]	; (8001c20 <StartIndex+0x370>)
 8001996:	edd3 7a00 	vldr	s15, [r3]
 800199a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800199e:	ee17 0a90 	vmov	r0, s15
 80019a2:	f7fe fdc9 	bl	8000538 <__aeabi_f2d>
 80019a6:	a392      	add	r3, pc, #584	; (adr r3, 8001bf0 <StartIndex+0x340>)
 80019a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ac:	f7fe fe1c 	bl	80005e8 <__aeabi_dmul>
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	4620      	mov	r0, r4
 80019b6:	4629      	mov	r1, r5
 80019b8:	f7fe fc60 	bl	800027c <__adddf3>
 80019bc:	4603      	mov	r3, r0
 80019be:	460c      	mov	r4, r1
 80019c0:	4625      	mov	r5, r4
 80019c2:	461c      	mov	r4, r3
 80019c4:	4b98      	ldr	r3, [pc, #608]	; (8001c28 <StartIndex+0x378>)
 80019c6:	ed93 7a00 	vldr	s14, [r3]
 80019ca:	4b97      	ldr	r3, [pc, #604]	; (8001c28 <StartIndex+0x378>)
 80019cc:	edd3 7a00 	vldr	s15, [r3]
 80019d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019d4:	ee17 0a90 	vmov	r0, s15
 80019d8:	f7fe fdae 	bl	8000538 <__aeabi_f2d>
 80019dc:	a386      	add	r3, pc, #536	; (adr r3, 8001bf8 <StartIndex+0x348>)
 80019de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e2:	f7fe fe01 	bl	80005e8 <__aeabi_dmul>
 80019e6:	4602      	mov	r2, r0
 80019e8:	460b      	mov	r3, r1
 80019ea:	4620      	mov	r0, r4
 80019ec:	4629      	mov	r1, r5
 80019ee:	f7fe fc45 	bl	800027c <__adddf3>
 80019f2:	4603      	mov	r3, r0
 80019f4:	460c      	mov	r4, r1
 80019f6:	4625      	mov	r5, r4
 80019f8:	461c      	mov	r4, r3
 80019fa:	4b89      	ldr	r3, [pc, #548]	; (8001c20 <StartIndex+0x370>)
 80019fc:	ed93 7a00 	vldr	s14, [r3]
 8001a00:	4b87      	ldr	r3, [pc, #540]	; (8001c20 <StartIndex+0x370>)
 8001a02:	edd3 7a00 	vldr	s15, [r3]
 8001a06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a0a:	ee17 0a90 	vmov	r0, s15
 8001a0e:	f7fe fd93 	bl	8000538 <__aeabi_f2d>
 8001a12:	a37b      	add	r3, pc, #492	; (adr r3, 8001c00 <StartIndex+0x350>)
 8001a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a18:	f7fe fde6 	bl	80005e8 <__aeabi_dmul>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	460b      	mov	r3, r1
 8001a20:	4690      	mov	r8, r2
 8001a22:	4699      	mov	r9, r3
 8001a24:	4b80      	ldr	r3, [pc, #512]	; (8001c28 <StartIndex+0x378>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7fe fd85 	bl	8000538 <__aeabi_f2d>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	460b      	mov	r3, r1
 8001a32:	4640      	mov	r0, r8
 8001a34:	4649      	mov	r1, r9
 8001a36:	f7fe fdd7 	bl	80005e8 <__aeabi_dmul>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	4620      	mov	r0, r4
 8001a40:	4629      	mov	r1, r5
 8001a42:	f7fe fc1b 	bl	800027c <__adddf3>
 8001a46:	4603      	mov	r3, r0
 8001a48:	460c      	mov	r4, r1
 8001a4a:	4625      	mov	r5, r4
 8001a4c:	461c      	mov	r4, r3
 8001a4e:	4b74      	ldr	r3, [pc, #464]	; (8001c20 <StartIndex+0x370>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7fe fd70 	bl	8000538 <__aeabi_f2d>
 8001a58:	a36b      	add	r3, pc, #428	; (adr r3, 8001c08 <StartIndex+0x358>)
 8001a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5e:	f7fe fdc3 	bl	80005e8 <__aeabi_dmul>
 8001a62:	4602      	mov	r2, r0
 8001a64:	460b      	mov	r3, r1
 8001a66:	4690      	mov	r8, r2
 8001a68:	4699      	mov	r9, r3
 8001a6a:	4b6f      	ldr	r3, [pc, #444]	; (8001c28 <StartIndex+0x378>)
 8001a6c:	ed93 7a00 	vldr	s14, [r3]
 8001a70:	4b6d      	ldr	r3, [pc, #436]	; (8001c28 <StartIndex+0x378>)
 8001a72:	edd3 7a00 	vldr	s15, [r3]
 8001a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a7a:	ee17 0a90 	vmov	r0, s15
 8001a7e:	f7fe fd5b 	bl	8000538 <__aeabi_f2d>
 8001a82:	4602      	mov	r2, r0
 8001a84:	460b      	mov	r3, r1
 8001a86:	4640      	mov	r0, r8
 8001a88:	4649      	mov	r1, r9
 8001a8a:	f7fe fdad 	bl	80005e8 <__aeabi_dmul>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	460b      	mov	r3, r1
 8001a92:	4620      	mov	r0, r4
 8001a94:	4629      	mov	r1, r5
 8001a96:	f7fe fbf1 	bl	800027c <__adddf3>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	460c      	mov	r4, r1
 8001a9e:	4625      	mov	r5, r4
 8001aa0:	461c      	mov	r4, r3
 8001aa2:	4b5f      	ldr	r3, [pc, #380]	; (8001c20 <StartIndex+0x370>)
 8001aa4:	ed93 7a00 	vldr	s14, [r3]
 8001aa8:	4b5d      	ldr	r3, [pc, #372]	; (8001c20 <StartIndex+0x370>)
 8001aaa:	edd3 7a00 	vldr	s15, [r3]
 8001aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ab2:	ee17 0a90 	vmov	r0, s15
 8001ab6:	f7fe fd3f 	bl	8000538 <__aeabi_f2d>
 8001aba:	a355      	add	r3, pc, #340	; (adr r3, 8001c10 <StartIndex+0x360>)
 8001abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac0:	f7fe fd92 	bl	80005e8 <__aeabi_dmul>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	4690      	mov	r8, r2
 8001aca:	4699      	mov	r9, r3
 8001acc:	4b56      	ldr	r3, [pc, #344]	; (8001c28 <StartIndex+0x378>)
 8001ace:	ed93 7a00 	vldr	s14, [r3]
 8001ad2:	4b55      	ldr	r3, [pc, #340]	; (8001c28 <StartIndex+0x378>)
 8001ad4:	edd3 7a00 	vldr	s15, [r3]
 8001ad8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001adc:	ee17 0a90 	vmov	r0, s15
 8001ae0:	f7fe fd2a 	bl	8000538 <__aeabi_f2d>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	4640      	mov	r0, r8
 8001aea:	4649      	mov	r1, r9
 8001aec:	f7fe fd7c 	bl	80005e8 <__aeabi_dmul>
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	4620      	mov	r0, r4
 8001af6:	4629      	mov	r1, r5
 8001af8:	f7fe fbc0 	bl	800027c <__adddf3>
 8001afc:	4603      	mov	r3, r0
 8001afe:	460c      	mov	r4, r1
 8001b00:	4618      	mov	r0, r3
 8001b02:	4621      	mov	r1, r4
 8001b04:	f7fe ffaa 	bl	8000a5c <__aeabi_d2f>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	4b48      	ldr	r3, [pc, #288]	; (8001c2c <StartIndex+0x37c>)
 8001b0c:	601a      	str	r2, [r3, #0]
	  heatIndex = (heatIndex - 32) * 0.55;
 8001b0e:	4b47      	ldr	r3, [pc, #284]	; (8001c2c <StartIndex+0x37c>)
 8001b10:	edd3 7a00 	vldr	s15, [r3]
 8001b14:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8001c30 <StartIndex+0x380>
 8001b18:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b1c:	ee17 0a90 	vmov	r0, s15
 8001b20:	f7fe fd0a 	bl	8000538 <__aeabi_f2d>
 8001b24:	a33c      	add	r3, pc, #240	; (adr r3, 8001c18 <StartIndex+0x368>)
 8001b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2a:	f7fe fd5d 	bl	80005e8 <__aeabi_dmul>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	460c      	mov	r4, r1
 8001b32:	4618      	mov	r0, r3
 8001b34:	4621      	mov	r1, r4
 8001b36:	f7fe ff91 	bl	8000a5c <__aeabi_d2f>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	4b3b      	ldr	r3, [pc, #236]	; (8001c2c <StartIndex+0x37c>)
 8001b3e:	601a      	str	r2, [r3, #0]
	  tmpInt1 = heatIndex;
 8001b40:	4b3a      	ldr	r3, [pc, #232]	; (8001c2c <StartIndex+0x37c>)
 8001b42:	edd3 7a00 	vldr	s15, [r3]
 8001b46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b4a:	ee17 2a90 	vmov	r2, s15
 8001b4e:	4b39      	ldr	r3, [pc, #228]	; (8001c34 <StartIndex+0x384>)
 8001b50:	601a      	str	r2, [r3, #0]
	  tmpFrac = heatIndex - tmpInt1;
 8001b52:	4b36      	ldr	r3, [pc, #216]	; (8001c2c <StartIndex+0x37c>)
 8001b54:	ed93 7a00 	vldr	s14, [r3]
 8001b58:	4b36      	ldr	r3, [pc, #216]	; (8001c34 <StartIndex+0x384>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	ee07 3a90 	vmov	s15, r3
 8001b60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b68:	4b33      	ldr	r3, [pc, #204]	; (8001c38 <StartIndex+0x388>)
 8001b6a:	edc3 7a00 	vstr	s15, [r3]
	  //tmpInt2 = trunc(heatIndex);
	  tmpInt2 = trunc(tmpFrac * 100);
 8001b6e:	4b32      	ldr	r3, [pc, #200]	; (8001c38 <StartIndex+0x388>)
 8001b70:	edd3 7a00 	vldr	s15, [r3]
 8001b74:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001c3c <StartIndex+0x38c>
 8001b78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b7c:	ee17 0a90 	vmov	r0, s15
 8001b80:	f7fe fcda 	bl	8000538 <__aeabi_f2d>
 8001b84:	4603      	mov	r3, r0
 8001b86:	460c      	mov	r4, r1
 8001b88:	ec44 3b10 	vmov	d0, r3, r4
 8001b8c:	f008 fcfc 	bl	800a588 <trunc>
 8001b90:	ec54 3b10 	vmov	r3, r4, d0
 8001b94:	4618      	mov	r0, r3
 8001b96:	4621      	mov	r1, r4
 8001b98:	f7fe ff38 	bl	8000a0c <__aeabi_d2iz>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	4b28      	ldr	r3, [pc, #160]	; (8001c40 <StartIndex+0x390>)
 8001ba0:	601a      	str	r2, [r3, #0]
	  snprintf(str_hi,30," Heat Index = %d.%02d\r\n", tmpInt1, tmpInt2);
 8001ba2:	4b24      	ldr	r3, [pc, #144]	; (8001c34 <StartIndex+0x384>)
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	4b26      	ldr	r3, [pc, #152]	; (8001c40 <StartIndex+0x390>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	4613      	mov	r3, r2
 8001bae:	4a25      	ldr	r2, [pc, #148]	; (8001c44 <StartIndex+0x394>)
 8001bb0:	211e      	movs	r1, #30
 8001bb2:	4825      	ldr	r0, [pc, #148]	; (8001c48 <StartIndex+0x398>)
 8001bb4:	f008 f8d8 	bl	8009d68 <sniprintf>
	  //snprintf(str_hi,30," Heat Index = %d\n\r", tmpInt2); // @suppress("Float formatting support")
	  HAL_UART_Transmit(&huart1,( uint8_t * )str_hi,sizeof(str_hi),1000);
 8001bb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bbc:	221e      	movs	r2, #30
 8001bbe:	4922      	ldr	r1, [pc, #136]	; (8001c48 <StartIndex+0x398>)
 8001bc0:	e044      	b.n	8001c4c <StartIndex+0x39c>
 8001bc2:	bf00      	nop
 8001bc4:	f3af 8000 	nop.w
 8001bc8:	cccccccd 	.word	0xcccccccd
 8001bcc:	3ffccccc 	.word	0x3ffccccc
 8001bd0:	18ced8ec 	.word	0x18ced8ec
 8001bd4:	40006462 	.word	0x40006462
 8001bd8:	126e978d 	.word	0x126e978d
 8001bdc:	40453083 	.word	0x40453083
 8001be0:	b75a49cd 	.word	0xb75a49cd
 8001be4:	40244962 	.word	0x40244962
 8001be8:	07c647f8 	.word	0x07c647f8
 8001bec:	bfccc4c9 	.word	0xbfccc4c9
 8001bf0:	039c16cc 	.word	0x039c16cc
 8001bf4:	bf7c01fc 	.word	0xbf7c01fc
 8001bf8:	00d18c24 	.word	0x00d18c24
 8001bfc:	bfac10ff 	.word	0xbfac10ff
 8001c00:	8760dce5 	.word	0x8760dce5
 8001c04:	3f5421b5 	.word	0x3f5421b5
 8001c08:	013330da 	.word	0x013330da
 8001c0c:	3f4bf1f9 	.word	0x3f4bf1f9
 8001c10:	11d3bd01 	.word	0x11d3bd01
 8001c14:	bec0b17e 	.word	0xbec0b17e
 8001c18:	9999999a 	.word	0x9999999a
 8001c1c:	3fe19999 	.word	0x3fe19999
 8001c20:	20000138 	.word	0x20000138
 8001c24:	40400000 	.word	0x40400000
 8001c28:	20000140 	.word	0x20000140
 8001c2c:	20000144 	.word	0x20000144
 8001c30:	42000000 	.word	0x42000000
 8001c34:	20000148 	.word	0x20000148
 8001c38:	2000014c 	.word	0x2000014c
 8001c3c:	42c80000 	.word	0x42c80000
 8001c40:	20000150 	.word	0x20000150
 8001c44:	0800a6a4 	.word	0x0800a6a4
 8001c48:	20000118 	.word	0x20000118
 8001c4c:	4803      	ldr	r0, [pc, #12]	; (8001c5c <StartIndex+0x3ac>)
 8001c4e:	f004 fb1b 	bl	8006288 <HAL_UART_Transmit>
	  osDelay(15000);
 8001c52:	f643 2098 	movw	r0, #15000	; 0x3a98
 8001c56:	f005 fc1f 	bl	8007498 <osDelay>
	  temp_value = (temp_value * (1.8)) + 32;
 8001c5a:	e62e      	b.n	80018ba <StartIndex+0xa>
 8001c5c:	2000373c 	.word	0x2000373c

08001c60 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a04      	ldr	r2, [pc, #16]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d101      	bne.n	8001c76 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c72:	f000 ffbb 	bl	8002bec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c76:	bf00      	nop
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40001000 	.word	0x40001000

08001c84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
	...

08001c94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c9a:	4b11      	ldr	r3, [pc, #68]	; (8001ce0 <HAL_MspInit+0x4c>)
 8001c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c9e:	4a10      	ldr	r2, [pc, #64]	; (8001ce0 <HAL_MspInit+0x4c>)
 8001ca0:	f043 0301 	orr.w	r3, r3, #1
 8001ca4:	6613      	str	r3, [r2, #96]	; 0x60
 8001ca6:	4b0e      	ldr	r3, [pc, #56]	; (8001ce0 <HAL_MspInit+0x4c>)
 8001ca8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	607b      	str	r3, [r7, #4]
 8001cb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ce0 <HAL_MspInit+0x4c>)
 8001cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb6:	4a0a      	ldr	r2, [pc, #40]	; (8001ce0 <HAL_MspInit+0x4c>)
 8001cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cbc:	6593      	str	r3, [r2, #88]	; 0x58
 8001cbe:	4b08      	ldr	r3, [pc, #32]	; (8001ce0 <HAL_MspInit+0x4c>)
 8001cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc6:	603b      	str	r3, [r7, #0]
 8001cc8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001cca:	2200      	movs	r2, #0
 8001ccc:	210f      	movs	r1, #15
 8001cce:	f06f 0001 	mvn.w	r0, #1
 8001cd2:	f001 f883 	bl	8002ddc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40021000 	.word	0x40021000

08001ce4 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08a      	sub	sp, #40	; 0x28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cec:	f107 0314 	add.w	r3, r7, #20
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
 8001cfa:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8001cfc:	4b18      	ldr	r3, [pc, #96]	; (8001d60 <HAL_DFSDM_ChannelMspInit+0x7c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d128      	bne.n	8001d56 <HAL_DFSDM_ChannelMspInit+0x72>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001d04:	4b17      	ldr	r3, [pc, #92]	; (8001d64 <HAL_DFSDM_ChannelMspInit+0x80>)
 8001d06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d08:	4a16      	ldr	r2, [pc, #88]	; (8001d64 <HAL_DFSDM_ChannelMspInit+0x80>)
 8001d0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d0e:	6613      	str	r3, [r2, #96]	; 0x60
 8001d10:	4b14      	ldr	r3, [pc, #80]	; (8001d64 <HAL_DFSDM_ChannelMspInit+0x80>)
 8001d12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d18:	613b      	str	r3, [r7, #16]
 8001d1a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d1c:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <HAL_DFSDM_ChannelMspInit+0x80>)
 8001d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d20:	4a10      	ldr	r2, [pc, #64]	; (8001d64 <HAL_DFSDM_ChannelMspInit+0x80>)
 8001d22:	f043 0310 	orr.w	r3, r3, #16
 8001d26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d28:	4b0e      	ldr	r3, [pc, #56]	; (8001d64 <HAL_DFSDM_ChannelMspInit+0x80>)
 8001d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2c:	f003 0310 	and.w	r3, r3, #16
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration    
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT 
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001d34:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001d38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d42:	2300      	movs	r3, #0
 8001d44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001d46:	2306      	movs	r3, #6
 8001d48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d4a:	f107 0314 	add.w	r3, r7, #20
 8001d4e:	4619      	mov	r1, r3
 8001d50:	4805      	ldr	r0, [pc, #20]	; (8001d68 <HAL_DFSDM_ChannelMspInit+0x84>)
 8001d52:	f001 f979 	bl	8003048 <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 8001d56:	bf00      	nop
 8001d58:	3728      	adds	r7, #40	; 0x28
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	20000154 	.word	0x20000154
 8001d64:	40021000 	.word	0x40021000
 8001d68:	48001000 	.word	0x48001000

08001d6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08a      	sub	sp, #40	; 0x28
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d74:	f107 0314 	add.w	r3, r7, #20
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
 8001d80:	60da      	str	r2, [r3, #12]
 8001d82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a17      	ldr	r2, [pc, #92]	; (8001de8 <HAL_I2C_MspInit+0x7c>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d128      	bne.n	8001de0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d8e:	4b17      	ldr	r3, [pc, #92]	; (8001dec <HAL_I2C_MspInit+0x80>)
 8001d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d92:	4a16      	ldr	r2, [pc, #88]	; (8001dec <HAL_I2C_MspInit+0x80>)
 8001d94:	f043 0302 	orr.w	r3, r3, #2
 8001d98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d9a:	4b14      	ldr	r3, [pc, #80]	; (8001dec <HAL_I2C_MspInit+0x80>)
 8001d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	613b      	str	r3, [r7, #16]
 8001da4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001da6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001daa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dac:	2312      	movs	r3, #18
 8001dae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001db0:	2301      	movs	r3, #1
 8001db2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db4:	2303      	movs	r3, #3
 8001db6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001db8:	2304      	movs	r3, #4
 8001dba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dbc:	f107 0314 	add.w	r3, r7, #20
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	480b      	ldr	r0, [pc, #44]	; (8001df0 <HAL_I2C_MspInit+0x84>)
 8001dc4:	f001 f940 	bl	8003048 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001dc8:	4b08      	ldr	r3, [pc, #32]	; (8001dec <HAL_I2C_MspInit+0x80>)
 8001dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dcc:	4a07      	ldr	r2, [pc, #28]	; (8001dec <HAL_I2C_MspInit+0x80>)
 8001dce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001dd2:	6593      	str	r3, [r2, #88]	; 0x58
 8001dd4:	4b05      	ldr	r3, [pc, #20]	; (8001dec <HAL_I2C_MspInit+0x80>)
 8001dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001de0:	bf00      	nop
 8001de2:	3728      	adds	r7, #40	; 0x28
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40005800 	.word	0x40005800
 8001dec:	40021000 	.word	0x40021000
 8001df0:	48000400 	.word	0x48000400

08001df4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a08      	ldr	r2, [pc, #32]	; (8001e24 <HAL_I2C_MspDeInit+0x30>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d10a      	bne.n	8001e1c <HAL_I2C_MspDeInit+0x28>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001e06:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <HAL_I2C_MspDeInit+0x34>)
 8001e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e0a:	4a07      	ldr	r2, [pc, #28]	; (8001e28 <HAL_I2C_MspDeInit+0x34>)
 8001e0c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001e10:	6593      	str	r3, [r2, #88]	; 0x58
  
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin);
 8001e12:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001e16:	4805      	ldr	r0, [pc, #20]	; (8001e2c <HAL_I2C_MspDeInit+0x38>)
 8001e18:	f001 fabe 	bl	8003398 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001e1c:	bf00      	nop
 8001e1e:	3708      	adds	r7, #8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40005800 	.word	0x40005800
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	48000400 	.word	0x48000400

08001e30 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b08a      	sub	sp, #40	; 0x28
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e38:	f107 0314 	add.w	r3, r7, #20
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	609a      	str	r2, [r3, #8]
 8001e44:	60da      	str	r2, [r3, #12]
 8001e46:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a17      	ldr	r2, [pc, #92]	; (8001eac <HAL_QSPI_MspInit+0x7c>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d128      	bne.n	8001ea4 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001e52:	4b17      	ldr	r3, [pc, #92]	; (8001eb0 <HAL_QSPI_MspInit+0x80>)
 8001e54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e56:	4a16      	ldr	r2, [pc, #88]	; (8001eb0 <HAL_QSPI_MspInit+0x80>)
 8001e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e5c:	6513      	str	r3, [r2, #80]	; 0x50
 8001e5e:	4b14      	ldr	r3, [pc, #80]	; (8001eb0 <HAL_QSPI_MspInit+0x80>)
 8001e60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e66:	613b      	str	r3, [r7, #16]
 8001e68:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e6a:	4b11      	ldr	r3, [pc, #68]	; (8001eb0 <HAL_QSPI_MspInit+0x80>)
 8001e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e6e:	4a10      	ldr	r2, [pc, #64]	; (8001eb0 <HAL_QSPI_MspInit+0x80>)
 8001e70:	f043 0310 	orr.w	r3, r3, #16
 8001e74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e76:	4b0e      	ldr	r3, [pc, #56]	; (8001eb0 <HAL_QSPI_MspInit+0x80>)
 8001e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e7a:	f003 0310 	and.w	r3, r3, #16
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3 
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin 
 8001e82:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001e86:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e90:	2303      	movs	r3, #3
 8001e92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001e94:	230a      	movs	r3, #10
 8001e96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e98:	f107 0314 	add.w	r3, r7, #20
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4805      	ldr	r0, [pc, #20]	; (8001eb4 <HAL_QSPI_MspInit+0x84>)
 8001ea0:	f001 f8d2 	bl	8003048 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001ea4:	bf00      	nop
 8001ea6:	3728      	adds	r7, #40	; 0x28
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	a0001000 	.word	0xa0001000
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	48001000 	.word	0x48001000

08001eb8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b08a      	sub	sp, #40	; 0x28
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec0:	f107 0314 	add.w	r3, r7, #20
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	605a      	str	r2, [r3, #4]
 8001eca:	609a      	str	r2, [r3, #8]
 8001ecc:	60da      	str	r2, [r3, #12]
 8001ece:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a17      	ldr	r2, [pc, #92]	; (8001f34 <HAL_SPI_MspInit+0x7c>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d128      	bne.n	8001f2c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001eda:	4b17      	ldr	r3, [pc, #92]	; (8001f38 <HAL_SPI_MspInit+0x80>)
 8001edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ede:	4a16      	ldr	r2, [pc, #88]	; (8001f38 <HAL_SPI_MspInit+0x80>)
 8001ee0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ee4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ee6:	4b14      	ldr	r3, [pc, #80]	; (8001f38 <HAL_SPI_MspInit+0x80>)
 8001ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001eee:	613b      	str	r3, [r7, #16]
 8001ef0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ef2:	4b11      	ldr	r3, [pc, #68]	; (8001f38 <HAL_SPI_MspInit+0x80>)
 8001ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef6:	4a10      	ldr	r2, [pc, #64]	; (8001f38 <HAL_SPI_MspInit+0x80>)
 8001ef8:	f043 0304 	orr.w	r3, r3, #4
 8001efc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001efe:	4b0e      	ldr	r3, [pc, #56]	; (8001f38 <HAL_SPI_MspInit+0x80>)
 8001f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f02:	f003 0304 	and.w	r3, r3, #4
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001f0a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001f0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f10:	2302      	movs	r3, #2
 8001f12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f14:	2300      	movs	r3, #0
 8001f16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001f1c:	2306      	movs	r3, #6
 8001f1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f20:	f107 0314 	add.w	r3, r7, #20
 8001f24:	4619      	mov	r1, r3
 8001f26:	4805      	ldr	r0, [pc, #20]	; (8001f3c <HAL_SPI_MspInit+0x84>)
 8001f28:	f001 f88e 	bl	8003048 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001f2c:	bf00      	nop
 8001f2e:	3728      	adds	r7, #40	; 0x28
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40003c00 	.word	0x40003c00
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	48000800 	.word	0x48000800

08001f40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b08c      	sub	sp, #48	; 0x30
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f48:	f107 031c 	add.w	r3, r7, #28
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	609a      	str	r2, [r3, #8]
 8001f54:	60da      	str	r2, [r3, #12]
 8001f56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a2e      	ldr	r2, [pc, #184]	; (8002018 <HAL_UART_MspInit+0xd8>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d128      	bne.n	8001fb4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f62:	4b2e      	ldr	r3, [pc, #184]	; (800201c <HAL_UART_MspInit+0xdc>)
 8001f64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f66:	4a2d      	ldr	r2, [pc, #180]	; (800201c <HAL_UART_MspInit+0xdc>)
 8001f68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f6c:	6613      	str	r3, [r2, #96]	; 0x60
 8001f6e:	4b2b      	ldr	r3, [pc, #172]	; (800201c <HAL_UART_MspInit+0xdc>)
 8001f70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f76:	61bb      	str	r3, [r7, #24]
 8001f78:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f7a:	4b28      	ldr	r3, [pc, #160]	; (800201c <HAL_UART_MspInit+0xdc>)
 8001f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f7e:	4a27      	ldr	r2, [pc, #156]	; (800201c <HAL_UART_MspInit+0xdc>)
 8001f80:	f043 0302 	orr.w	r3, r3, #2
 8001f84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f86:	4b25      	ldr	r3, [pc, #148]	; (800201c <HAL_UART_MspInit+0xdc>)
 8001f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	617b      	str	r3, [r7, #20]
 8001f90:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001f92:	23c0      	movs	r3, #192	; 0xc0
 8001f94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f96:	2302      	movs	r3, #2
 8001f98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001fa2:	2307      	movs	r3, #7
 8001fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fa6:	f107 031c 	add.w	r3, r7, #28
 8001faa:	4619      	mov	r1, r3
 8001fac:	481c      	ldr	r0, [pc, #112]	; (8002020 <HAL_UART_MspInit+0xe0>)
 8001fae:	f001 f84b 	bl	8003048 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001fb2:	e02d      	b.n	8002010 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a1a      	ldr	r2, [pc, #104]	; (8002024 <HAL_UART_MspInit+0xe4>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d128      	bne.n	8002010 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001fbe:	4b17      	ldr	r3, [pc, #92]	; (800201c <HAL_UART_MspInit+0xdc>)
 8001fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc2:	4a16      	ldr	r2, [pc, #88]	; (800201c <HAL_UART_MspInit+0xdc>)
 8001fc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fc8:	6593      	str	r3, [r2, #88]	; 0x58
 8001fca:	4b14      	ldr	r3, [pc, #80]	; (800201c <HAL_UART_MspInit+0xdc>)
 8001fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fd2:	613b      	str	r3, [r7, #16]
 8001fd4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fd6:	4b11      	ldr	r3, [pc, #68]	; (800201c <HAL_UART_MspInit+0xdc>)
 8001fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fda:	4a10      	ldr	r2, [pc, #64]	; (800201c <HAL_UART_MspInit+0xdc>)
 8001fdc:	f043 0308 	orr.w	r3, r3, #8
 8001fe0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fe2:	4b0e      	ldr	r3, [pc, #56]	; (800201c <HAL_UART_MspInit+0xdc>)
 8001fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe6:	f003 0308 	and.w	r3, r3, #8
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001fee:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ff2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002000:	2307      	movs	r3, #7
 8002002:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002004:	f107 031c 	add.w	r3, r7, #28
 8002008:	4619      	mov	r1, r3
 800200a:	4807      	ldr	r0, [pc, #28]	; (8002028 <HAL_UART_MspInit+0xe8>)
 800200c:	f001 f81c 	bl	8003048 <HAL_GPIO_Init>
}
 8002010:	bf00      	nop
 8002012:	3730      	adds	r7, #48	; 0x30
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40013800 	.word	0x40013800
 800201c:	40021000 	.word	0x40021000
 8002020:	48000400 	.word	0x48000400
 8002024:	40004800 	.word	0x40004800
 8002028:	48000c00 	.word	0x48000c00

0800202c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b08a      	sub	sp, #40	; 0x28
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002034:	f107 0314 	add.w	r3, r7, #20
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	605a      	str	r2, [r3, #4]
 800203e:	609a      	str	r2, [r3, #8]
 8002040:	60da      	str	r2, [r3, #12]
 8002042:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800204c:	d154      	bne.n	80020f8 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800204e:	4b2c      	ldr	r3, [pc, #176]	; (8002100 <HAL_PCD_MspInit+0xd4>)
 8002050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002052:	4a2b      	ldr	r2, [pc, #172]	; (8002100 <HAL_PCD_MspInit+0xd4>)
 8002054:	f043 0301 	orr.w	r3, r3, #1
 8002058:	64d3      	str	r3, [r2, #76]	; 0x4c
 800205a:	4b29      	ldr	r3, [pc, #164]	; (8002100 <HAL_PCD_MspInit+0xd4>)
 800205c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	613b      	str	r3, [r7, #16]
 8002064:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8002066:	f44f 7300 	mov.w	r3, #512	; 0x200
 800206a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800206c:	2300      	movs	r3, #0
 800206e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002070:	2300      	movs	r3, #0
 8002072:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002074:	f107 0314 	add.w	r3, r7, #20
 8002078:	4619      	mov	r1, r3
 800207a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800207e:	f000 ffe3 	bl	8003048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8002082:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002086:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002088:	2302      	movs	r3, #2
 800208a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208c:	2300      	movs	r3, #0
 800208e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002090:	2303      	movs	r3, #3
 8002092:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002094:	230a      	movs	r3, #10
 8002096:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002098:	f107 0314 	add.w	r3, r7, #20
 800209c:	4619      	mov	r1, r3
 800209e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020a2:	f000 ffd1 	bl	8003048 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80020a6:	4b16      	ldr	r3, [pc, #88]	; (8002100 <HAL_PCD_MspInit+0xd4>)
 80020a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020aa:	4a15      	ldr	r2, [pc, #84]	; (8002100 <HAL_PCD_MspInit+0xd4>)
 80020ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020b2:	4b13      	ldr	r3, [pc, #76]	; (8002100 <HAL_PCD_MspInit+0xd4>)
 80020b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020be:	4b10      	ldr	r3, [pc, #64]	; (8002100 <HAL_PCD_MspInit+0xd4>)
 80020c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d114      	bne.n	80020f4 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ca:	4b0d      	ldr	r3, [pc, #52]	; (8002100 <HAL_PCD_MspInit+0xd4>)
 80020cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ce:	4a0c      	ldr	r2, [pc, #48]	; (8002100 <HAL_PCD_MspInit+0xd4>)
 80020d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020d4:	6593      	str	r3, [r2, #88]	; 0x58
 80020d6:	4b0a      	ldr	r3, [pc, #40]	; (8002100 <HAL_PCD_MspInit+0xd4>)
 80020d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020de:	60bb      	str	r3, [r7, #8]
 80020e0:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80020e2:	f002 f9e5 	bl	80044b0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80020e6:	4b06      	ldr	r3, [pc, #24]	; (8002100 <HAL_PCD_MspInit+0xd4>)
 80020e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ea:	4a05      	ldr	r2, [pc, #20]	; (8002100 <HAL_PCD_MspInit+0xd4>)
 80020ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020f0:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80020f2:	e001      	b.n	80020f8 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 80020f4:	f002 f9dc 	bl	80044b0 <HAL_PWREx_EnableVddUSB>
}
 80020f8:	bf00      	nop
 80020fa:	3728      	adds	r7, #40	; 0x28
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40021000 	.word	0x40021000

08002104 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b08c      	sub	sp, #48	; 0x30
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800210c:	2300      	movs	r3, #0
 800210e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002110:	2300      	movs	r3, #0
 8002112:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8002114:	2200      	movs	r2, #0
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	2036      	movs	r0, #54	; 0x36
 800211a:	f000 fe5f 	bl	8002ddc <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800211e:	2036      	movs	r0, #54	; 0x36
 8002120:	f000 fe78 	bl	8002e14 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002124:	4b1e      	ldr	r3, [pc, #120]	; (80021a0 <HAL_InitTick+0x9c>)
 8002126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002128:	4a1d      	ldr	r2, [pc, #116]	; (80021a0 <HAL_InitTick+0x9c>)
 800212a:	f043 0310 	orr.w	r3, r3, #16
 800212e:	6593      	str	r3, [r2, #88]	; 0x58
 8002130:	4b1b      	ldr	r3, [pc, #108]	; (80021a0 <HAL_InitTick+0x9c>)
 8002132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002134:	f003 0310 	and.w	r3, r3, #16
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800213c:	f107 0210 	add.w	r2, r7, #16
 8002140:	f107 0314 	add.w	r3, r7, #20
 8002144:	4611      	mov	r1, r2
 8002146:	4618      	mov	r0, r3
 8002148:	f003 f814 	bl	8005174 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800214c:	f002 ffe6 	bl	800511c <HAL_RCC_GetPCLK1Freq>
 8002150:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002154:	4a13      	ldr	r2, [pc, #76]	; (80021a4 <HAL_InitTick+0xa0>)
 8002156:	fba2 2303 	umull	r2, r3, r2, r3
 800215a:	0c9b      	lsrs	r3, r3, #18
 800215c:	3b01      	subs	r3, #1
 800215e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002160:	4b11      	ldr	r3, [pc, #68]	; (80021a8 <HAL_InitTick+0xa4>)
 8002162:	4a12      	ldr	r2, [pc, #72]	; (80021ac <HAL_InitTick+0xa8>)
 8002164:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8002166:	4b10      	ldr	r3, [pc, #64]	; (80021a8 <HAL_InitTick+0xa4>)
 8002168:	f240 32e7 	movw	r2, #999	; 0x3e7
 800216c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800216e:	4a0e      	ldr	r2, [pc, #56]	; (80021a8 <HAL_InitTick+0xa4>)
 8002170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002172:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002174:	4b0c      	ldr	r3, [pc, #48]	; (80021a8 <HAL_InitTick+0xa4>)
 8002176:	2200      	movs	r2, #0
 8002178:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800217a:	4b0b      	ldr	r3, [pc, #44]	; (80021a8 <HAL_InitTick+0xa4>)
 800217c:	2200      	movs	r2, #0
 800217e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002180:	4809      	ldr	r0, [pc, #36]	; (80021a8 <HAL_InitTick+0xa4>)
 8002182:	f003 fdd3 	bl	8005d2c <HAL_TIM_Base_Init>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d104      	bne.n	8002196 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800218c:	4806      	ldr	r0, [pc, #24]	; (80021a8 <HAL_InitTick+0xa4>)
 800218e:	f003 fe03 	bl	8005d98 <HAL_TIM_Base_Start_IT>
 8002192:	4603      	mov	r3, r0
 8002194:	e000      	b.n	8002198 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
}
 8002198:	4618      	mov	r0, r3
 800219a:	3730      	adds	r7, #48	; 0x30
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40021000 	.word	0x40021000
 80021a4:	431bde83 	.word	0x431bde83
 80021a8:	2000380c 	.word	0x2000380c
 80021ac:	40001000 	.word	0x40001000

080021b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80021b4:	bf00      	nop
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021be:	b480      	push	{r7}
 80021c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021c2:	e7fe      	b.n	80021c2 <HardFault_Handler+0x4>

080021c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021c8:	e7fe      	b.n	80021c8 <MemManage_Handler+0x4>

080021ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021ca:	b480      	push	{r7}
 80021cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021ce:	e7fe      	b.n	80021ce <BusFault_Handler+0x4>

080021d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021d4:	e7fe      	b.n	80021d4 <UsageFault_Handler+0x4>

080021d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021d6:	b480      	push	{r7}
 80021d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021da:	bf00      	nop
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80021e8:	2020      	movs	r0, #32
 80021ea:	f001 f9e1 	bl	80035b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80021ee:	2040      	movs	r0, #64	; 0x40
 80021f0:	f001 f9de 	bl	80035b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80021f4:	2080      	movs	r0, #128	; 0x80
 80021f6:	f001 f9db 	bl	80035b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80021fa:	f44f 7080 	mov.w	r0, #256	; 0x100
 80021fe:	f001 f9d7 	bl	80035b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002202:	bf00      	nop
 8002204:	bd80      	pop	{r7, pc}

08002206 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800220a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800220e:	f001 f9cf 	bl	80035b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002212:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002216:	f001 f9cb 	bl	80035b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800221a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800221e:	f001 f9c7 	bl	80035b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002222:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002226:	f001 f9c3 	bl	80035b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800222a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800222e:	f001 f9bf 	bl	80035b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002232:	bf00      	nop
 8002234:	bd80      	pop	{r7, pc}
	...

08002238 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800223c:	4802      	ldr	r0, [pc, #8]	; (8002248 <TIM6_DAC_IRQHandler+0x10>)
 800223e:	f003 fdd5 	bl	8005dec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002242:	bf00      	nop
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	2000380c 	.word	0x2000380c

0800224c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002254:	4b11      	ldr	r3, [pc, #68]	; (800229c <_sbrk+0x50>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d102      	bne.n	8002262 <_sbrk+0x16>
		heap_end = &end;
 800225c:	4b0f      	ldr	r3, [pc, #60]	; (800229c <_sbrk+0x50>)
 800225e:	4a10      	ldr	r2, [pc, #64]	; (80022a0 <_sbrk+0x54>)
 8002260:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002262:	4b0e      	ldr	r3, [pc, #56]	; (800229c <_sbrk+0x50>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002268:	4b0c      	ldr	r3, [pc, #48]	; (800229c <_sbrk+0x50>)
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4413      	add	r3, r2
 8002270:	466a      	mov	r2, sp
 8002272:	4293      	cmp	r3, r2
 8002274:	d907      	bls.n	8002286 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002276:	f007 fd39 	bl	8009cec <__errno>
 800227a:	4602      	mov	r2, r0
 800227c:	230c      	movs	r3, #12
 800227e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002280:	f04f 33ff 	mov.w	r3, #4294967295
 8002284:	e006      	b.n	8002294 <_sbrk+0x48>
	}

	heap_end += incr;
 8002286:	4b05      	ldr	r3, [pc, #20]	; (800229c <_sbrk+0x50>)
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4413      	add	r3, r2
 800228e:	4a03      	ldr	r2, [pc, #12]	; (800229c <_sbrk+0x50>)
 8002290:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002292:	68fb      	ldr	r3, [r7, #12]
}
 8002294:	4618      	mov	r0, r3
 8002296:	3710      	adds	r7, #16
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	20000158 	.word	0x20000158
 80022a0:	20003960 	.word	0x20003960

080022a4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022a8:	4b17      	ldr	r3, [pc, #92]	; (8002308 <SystemInit+0x64>)
 80022aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ae:	4a16      	ldr	r2, [pc, #88]	; (8002308 <SystemInit+0x64>)
 80022b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80022b8:	4b14      	ldr	r3, [pc, #80]	; (800230c <SystemInit+0x68>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a13      	ldr	r2, [pc, #76]	; (800230c <SystemInit+0x68>)
 80022be:	f043 0301 	orr.w	r3, r3, #1
 80022c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80022c4:	4b11      	ldr	r3, [pc, #68]	; (800230c <SystemInit+0x68>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80022ca:	4b10      	ldr	r3, [pc, #64]	; (800230c <SystemInit+0x68>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a0f      	ldr	r2, [pc, #60]	; (800230c <SystemInit+0x68>)
 80022d0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80022d4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80022d8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80022da:	4b0c      	ldr	r3, [pc, #48]	; (800230c <SystemInit+0x68>)
 80022dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022e0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80022e2:	4b0a      	ldr	r3, [pc, #40]	; (800230c <SystemInit+0x68>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a09      	ldr	r2, [pc, #36]	; (800230c <SystemInit+0x68>)
 80022e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022ec:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80022ee:	4b07      	ldr	r3, [pc, #28]	; (800230c <SystemInit+0x68>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80022f4:	4b04      	ldr	r3, [pc, #16]	; (8002308 <SystemInit+0x64>)
 80022f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022fa:	609a      	str	r2, [r3, #8]
#endif
}
 80022fc:	bf00      	nop
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	e000ed00 	.word	0xe000ed00
 800230c:	40021000 	.word	0x40021000

08002310 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002310:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002348 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002314:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002316:	e003      	b.n	8002320 <LoopCopyDataInit>

08002318 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002318:	4b0c      	ldr	r3, [pc, #48]	; (800234c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800231a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800231c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800231e:	3104      	adds	r1, #4

08002320 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002320:	480b      	ldr	r0, [pc, #44]	; (8002350 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002322:	4b0c      	ldr	r3, [pc, #48]	; (8002354 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002324:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002326:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002328:	d3f6      	bcc.n	8002318 <CopyDataInit>
	ldr	r2, =_sbss
 800232a:	4a0b      	ldr	r2, [pc, #44]	; (8002358 <LoopForever+0x12>)
	b	LoopFillZerobss
 800232c:	e002      	b.n	8002334 <LoopFillZerobss>

0800232e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800232e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002330:	f842 3b04 	str.w	r3, [r2], #4

08002334 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002334:	4b09      	ldr	r3, [pc, #36]	; (800235c <LoopForever+0x16>)
	cmp	r2, r3
 8002336:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002338:	d3f9      	bcc.n	800232e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800233a:	f7ff ffb3 	bl	80022a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800233e:	f007 fcdb 	bl	8009cf8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002342:	f7fe fd5b 	bl	8000dfc <main>

08002346 <LoopForever>:

LoopForever:
    b LoopForever
 8002346:	e7fe      	b.n	8002346 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002348:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800234c:	0800a814 	.word	0x0800a814
	ldr	r0, =_sdata
 8002350:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002354:	2000009c 	.word	0x2000009c
	ldr	r2, =_sbss
 8002358:	2000009c 	.word	0x2000009c
	ldr	r3, = _ebss
 800235c:	20003960 	.word	0x20003960

08002360 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002360:	e7fe      	b.n	8002360 <ADC1_2_IRQHandler>
	...

08002364 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b08a      	sub	sp, #40	; 0x28
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800236c:	4b27      	ldr	r3, [pc, #156]	; (800240c <I2Cx_MspInit+0xa8>)
 800236e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002370:	4a26      	ldr	r2, [pc, #152]	; (800240c <I2Cx_MspInit+0xa8>)
 8002372:	f043 0302 	orr.w	r3, r3, #2
 8002376:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002378:	4b24      	ldr	r3, [pc, #144]	; (800240c <I2Cx_MspInit+0xa8>)
 800237a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	613b      	str	r3, [r7, #16]
 8002382:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8002384:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002388:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800238a:	2312      	movs	r3, #18
 800238c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800238e:	2301      	movs	r3, #1
 8002390:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002392:	2303      	movs	r3, #3
 8002394:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002396:	2304      	movs	r3, #4
 8002398:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800239a:	f107 0314 	add.w	r3, r7, #20
 800239e:	4619      	mov	r1, r3
 80023a0:	481b      	ldr	r0, [pc, #108]	; (8002410 <I2Cx_MspInit+0xac>)
 80023a2:	f000 fe51 	bl	8003048 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80023a6:	f107 0314 	add.w	r3, r7, #20
 80023aa:	4619      	mov	r1, r3
 80023ac:	4818      	ldr	r0, [pc, #96]	; (8002410 <I2Cx_MspInit+0xac>)
 80023ae:	f000 fe4b 	bl	8003048 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80023b2:	4b16      	ldr	r3, [pc, #88]	; (800240c <I2Cx_MspInit+0xa8>)
 80023b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b6:	4a15      	ldr	r2, [pc, #84]	; (800240c <I2Cx_MspInit+0xa8>)
 80023b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023bc:	6593      	str	r3, [r2, #88]	; 0x58
 80023be:	4b13      	ldr	r3, [pc, #76]	; (800240c <I2Cx_MspInit+0xa8>)
 80023c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023c6:	60fb      	str	r3, [r7, #12]
 80023c8:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80023ca:	4b10      	ldr	r3, [pc, #64]	; (800240c <I2Cx_MspInit+0xa8>)
 80023cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ce:	4a0f      	ldr	r2, [pc, #60]	; (800240c <I2Cx_MspInit+0xa8>)
 80023d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023d4:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80023d6:	4b0d      	ldr	r3, [pc, #52]	; (800240c <I2Cx_MspInit+0xa8>)
 80023d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023da:	4a0c      	ldr	r2, [pc, #48]	; (800240c <I2Cx_MspInit+0xa8>)
 80023dc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80023e0:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80023e2:	2200      	movs	r2, #0
 80023e4:	210f      	movs	r1, #15
 80023e6:	2021      	movs	r0, #33	; 0x21
 80023e8:	f000 fcf8 	bl	8002ddc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80023ec:	2021      	movs	r0, #33	; 0x21
 80023ee:	f000 fd11 	bl	8002e14 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80023f2:	2200      	movs	r2, #0
 80023f4:	210f      	movs	r1, #15
 80023f6:	2022      	movs	r0, #34	; 0x22
 80023f8:	f000 fcf0 	bl	8002ddc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80023fc:	2022      	movs	r0, #34	; 0x22
 80023fe:	f000 fd09 	bl	8002e14 <HAL_NVIC_EnableIRQ>
}
 8002402:	bf00      	nop
 8002404:	3728      	adds	r7, #40	; 0x28
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	40021000 	.word	0x40021000
 8002410:	48000400 	.word	0x48000400

08002414 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4a12      	ldr	r2, [pc, #72]	; (8002468 <I2Cx_Init+0x54>)
 8002420:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a11      	ldr	r2, [pc, #68]	; (800246c <I2Cx_Init+0x58>)
 8002426:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2201      	movs	r2, #1
 8002432:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f7ff ff89 	bl	8002364 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f001 f8cf 	bl	80035f6 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8002458:	2100      	movs	r1, #0
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f001 fdd4 	bl	8004008 <HAL_I2CEx_ConfigAnalogFilter>
}
 8002460:	bf00      	nop
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40005800 	.word	0x40005800
 800246c:	00702681 	.word	0x00702681

08002470 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b08a      	sub	sp, #40	; 0x28
 8002474:	af04      	add	r7, sp, #16
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	4608      	mov	r0, r1
 800247a:	4611      	mov	r1, r2
 800247c:	461a      	mov	r2, r3
 800247e:	4603      	mov	r3, r0
 8002480:	72fb      	strb	r3, [r7, #11]
 8002482:	460b      	mov	r3, r1
 8002484:	813b      	strh	r3, [r7, #8]
 8002486:	4613      	mov	r3, r2
 8002488:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800248a:	2300      	movs	r3, #0
 800248c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800248e:	7afb      	ldrb	r3, [r7, #11]
 8002490:	b299      	uxth	r1, r3
 8002492:	88f8      	ldrh	r0, [r7, #6]
 8002494:	893a      	ldrh	r2, [r7, #8]
 8002496:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800249a:	9302      	str	r3, [sp, #8]
 800249c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800249e:	9301      	str	r3, [sp, #4]
 80024a0:	6a3b      	ldr	r3, [r7, #32]
 80024a2:	9300      	str	r3, [sp, #0]
 80024a4:	4603      	mov	r3, r0
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f001 fa78 	bl	800399c <HAL_I2C_Mem_Read>
 80024ac:	4603      	mov	r3, r0
 80024ae:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80024b0:	7dfb      	ldrb	r3, [r7, #23]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d004      	beq.n	80024c0 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 80024b6:	7afb      	ldrb	r3, [r7, #11]
 80024b8:	4619      	mov	r1, r3
 80024ba:	68f8      	ldr	r0, [r7, #12]
 80024bc:	f000 f832 	bl	8002524 <I2Cx_Error>
  }
  return status;
 80024c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3718      	adds	r7, #24
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b08a      	sub	sp, #40	; 0x28
 80024ce:	af04      	add	r7, sp, #16
 80024d0:	60f8      	str	r0, [r7, #12]
 80024d2:	4608      	mov	r0, r1
 80024d4:	4611      	mov	r1, r2
 80024d6:	461a      	mov	r2, r3
 80024d8:	4603      	mov	r3, r0
 80024da:	72fb      	strb	r3, [r7, #11]
 80024dc:	460b      	mov	r3, r1
 80024de:	813b      	strh	r3, [r7, #8]
 80024e0:	4613      	mov	r3, r2
 80024e2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80024e4:	2300      	movs	r3, #0
 80024e6:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80024e8:	7afb      	ldrb	r3, [r7, #11]
 80024ea:	b299      	uxth	r1, r3
 80024ec:	88f8      	ldrh	r0, [r7, #6]
 80024ee:	893a      	ldrh	r2, [r7, #8]
 80024f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024f4:	9302      	str	r3, [sp, #8]
 80024f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80024f8:	9301      	str	r3, [sp, #4]
 80024fa:	6a3b      	ldr	r3, [r7, #32]
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	4603      	mov	r3, r0
 8002500:	68f8      	ldr	r0, [r7, #12]
 8002502:	f001 f937 	bl	8003774 <HAL_I2C_Mem_Write>
 8002506:	4603      	mov	r3, r0
 8002508:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800250a:	7dfb      	ldrb	r3, [r7, #23]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d004      	beq.n	800251a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002510:	7afb      	ldrb	r3, [r7, #11]
 8002512:	4619      	mov	r1, r3
 8002514:	68f8      	ldr	r0, [r7, #12]
 8002516:	f000 f805 	bl	8002524 <I2Cx_Error>
  }
  return status;
 800251a:	7dfb      	ldrb	r3, [r7, #23]
}
 800251c:	4618      	mov	r0, r3
 800251e:	3718      	adds	r7, #24
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	460b      	mov	r3, r1
 800252e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f001 f8ef 	bl	8003714 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7ff ff6c 	bl	8002414 <I2Cx_Init>
}
 800253c:	bf00      	nop
 800253e:	3708      	adds	r7, #8
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8002548:	4802      	ldr	r0, [pc, #8]	; (8002554 <SENSOR_IO_Init+0x10>)
 800254a:	f7ff ff63 	bl	8002414 <I2Cx_Init>
}
 800254e:	bf00      	nop
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	200038cc 	.word	0x200038cc

08002558 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af02      	add	r7, sp, #8
 800255e:	4603      	mov	r3, r0
 8002560:	71fb      	strb	r3, [r7, #7]
 8002562:	460b      	mov	r3, r1
 8002564:	71bb      	strb	r3, [r7, #6]
 8002566:	4613      	mov	r3, r2
 8002568:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800256a:	79bb      	ldrb	r3, [r7, #6]
 800256c:	b29a      	uxth	r2, r3
 800256e:	79f9      	ldrb	r1, [r7, #7]
 8002570:	2301      	movs	r3, #1
 8002572:	9301      	str	r3, [sp, #4]
 8002574:	1d7b      	adds	r3, r7, #5
 8002576:	9300      	str	r3, [sp, #0]
 8002578:	2301      	movs	r3, #1
 800257a:	4803      	ldr	r0, [pc, #12]	; (8002588 <SENSOR_IO_Write+0x30>)
 800257c:	f7ff ffa5 	bl	80024ca <I2Cx_WriteMultiple>
}
 8002580:	bf00      	nop
 8002582:	3708      	adds	r7, #8
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	200038cc 	.word	0x200038cc

0800258c <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af02      	add	r7, sp, #8
 8002592:	4603      	mov	r3, r0
 8002594:	460a      	mov	r2, r1
 8002596:	71fb      	strb	r3, [r7, #7]
 8002598:	4613      	mov	r3, r2
 800259a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800259c:	2300      	movs	r3, #0
 800259e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80025a0:	79bb      	ldrb	r3, [r7, #6]
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	79f9      	ldrb	r1, [r7, #7]
 80025a6:	2301      	movs	r3, #1
 80025a8:	9301      	str	r3, [sp, #4]
 80025aa:	f107 030f 	add.w	r3, r7, #15
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	2301      	movs	r3, #1
 80025b2:	4804      	ldr	r0, [pc, #16]	; (80025c4 <SENSOR_IO_Read+0x38>)
 80025b4:	f7ff ff5c 	bl	8002470 <I2Cx_ReadMultiple>

  return read_value;
 80025b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	200038cc 	.word	0x200038cc

080025c8 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af02      	add	r7, sp, #8
 80025ce:	603a      	str	r2, [r7, #0]
 80025d0:	461a      	mov	r2, r3
 80025d2:	4603      	mov	r3, r0
 80025d4:	71fb      	strb	r3, [r7, #7]
 80025d6:	460b      	mov	r3, r1
 80025d8:	71bb      	strb	r3, [r7, #6]
 80025da:	4613      	mov	r3, r2
 80025dc:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80025de:	79bb      	ldrb	r3, [r7, #6]
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	79f9      	ldrb	r1, [r7, #7]
 80025e4:	88bb      	ldrh	r3, [r7, #4]
 80025e6:	9301      	str	r3, [sp, #4]
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	9300      	str	r3, [sp, #0]
 80025ec:	2301      	movs	r3, #1
 80025ee:	4804      	ldr	r0, [pc, #16]	; (8002600 <SENSOR_IO_ReadMultiple+0x38>)
 80025f0:	f7ff ff3e 	bl	8002470 <I2Cx_ReadMultiple>
 80025f4:	4603      	mov	r3, r0
 80025f6:	b29b      	uxth	r3, r3
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3708      	adds	r7, #8
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	200038cc 	.word	0x200038cc

08002604 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 800260a:	4b0c      	ldr	r3, [pc, #48]	; (800263c <BSP_HSENSOR_Init+0x38>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	20be      	movs	r0, #190	; 0xbe
 8002610:	4798      	blx	r3
 8002612:	4603      	mov	r3, r0
 8002614:	2bbc      	cmp	r3, #188	; 0xbc
 8002616:	d002      	beq.n	800261e <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	607b      	str	r3, [r7, #4]
 800261c:	e009      	b.n	8002632 <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 800261e:	4b08      	ldr	r3, [pc, #32]	; (8002640 <BSP_HSENSOR_Init+0x3c>)
 8002620:	4a06      	ldr	r2, [pc, #24]	; (800263c <BSP_HSENSOR_Init+0x38>)
 8002622:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8002624:	4b06      	ldr	r3, [pc, #24]	; (8002640 <BSP_HSENSOR_Init+0x3c>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	20be      	movs	r0, #190	; 0xbe
 800262c:	4798      	blx	r3
    ret = HSENSOR_OK;
 800262e:	2300      	movs	r3, #0
 8002630:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8002632:	687b      	ldr	r3, [r7, #4]
}
 8002634:	4618      	mov	r0, r3
 8002636:	3708      	adds	r7, #8
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	20000004 	.word	0x20000004
 8002640:	2000015c 	.word	0x2000015c

08002644 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8002648:	4b04      	ldr	r3, [pc, #16]	; (800265c <BSP_HSENSOR_ReadHumidity+0x18>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	20be      	movs	r0, #190	; 0xbe
 8002650:	4798      	blx	r3
 8002652:	eef0 7a40 	vmov.f32	s15, s0
}
 8002656:	eeb0 0a67 	vmov.f32	s0, s15
 800265a:	bd80      	pop	{r7, pc}
 800265c:	2000015c 	.word	0x2000015c

08002660 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 8002666:	4b0c      	ldr	r3, [pc, #48]	; (8002698 <BSP_PSENSOR_Init+0x38>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	20ba      	movs	r0, #186	; 0xba
 800266c:	4798      	blx	r3
 800266e:	4603      	mov	r3, r0
 8002670:	2bb1      	cmp	r3, #177	; 0xb1
 8002672:	d002      	beq.n	800267a <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	607b      	str	r3, [r7, #4]
 8002678:	e009      	b.n	800268e <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 800267a:	4b08      	ldr	r3, [pc, #32]	; (800269c <BSP_PSENSOR_Init+0x3c>)
 800267c:	4a06      	ldr	r2, [pc, #24]	; (8002698 <BSP_PSENSOR_Init+0x38>)
 800267e:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8002680:	4b06      	ldr	r3, [pc, #24]	; (800269c <BSP_PSENSOR_Init+0x3c>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	20ba      	movs	r0, #186	; 0xba
 8002688:	4798      	blx	r3
    ret = PSENSOR_OK;
 800268a:	2300      	movs	r3, #0
 800268c:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 800268e:	687b      	ldr	r3, [r7, #4]
}
 8002690:	4618      	mov	r0, r3
 8002692:	3708      	adds	r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	20000020 	.word	0x20000020
 800269c:	20000160 	.word	0x20000160

080026a0 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 80026a4:	4b04      	ldr	r3, [pc, #16]	; (80026b8 <BSP_PSENSOR_ReadPressure+0x18>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	20ba      	movs	r0, #186	; 0xba
 80026ac:	4798      	blx	r3
 80026ae:	eef0 7a40 	vmov.f32	s15, s0
}
 80026b2:	eeb0 0a67 	vmov.f32	s0, s15
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	20000160 	.word	0x20000160

080026bc <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 80026c6:	4b09      	ldr	r3, [pc, #36]	; (80026ec <BSP_TSENSOR_Init+0x30>)
 80026c8:	4a09      	ldr	r2, [pc, #36]	; (80026f0 <BSP_TSENSOR_Init+0x34>)
 80026ca:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 80026cc:	f7ff ff3a 	bl	8002544 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 80026d0:	4b06      	ldr	r3, [pc, #24]	; (80026ec <BSP_TSENSOR_Init+0x30>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2100      	movs	r1, #0
 80026d8:	20be      	movs	r0, #190	; 0xbe
 80026da:	4798      	blx	r3

  ret = TSENSOR_OK;
 80026dc:	2300      	movs	r3, #0
 80026de:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 80026e0:	79fb      	ldrb	r3, [r7, #7]
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	20000164 	.word	0x20000164
 80026f0:	20000010 	.word	0x20000010

080026f4 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 80026f8:	4b04      	ldr	r3, [pc, #16]	; (800270c <BSP_TSENSOR_ReadTemp+0x18>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	20be      	movs	r0, #190	; 0xbe
 8002700:	4798      	blx	r3
 8002702:	eef0 7a40 	vmov.f32	s15, s0
}
 8002706:	eeb0 0a67 	vmov.f32	s0, s15
 800270a:	bd80      	pop	{r7, pc}
 800270c:	20000164 	.word	0x20000164

08002710 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	4603      	mov	r3, r0
 8002718:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 800271a:	88fb      	ldrh	r3, [r7, #6]
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2120      	movs	r1, #32
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff ff33 	bl	800258c <SENSOR_IO_Read>
 8002726:	4603      	mov	r3, r0
 8002728:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 800272a:	7bfb      	ldrb	r3, [r7, #15]
 800272c:	f023 0304 	bic.w	r3, r3, #4
 8002730:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8002732:	7bfb      	ldrb	r3, [r7, #15]
 8002734:	f043 0304 	orr.w	r3, r3, #4
 8002738:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 800273a:	7bfb      	ldrb	r3, [r7, #15]
 800273c:	f023 0303 	bic.w	r3, r3, #3
 8002740:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8002742:	7bfb      	ldrb	r3, [r7, #15]
 8002744:	f043 0301 	orr.w	r3, r3, #1
 8002748:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 800274a:	7bfb      	ldrb	r3, [r7, #15]
 800274c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002750:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002752:	88fb      	ldrh	r3, [r7, #6]
 8002754:	b2db      	uxtb	r3, r3
 8002756:	7bfa      	ldrb	r2, [r7, #15]
 8002758:	2120      	movs	r1, #32
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff fefc 	bl	8002558 <SENSOR_IO_Write>
}
 8002760:	bf00      	nop
 8002762:	3710      	adds	r7, #16
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	4603      	mov	r3, r0
 8002770:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002772:	2300      	movs	r3, #0
 8002774:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8002776:	f7ff fee5 	bl	8002544 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 800277a:	88fb      	ldrh	r3, [r7, #6]
 800277c:	b2db      	uxtb	r3, r3
 800277e:	210f      	movs	r1, #15
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff ff03 	bl	800258c <SENSOR_IO_Read>
 8002786:	4603      	mov	r3, r0
 8002788:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 800278a:	7bfb      	ldrb	r3, [r7, #15]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b088      	sub	sp, #32
 8002798:	af00      	add	r7, sp, #0
 800279a:	4603      	mov	r3, r0
 800279c:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 800279e:	88fb      	ldrh	r3, [r7, #6]
 80027a0:	b2d8      	uxtb	r0, r3
 80027a2:	f107 020c 	add.w	r2, r7, #12
 80027a6:	2302      	movs	r3, #2
 80027a8:	21b0      	movs	r1, #176	; 0xb0
 80027aa:	f7ff ff0d 	bl	80025c8 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 80027ae:	7b3b      	ldrb	r3, [r7, #12]
 80027b0:	085b      	lsrs	r3, r3, #1
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 80027b6:	7b7b      	ldrb	r3, [r7, #13]
 80027b8:	085b      	lsrs	r3, r3, #1
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 80027be:	88fb      	ldrh	r3, [r7, #6]
 80027c0:	b2d8      	uxtb	r0, r3
 80027c2:	f107 020c 	add.w	r2, r7, #12
 80027c6:	2302      	movs	r3, #2
 80027c8:	21b6      	movs	r1, #182	; 0xb6
 80027ca:	f7ff fefd 	bl	80025c8 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80027ce:	7b7b      	ldrb	r3, [r7, #13]
 80027d0:	021b      	lsls	r3, r3, #8
 80027d2:	b21a      	sxth	r2, r3
 80027d4:	7b3b      	ldrb	r3, [r7, #12]
 80027d6:	b21b      	sxth	r3, r3
 80027d8:	4313      	orrs	r3, r2
 80027da:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 80027dc:	88fb      	ldrh	r3, [r7, #6]
 80027de:	b2d8      	uxtb	r0, r3
 80027e0:	f107 020c 	add.w	r2, r7, #12
 80027e4:	2302      	movs	r3, #2
 80027e6:	21ba      	movs	r1, #186	; 0xba
 80027e8:	f7ff feee 	bl	80025c8 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80027ec:	7b7b      	ldrb	r3, [r7, #13]
 80027ee:	021b      	lsls	r3, r3, #8
 80027f0:	b21a      	sxth	r2, r3
 80027f2:	7b3b      	ldrb	r3, [r7, #12]
 80027f4:	b21b      	sxth	r3, r3
 80027f6:	4313      	orrs	r3, r2
 80027f8:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 80027fa:	88fb      	ldrh	r3, [r7, #6]
 80027fc:	b2d8      	uxtb	r0, r3
 80027fe:	f107 020c 	add.w	r2, r7, #12
 8002802:	2302      	movs	r3, #2
 8002804:	21a8      	movs	r1, #168	; 0xa8
 8002806:	f7ff fedf 	bl	80025c8 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800280a:	7b7b      	ldrb	r3, [r7, #13]
 800280c:	021b      	lsls	r3, r3, #8
 800280e:	b21a      	sxth	r2, r3
 8002810:	7b3b      	ldrb	r3, [r7, #12]
 8002812:	b21b      	sxth	r3, r3
 8002814:	4313      	orrs	r3, r2
 8002816:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8002818:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800281c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	ee07 3a90 	vmov	s15, r3
 8002826:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800282a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800282e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	ee07 3a90 	vmov	s15, r3
 8002838:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800283c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002840:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002844:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	ee07 3a90 	vmov	s15, r3
 800284e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002852:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002856:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800285a:	ee07 3a90 	vmov	s15, r3
 800285e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002862:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002866:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 800286a:	edd7 7a04 	vldr	s15, [r7, #16]
 800286e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002872:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002876:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 800287a:	edd7 7a04 	vldr	s15, [r7, #16]
 800287e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80028c4 <HTS221_H_ReadHumidity+0x130>
 8002882:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800288a:	dd01      	ble.n	8002890 <HTS221_H_ReadHumidity+0xfc>
 800288c:	4b0e      	ldr	r3, [pc, #56]	; (80028c8 <HTS221_H_ReadHumidity+0x134>)
 800288e:	e00a      	b.n	80028a6 <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8002890:	edd7 7a04 	vldr	s15, [r7, #16]
 8002894:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800289c:	d502      	bpl.n	80028a4 <HTS221_H_ReadHumidity+0x110>
 800289e:	f04f 0300 	mov.w	r3, #0
 80028a2:	e000      	b.n	80028a6 <HTS221_H_ReadHumidity+0x112>
 80028a4:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 80028a6:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 80028a8:	edd7 7a04 	vldr	s15, [r7, #16]
 80028ac:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80028b0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80028b4:	eef0 7a66 	vmov.f32	s15, s13
}
 80028b8:	eeb0 0a67 	vmov.f32	s0, s15
 80028bc:	3720      	adds	r7, #32
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	447a0000 	.word	0x447a0000
 80028c8:	447a0000 	.word	0x447a0000

080028cc <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	4603      	mov	r3, r0
 80028d4:	6039      	str	r1, [r7, #0]
 80028d6:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80028d8:	88fb      	ldrh	r3, [r7, #6]
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	2120      	movs	r1, #32
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff fe54 	bl	800258c <SENSOR_IO_Read>
 80028e4:	4603      	mov	r3, r0
 80028e6:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80028e8:	7bfb      	ldrb	r3, [r7, #15]
 80028ea:	f023 0304 	bic.w	r3, r3, #4
 80028ee:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80028f0:	7bfb      	ldrb	r3, [r7, #15]
 80028f2:	f043 0304 	orr.w	r3, r3, #4
 80028f6:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80028f8:	7bfb      	ldrb	r3, [r7, #15]
 80028fa:	f023 0303 	bic.w	r3, r3, #3
 80028fe:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8002900:	7bfb      	ldrb	r3, [r7, #15]
 8002902:	f043 0301 	orr.w	r3, r3, #1
 8002906:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8002908:	7bfb      	ldrb	r3, [r7, #15]
 800290a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800290e:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002910:	88fb      	ldrh	r3, [r7, #6]
 8002912:	b2db      	uxtb	r3, r3
 8002914:	7bfa      	ldrb	r2, [r7, #15]
 8002916:	2120      	movs	r1, #32
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff fe1d 	bl	8002558 <SENSOR_IO_Write>
}
 800291e:	bf00      	nop
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b088      	sub	sp, #32
 800292a:	af00      	add	r7, sp, #0
 800292c:	4603      	mov	r3, r0
 800292e:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8002930:	88fb      	ldrh	r3, [r7, #6]
 8002932:	b2d8      	uxtb	r0, r3
 8002934:	f107 0208 	add.w	r2, r7, #8
 8002938:	2302      	movs	r3, #2
 800293a:	21b2      	movs	r1, #178	; 0xb2
 800293c:	f7ff fe44 	bl	80025c8 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8002940:	88fb      	ldrh	r3, [r7, #6]
 8002942:	b2db      	uxtb	r3, r3
 8002944:	2135      	movs	r1, #53	; 0x35
 8002946:	4618      	mov	r0, r3
 8002948:	f7ff fe20 	bl	800258c <SENSOR_IO_Read>
 800294c:	4603      	mov	r3, r0
 800294e:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8002950:	7ffb      	ldrb	r3, [r7, #31]
 8002952:	021b      	lsls	r3, r3, #8
 8002954:	b21b      	sxth	r3, r3
 8002956:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800295a:	b21a      	sxth	r2, r3
 800295c:	7a3b      	ldrb	r3, [r7, #8]
 800295e:	b21b      	sxth	r3, r3
 8002960:	4313      	orrs	r3, r2
 8002962:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8002964:	7ffb      	ldrb	r3, [r7, #31]
 8002966:	019b      	lsls	r3, r3, #6
 8002968:	b21b      	sxth	r3, r3
 800296a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800296e:	b21a      	sxth	r2, r3
 8002970:	7a7b      	ldrb	r3, [r7, #9]
 8002972:	b21b      	sxth	r3, r3
 8002974:	4313      	orrs	r3, r2
 8002976:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8002978:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800297c:	10db      	asrs	r3, r3, #3
 800297e:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8002980:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002984:	10db      	asrs	r3, r3, #3
 8002986:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8002988:	88fb      	ldrh	r3, [r7, #6]
 800298a:	b2d8      	uxtb	r0, r3
 800298c:	f107 0208 	add.w	r2, r7, #8
 8002990:	2304      	movs	r3, #4
 8002992:	21bc      	movs	r1, #188	; 0xbc
 8002994:	f7ff fe18 	bl	80025c8 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002998:	7a7b      	ldrb	r3, [r7, #9]
 800299a:	021b      	lsls	r3, r3, #8
 800299c:	b21a      	sxth	r2, r3
 800299e:	7a3b      	ldrb	r3, [r7, #8]
 80029a0:	b21b      	sxth	r3, r3
 80029a2:	4313      	orrs	r3, r2
 80029a4:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 80029a6:	7afb      	ldrb	r3, [r7, #11]
 80029a8:	021b      	lsls	r3, r3, #8
 80029aa:	b21a      	sxth	r2, r3
 80029ac:	7abb      	ldrb	r3, [r7, #10]
 80029ae:	b21b      	sxth	r3, r3
 80029b0:	4313      	orrs	r3, r2
 80029b2:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 80029b4:	88fb      	ldrh	r3, [r7, #6]
 80029b6:	b2d8      	uxtb	r0, r3
 80029b8:	f107 0208 	add.w	r2, r7, #8
 80029bc:	2302      	movs	r3, #2
 80029be:	21aa      	movs	r1, #170	; 0xaa
 80029c0:	f7ff fe02 	bl	80025c8 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80029c4:	7a7b      	ldrb	r3, [r7, #9]
 80029c6:	021b      	lsls	r3, r3, #8
 80029c8:	b21a      	sxth	r2, r3
 80029ca:	7a3b      	ldrb	r3, [r7, #8]
 80029cc:	b21b      	sxth	r3, r3
 80029ce:	4313      	orrs	r3, r2
 80029d0:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 80029d2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80029d6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	ee07 3a90 	vmov	s15, r3
 80029e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029e4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80029e8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	ee07 3a90 	vmov	s15, r3
 80029f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029f6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80029fa:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80029fe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	ee07 3a90 	vmov	s15, r3
 8002a08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a10:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002a14:	ee07 3a90 	vmov	s15, r3
 8002a18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a20:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	ee07 3a90 	vmov	s15, r3
}
 8002a2a:	eeb0 0a67 	vmov.f32	s0, s15
 8002a2e:	3720      	adds	r7, #32
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 8002a3e:	88fb      	ldrh	r3, [r7, #6]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f000 f87b 	bl	8002b3c <LPS22HB_Init>
}
 8002a46:	bf00      	nop
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b084      	sub	sp, #16
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	4603      	mov	r3, r0
 8002a56:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8002a5c:	f7ff fd72 	bl	8002544 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8002a60:	88fb      	ldrh	r3, [r7, #6]
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	210f      	movs	r1, #15
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7ff fd90 	bl	800258c <SENSOR_IO_Read>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8002a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
	...

08002a7c <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8002a7c:	b590      	push	{r4, r7, lr}
 8002a7e:	b087      	sub	sp, #28
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	4603      	mov	r3, r0
 8002a84:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 8002a86:	2300      	movs	r3, #0
 8002a88:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	74fb      	strb	r3, [r7, #19]
 8002a8e:	e013      	b.n	8002ab8 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8002a90:	88fb      	ldrh	r3, [r7, #6]
 8002a92:	b2da      	uxtb	r2, r3
 8002a94:	7cfb      	ldrb	r3, [r7, #19]
 8002a96:	3328      	adds	r3, #40	; 0x28
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	7cfc      	ldrb	r4, [r7, #19]
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	4610      	mov	r0, r2
 8002aa0:	f7ff fd74 	bl	800258c <SENSOR_IO_Read>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	f107 0318 	add.w	r3, r7, #24
 8002aac:	4423      	add	r3, r4
 8002aae:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 8002ab2:	7cfb      	ldrb	r3, [r7, #19]
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	74fb      	strb	r3, [r7, #19]
 8002ab8:	7cfb      	ldrb	r3, [r7, #19]
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d9e8      	bls.n	8002a90 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 8002abe:	2300      	movs	r3, #0
 8002ac0:	74fb      	strb	r3, [r7, #19]
 8002ac2:	e010      	b.n	8002ae6 <LPS22HB_P_ReadPressure+0x6a>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8002ac4:	7cfb      	ldrb	r3, [r7, #19]
 8002ac6:	f107 0218 	add.w	r2, r7, #24
 8002aca:	4413      	add	r3, r2
 8002acc:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	7cfb      	ldrb	r3, [r7, #19]
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ada:	697a      	ldr	r2, [r7, #20]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 8002ae0:	7cfb      	ldrb	r3, [r7, #19]
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	74fb      	strb	r3, [r7, #19]
 8002ae6:	7cfb      	ldrb	r3, [r7, #19]
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d9eb      	bls.n	8002ac4 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d003      	beq.n	8002afe <LPS22HB_P_ReadPressure+0x82>
    tmp |= 0xFF000000;
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002afc:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2264      	movs	r2, #100	; 0x64
 8002b06:	fb02 f303 	mul.w	r3, r2, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	da01      	bge.n	8002b12 <LPS22HB_P_ReadPressure+0x96>
 8002b0e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8002b12:	131b      	asrs	r3, r3, #12
 8002b14:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	ee07 3a90 	vmov	s15, r3
 8002b1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b20:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002b38 <LPS22HB_P_ReadPressure+0xbc>
 8002b24:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002b28:	eef0 7a66 	vmov.f32	s15, s13
}
 8002b2c:	eeb0 0a67 	vmov.f32	s0, s15
 8002b30:	371c      	adds	r7, #28
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd90      	pop	{r4, r7, pc}
 8002b36:	bf00      	nop
 8002b38:	42c80000 	.word	0x42c80000

08002b3c <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	4603      	mov	r3, r0
 8002b44:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8002b46:	88fb      	ldrh	r3, [r7, #6]
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	211a      	movs	r1, #26
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff fd1d 	bl	800258c <SENSOR_IO_Read>
 8002b52:	4603      	mov	r3, r0
 8002b54:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 8002b56:	7bfb      	ldrb	r3, [r7, #15]
 8002b58:	f023 0301 	bic.w	r3, r3, #1
 8002b5c:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 8002b5e:	7bfb      	ldrb	r3, [r7, #15]
 8002b60:	f043 0301 	orr.w	r3, r3, #1
 8002b64:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8002b66:	88fb      	ldrh	r3, [r7, #6]
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	7bfa      	ldrb	r2, [r7, #15]
 8002b6c:	211a      	movs	r1, #26
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff fcf2 	bl	8002558 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8002b74:	88fb      	ldrh	r3, [r7, #6]
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2110      	movs	r1, #16
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7ff fd06 	bl	800258c <SENSOR_IO_Read>
 8002b80:	4603      	mov	r3, r0
 8002b82:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8002b84:	7bfb      	ldrb	r3, [r7, #15]
 8002b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b8a:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8002b8c:	7bfb      	ldrb	r3, [r7, #15]
 8002b8e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002b92:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8002b94:	7bfb      	ldrb	r3, [r7, #15]
 8002b96:	f023 0302 	bic.w	r3, r3, #2
 8002b9a:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8002b9c:	7bfb      	ldrb	r3, [r7, #15]
 8002b9e:	f043 0302 	orr.w	r3, r3, #2
 8002ba2:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8002ba4:	88fb      	ldrh	r3, [r7, #6]
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	7bfa      	ldrb	r2, [r7, #15]
 8002baa:	2110      	movs	r1, #16
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff fcd3 	bl	8002558 <SENSOR_IO_Write>
}  
 8002bb2:	bf00      	nop
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b082      	sub	sp, #8
 8002bbe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bc4:	2003      	movs	r0, #3
 8002bc6:	f000 f8fe 	bl	8002dc6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002bca:	2000      	movs	r0, #0
 8002bcc:	f7ff fa9a 	bl	8002104 <HAL_InitTick>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d002      	beq.n	8002bdc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	71fb      	strb	r3, [r7, #7]
 8002bda:	e001      	b.n	8002be0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002bdc:	f7ff f85a 	bl	8001c94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002be0:	79fb      	ldrb	r3, [r7, #7]
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
	...

08002bec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bf0:	4b05      	ldr	r3, [pc, #20]	; (8002c08 <HAL_IncTick+0x1c>)
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	4b05      	ldr	r3, [pc, #20]	; (8002c0c <HAL_IncTick+0x20>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	4a03      	ldr	r2, [pc, #12]	; (8002c08 <HAL_IncTick+0x1c>)
 8002bfc:	6013      	str	r3, [r2, #0]
}
 8002bfe:	bf00      	nop
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr
 8002c08:	20003918 	.word	0x20003918
 8002c0c:	20000030 	.word	0x20000030

08002c10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  return uwTick;
 8002c14:	4b03      	ldr	r3, [pc, #12]	; (8002c24 <HAL_GetTick+0x14>)
 8002c16:	681b      	ldr	r3, [r3, #0]
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	20003918 	.word	0x20003918

08002c28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c30:	f7ff ffee 	bl	8002c10 <HAL_GetTick>
 8002c34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c40:	d004      	beq.n	8002c4c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c42:	4b09      	ldr	r3, [pc, #36]	; (8002c68 <HAL_Delay+0x40>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68fa      	ldr	r2, [r7, #12]
 8002c48:	4413      	add	r3, r2
 8002c4a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c4c:	bf00      	nop
 8002c4e:	f7ff ffdf 	bl	8002c10 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d8f7      	bhi.n	8002c4e <HAL_Delay+0x26>
  {
  }
}
 8002c5e:	bf00      	nop
 8002c60:	3710      	adds	r7, #16
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	20000030 	.word	0x20000030

08002c6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f003 0307 	and.w	r3, r3, #7
 8002c7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c7c:	4b0c      	ldr	r3, [pc, #48]	; (8002cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c82:	68ba      	ldr	r2, [r7, #8]
 8002c84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c88:	4013      	ands	r3, r2
 8002c8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c9e:	4a04      	ldr	r2, [pc, #16]	; (8002cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	60d3      	str	r3, [r2, #12]
}
 8002ca4:	bf00      	nop
 8002ca6:	3714      	adds	r7, #20
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr
 8002cb0:	e000ed00 	.word	0xe000ed00

08002cb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cb8:	4b04      	ldr	r3, [pc, #16]	; (8002ccc <__NVIC_GetPriorityGrouping+0x18>)
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	0a1b      	lsrs	r3, r3, #8
 8002cbe:	f003 0307 	and.w	r3, r3, #7
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr
 8002ccc:	e000ed00 	.word	0xe000ed00

08002cd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	db0b      	blt.n	8002cfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ce2:	79fb      	ldrb	r3, [r7, #7]
 8002ce4:	f003 021f 	and.w	r2, r3, #31
 8002ce8:	4907      	ldr	r1, [pc, #28]	; (8002d08 <__NVIC_EnableIRQ+0x38>)
 8002cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cee:	095b      	lsrs	r3, r3, #5
 8002cf0:	2001      	movs	r0, #1
 8002cf2:	fa00 f202 	lsl.w	r2, r0, r2
 8002cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cfa:	bf00      	nop
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	e000e100 	.word	0xe000e100

08002d0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	4603      	mov	r3, r0
 8002d14:	6039      	str	r1, [r7, #0]
 8002d16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	db0a      	blt.n	8002d36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	b2da      	uxtb	r2, r3
 8002d24:	490c      	ldr	r1, [pc, #48]	; (8002d58 <__NVIC_SetPriority+0x4c>)
 8002d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2a:	0112      	lsls	r2, r2, #4
 8002d2c:	b2d2      	uxtb	r2, r2
 8002d2e:	440b      	add	r3, r1
 8002d30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d34:	e00a      	b.n	8002d4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	b2da      	uxtb	r2, r3
 8002d3a:	4908      	ldr	r1, [pc, #32]	; (8002d5c <__NVIC_SetPriority+0x50>)
 8002d3c:	79fb      	ldrb	r3, [r7, #7]
 8002d3e:	f003 030f 	and.w	r3, r3, #15
 8002d42:	3b04      	subs	r3, #4
 8002d44:	0112      	lsls	r2, r2, #4
 8002d46:	b2d2      	uxtb	r2, r2
 8002d48:	440b      	add	r3, r1
 8002d4a:	761a      	strb	r2, [r3, #24]
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr
 8002d58:	e000e100 	.word	0xe000e100
 8002d5c:	e000ed00 	.word	0xe000ed00

08002d60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b089      	sub	sp, #36	; 0x24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f003 0307 	and.w	r3, r3, #7
 8002d72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	f1c3 0307 	rsb	r3, r3, #7
 8002d7a:	2b04      	cmp	r3, #4
 8002d7c:	bf28      	it	cs
 8002d7e:	2304      	movcs	r3, #4
 8002d80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	3304      	adds	r3, #4
 8002d86:	2b06      	cmp	r3, #6
 8002d88:	d902      	bls.n	8002d90 <NVIC_EncodePriority+0x30>
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	3b03      	subs	r3, #3
 8002d8e:	e000      	b.n	8002d92 <NVIC_EncodePriority+0x32>
 8002d90:	2300      	movs	r3, #0
 8002d92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d94:	f04f 32ff 	mov.w	r2, #4294967295
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	43da      	mvns	r2, r3
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	401a      	ands	r2, r3
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002da8:	f04f 31ff 	mov.w	r1, #4294967295
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	fa01 f303 	lsl.w	r3, r1, r3
 8002db2:	43d9      	mvns	r1, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002db8:	4313      	orrs	r3, r2
         );
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3724      	adds	r7, #36	; 0x24
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b082      	sub	sp, #8
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f7ff ff4c 	bl	8002c6c <__NVIC_SetPriorityGrouping>
}
 8002dd4:	bf00      	nop
 8002dd6:	3708      	adds	r7, #8
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	4603      	mov	r3, r0
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
 8002de8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002dea:	2300      	movs	r3, #0
 8002dec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002dee:	f7ff ff61 	bl	8002cb4 <__NVIC_GetPriorityGrouping>
 8002df2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	68b9      	ldr	r1, [r7, #8]
 8002df8:	6978      	ldr	r0, [r7, #20]
 8002dfa:	f7ff ffb1 	bl	8002d60 <NVIC_EncodePriority>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e04:	4611      	mov	r1, r2
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7ff ff80 	bl	8002d0c <__NVIC_SetPriority>
}
 8002e0c:	bf00      	nop
 8002e0e:	3718      	adds	r7, #24
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7ff ff54 	bl	8002cd0 <__NVIC_EnableIRQ>
}
 8002e28:	bf00      	nop
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e0ac      	b.n	8002f9c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f000 f8b2 	bl	8002fb0 <DFSDM_GetChannelFromInstance>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	4b55      	ldr	r3, [pc, #340]	; (8002fa4 <HAL_DFSDM_ChannelInit+0x174>)
 8002e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d001      	beq.n	8002e5c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e09f      	b.n	8002f9c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f7fe ff41 	bl	8001ce4 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002e62:	4b51      	ldr	r3, [pc, #324]	; (8002fa8 <HAL_DFSDM_ChannelInit+0x178>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	3301      	adds	r3, #1
 8002e68:	4a4f      	ldr	r2, [pc, #316]	; (8002fa8 <HAL_DFSDM_ChannelInit+0x178>)
 8002e6a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002e6c:	4b4e      	ldr	r3, [pc, #312]	; (8002fa8 <HAL_DFSDM_ChannelInit+0x178>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d125      	bne.n	8002ec0 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002e74:	4b4d      	ldr	r3, [pc, #308]	; (8002fac <HAL_DFSDM_ChannelInit+0x17c>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a4c      	ldr	r2, [pc, #304]	; (8002fac <HAL_DFSDM_ChannelInit+0x17c>)
 8002e7a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e7e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002e80:	4b4a      	ldr	r3, [pc, #296]	; (8002fac <HAL_DFSDM_ChannelInit+0x17c>)
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	4948      	ldr	r1, [pc, #288]	; (8002fac <HAL_DFSDM_ChannelInit+0x17c>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002e8e:	4b47      	ldr	r3, [pc, #284]	; (8002fac <HAL_DFSDM_ChannelInit+0x17c>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a46      	ldr	r2, [pc, #280]	; (8002fac <HAL_DFSDM_ChannelInit+0x17c>)
 8002e94:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002e98:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	791b      	ldrb	r3, [r3, #4]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d108      	bne.n	8002eb4 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002ea2:	4b42      	ldr	r3, [pc, #264]	; (8002fac <HAL_DFSDM_ChannelInit+0x17c>)
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	041b      	lsls	r3, r3, #16
 8002eae:	493f      	ldr	r1, [pc, #252]	; (8002fac <HAL_DFSDM_ChannelInit+0x17c>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002eb4:	4b3d      	ldr	r3, [pc, #244]	; (8002fac <HAL_DFSDM_ChannelInit+0x17c>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a3c      	ldr	r2, [pc, #240]	; (8002fac <HAL_DFSDM_ChannelInit+0x17c>)
 8002eba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ebe:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002ece:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	6819      	ldr	r1, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002ede:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002ee4:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	430a      	orrs	r2, r1
 8002eec:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f022 020f 	bic.w	r2, r2, #15
 8002efc:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	6819      	ldr	r1, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002f0c:	431a      	orrs	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	430a      	orrs	r2, r1
 8002f14:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	689a      	ldr	r2, [r3, #8]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002f24:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	6899      	ldr	r1, [r3, #8]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f34:	3b01      	subs	r3, #1
 8002f36:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002f38:	431a      	orrs	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f002 0207 	and.w	r2, r2, #7
 8002f50:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	6859      	ldr	r1, [r3, #4]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f62:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002f64:	431a      	orrs	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f7c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2201      	movs	r2, #1
 8002f82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 f810 	bl	8002fb0 <DFSDM_GetChannelFromInstance>
 8002f90:	4601      	mov	r1, r0
 8002f92:	4a04      	ldr	r2, [pc, #16]	; (8002fa4 <HAL_DFSDM_ChannelInit+0x174>)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3708      	adds	r7, #8
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	2000016c 	.word	0x2000016c
 8002fa8:	20000168 	.word	0x20000168
 8002fac:	40016000 	.word	0x40016000

08002fb0 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4a1c      	ldr	r2, [pc, #112]	; (800302c <DFSDM_GetChannelFromInstance+0x7c>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d102      	bne.n	8002fc6 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	60fb      	str	r3, [r7, #12]
 8002fc4:	e02b      	b.n	800301e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a19      	ldr	r2, [pc, #100]	; (8003030 <DFSDM_GetChannelFromInstance+0x80>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d102      	bne.n	8002fd4 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	60fb      	str	r3, [r7, #12]
 8002fd2:	e024      	b.n	800301e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a17      	ldr	r2, [pc, #92]	; (8003034 <DFSDM_GetChannelFromInstance+0x84>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d102      	bne.n	8002fe2 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002fdc:	2302      	movs	r3, #2
 8002fde:	60fb      	str	r3, [r7, #12]
 8002fe0:	e01d      	b.n	800301e <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a14      	ldr	r2, [pc, #80]	; (8003038 <DFSDM_GetChannelFromInstance+0x88>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d102      	bne.n	8002ff0 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002fea:	2304      	movs	r3, #4
 8002fec:	60fb      	str	r3, [r7, #12]
 8002fee:	e016      	b.n	800301e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a12      	ldr	r2, [pc, #72]	; (800303c <DFSDM_GetChannelFromInstance+0x8c>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d102      	bne.n	8002ffe <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002ff8:	2305      	movs	r3, #5
 8002ffa:	60fb      	str	r3, [r7, #12]
 8002ffc:	e00f      	b.n	800301e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a0f      	ldr	r2, [pc, #60]	; (8003040 <DFSDM_GetChannelFromInstance+0x90>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d102      	bne.n	800300c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8003006:	2306      	movs	r3, #6
 8003008:	60fb      	str	r3, [r7, #12]
 800300a:	e008      	b.n	800301e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a0d      	ldr	r2, [pc, #52]	; (8003044 <DFSDM_GetChannelFromInstance+0x94>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d102      	bne.n	800301a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8003014:	2307      	movs	r3, #7
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	e001      	b.n	800301e <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800301a:	2303      	movs	r3, #3
 800301c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800301e:	68fb      	ldr	r3, [r7, #12]
}
 8003020:	4618      	mov	r0, r3
 8003022:	3714      	adds	r7, #20
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr
 800302c:	40016000 	.word	0x40016000
 8003030:	40016020 	.word	0x40016020
 8003034:	40016040 	.word	0x40016040
 8003038:	40016080 	.word	0x40016080
 800303c:	400160a0 	.word	0x400160a0
 8003040:	400160c0 	.word	0x400160c0
 8003044:	400160e0 	.word	0x400160e0

08003048 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003048:	b480      	push	{r7}
 800304a:	b087      	sub	sp, #28
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003052:	2300      	movs	r3, #0
 8003054:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003056:	e17f      	b.n	8003358 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	2101      	movs	r1, #1
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	fa01 f303 	lsl.w	r3, r1, r3
 8003064:	4013      	ands	r3, r2
 8003066:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2b00      	cmp	r3, #0
 800306c:	f000 8171 	beq.w	8003352 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	2b02      	cmp	r3, #2
 8003076:	d003      	beq.n	8003080 <HAL_GPIO_Init+0x38>
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	2b12      	cmp	r3, #18
 800307e:	d123      	bne.n	80030c8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	08da      	lsrs	r2, r3, #3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	3208      	adds	r2, #8
 8003088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800308c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	f003 0307 	and.w	r3, r3, #7
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	220f      	movs	r2, #15
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	43db      	mvns	r3, r3
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	4013      	ands	r3, r2
 80030a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	691a      	ldr	r2, [r3, #16]
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	f003 0307 	and.w	r3, r3, #7
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	08da      	lsrs	r2, r3, #3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	3208      	adds	r2, #8
 80030c2:	6939      	ldr	r1, [r7, #16]
 80030c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	2203      	movs	r2, #3
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	43db      	mvns	r3, r3
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	4013      	ands	r3, r2
 80030de:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f003 0203 	and.w	r2, r3, #3
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	fa02 f303 	lsl.w	r3, r2, r3
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	693a      	ldr	r2, [r7, #16]
 80030fa:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d00b      	beq.n	800311c <HAL_GPIO_Init+0xd4>
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	2b02      	cmp	r3, #2
 800310a:	d007      	beq.n	800311c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003110:	2b11      	cmp	r3, #17
 8003112:	d003      	beq.n	800311c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	2b12      	cmp	r3, #18
 800311a:	d130      	bne.n	800317e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	2203      	movs	r2, #3
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	43db      	mvns	r3, r3
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	4013      	ands	r3, r2
 8003132:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	68da      	ldr	r2, [r3, #12]
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	4313      	orrs	r3, r2
 8003144:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003152:	2201      	movs	r2, #1
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	43db      	mvns	r3, r3
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	4013      	ands	r3, r2
 8003160:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	091b      	lsrs	r3, r3, #4
 8003168:	f003 0201 	and.w	r2, r3, #1
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	693a      	ldr	r2, [r7, #16]
 8003174:	4313      	orrs	r3, r2
 8003176:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f003 0303 	and.w	r3, r3, #3
 8003186:	2b03      	cmp	r3, #3
 8003188:	d118      	bne.n	80031bc <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003190:	2201      	movs	r2, #1
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	43db      	mvns	r3, r3
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	4013      	ands	r3, r2
 800319e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	08db      	lsrs	r3, r3, #3
 80031a6:	f003 0201 	and.w	r2, r3, #1
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	2203      	movs	r2, #3
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	43db      	mvns	r3, r3
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	4013      	ands	r3, r2
 80031d2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	fa02 f303 	lsl.w	r3, r2, r3
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	f000 80ac 	beq.w	8003352 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031fa:	4b5e      	ldr	r3, [pc, #376]	; (8003374 <HAL_GPIO_Init+0x32c>)
 80031fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031fe:	4a5d      	ldr	r2, [pc, #372]	; (8003374 <HAL_GPIO_Init+0x32c>)
 8003200:	f043 0301 	orr.w	r3, r3, #1
 8003204:	6613      	str	r3, [r2, #96]	; 0x60
 8003206:	4b5b      	ldr	r3, [pc, #364]	; (8003374 <HAL_GPIO_Init+0x32c>)
 8003208:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	60bb      	str	r3, [r7, #8]
 8003210:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003212:	4a59      	ldr	r2, [pc, #356]	; (8003378 <HAL_GPIO_Init+0x330>)
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	089b      	lsrs	r3, r3, #2
 8003218:	3302      	adds	r3, #2
 800321a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800321e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	f003 0303 	and.w	r3, r3, #3
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	220f      	movs	r2, #15
 800322a:	fa02 f303 	lsl.w	r3, r2, r3
 800322e:	43db      	mvns	r3, r3
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	4013      	ands	r3, r2
 8003234:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800323c:	d025      	beq.n	800328a <HAL_GPIO_Init+0x242>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a4e      	ldr	r2, [pc, #312]	; (800337c <HAL_GPIO_Init+0x334>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d01f      	beq.n	8003286 <HAL_GPIO_Init+0x23e>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a4d      	ldr	r2, [pc, #308]	; (8003380 <HAL_GPIO_Init+0x338>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d019      	beq.n	8003282 <HAL_GPIO_Init+0x23a>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a4c      	ldr	r2, [pc, #304]	; (8003384 <HAL_GPIO_Init+0x33c>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d013      	beq.n	800327e <HAL_GPIO_Init+0x236>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a4b      	ldr	r2, [pc, #300]	; (8003388 <HAL_GPIO_Init+0x340>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d00d      	beq.n	800327a <HAL_GPIO_Init+0x232>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a4a      	ldr	r2, [pc, #296]	; (800338c <HAL_GPIO_Init+0x344>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d007      	beq.n	8003276 <HAL_GPIO_Init+0x22e>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a49      	ldr	r2, [pc, #292]	; (8003390 <HAL_GPIO_Init+0x348>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d101      	bne.n	8003272 <HAL_GPIO_Init+0x22a>
 800326e:	2306      	movs	r3, #6
 8003270:	e00c      	b.n	800328c <HAL_GPIO_Init+0x244>
 8003272:	2307      	movs	r3, #7
 8003274:	e00a      	b.n	800328c <HAL_GPIO_Init+0x244>
 8003276:	2305      	movs	r3, #5
 8003278:	e008      	b.n	800328c <HAL_GPIO_Init+0x244>
 800327a:	2304      	movs	r3, #4
 800327c:	e006      	b.n	800328c <HAL_GPIO_Init+0x244>
 800327e:	2303      	movs	r3, #3
 8003280:	e004      	b.n	800328c <HAL_GPIO_Init+0x244>
 8003282:	2302      	movs	r3, #2
 8003284:	e002      	b.n	800328c <HAL_GPIO_Init+0x244>
 8003286:	2301      	movs	r3, #1
 8003288:	e000      	b.n	800328c <HAL_GPIO_Init+0x244>
 800328a:	2300      	movs	r3, #0
 800328c:	697a      	ldr	r2, [r7, #20]
 800328e:	f002 0203 	and.w	r2, r2, #3
 8003292:	0092      	lsls	r2, r2, #2
 8003294:	4093      	lsls	r3, r2
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	4313      	orrs	r3, r2
 800329a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800329c:	4936      	ldr	r1, [pc, #216]	; (8003378 <HAL_GPIO_Init+0x330>)
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	089b      	lsrs	r3, r3, #2
 80032a2:	3302      	adds	r3, #2
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80032aa:	4b3a      	ldr	r3, [pc, #232]	; (8003394 <HAL_GPIO_Init+0x34c>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	43db      	mvns	r3, r3
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	4013      	ands	r3, r2
 80032b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d003      	beq.n	80032ce <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80032ce:	4a31      	ldr	r2, [pc, #196]	; (8003394 <HAL_GPIO_Init+0x34c>)
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80032d4:	4b2f      	ldr	r3, [pc, #188]	; (8003394 <HAL_GPIO_Init+0x34c>)
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	43db      	mvns	r3, r3
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	4013      	ands	r3, r2
 80032e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d003      	beq.n	80032f8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80032f0:	693a      	ldr	r2, [r7, #16]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80032f8:	4a26      	ldr	r2, [pc, #152]	; (8003394 <HAL_GPIO_Init+0x34c>)
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80032fe:	4b25      	ldr	r3, [pc, #148]	; (8003394 <HAL_GPIO_Init+0x34c>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	43db      	mvns	r3, r3
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	4013      	ands	r3, r2
 800330c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d003      	beq.n	8003322 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	4313      	orrs	r3, r2
 8003320:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003322:	4a1c      	ldr	r2, [pc, #112]	; (8003394 <HAL_GPIO_Init+0x34c>)
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003328:	4b1a      	ldr	r3, [pc, #104]	; (8003394 <HAL_GPIO_Init+0x34c>)
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	43db      	mvns	r3, r3
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	4013      	ands	r3, r2
 8003336:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d003      	beq.n	800334c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	4313      	orrs	r3, r2
 800334a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800334c:	4a11      	ldr	r2, [pc, #68]	; (8003394 <HAL_GPIO_Init+0x34c>)
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	3301      	adds	r3, #1
 8003356:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	fa22 f303 	lsr.w	r3, r2, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	f47f ae78 	bne.w	8003058 <HAL_GPIO_Init+0x10>
  }
}
 8003368:	bf00      	nop
 800336a:	371c      	adds	r7, #28
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr
 8003374:	40021000 	.word	0x40021000
 8003378:	40010000 	.word	0x40010000
 800337c:	48000400 	.word	0x48000400
 8003380:	48000800 	.word	0x48000800
 8003384:	48000c00 	.word	0x48000c00
 8003388:	48001000 	.word	0x48001000
 800338c:	48001400 	.word	0x48001400
 8003390:	48001800 	.word	0x48001800
 8003394:	40010400 	.word	0x40010400

08003398 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003398:	b480      	push	{r7}
 800339a:	b087      	sub	sp, #28
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033a2:	2300      	movs	r3, #0
 80033a4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80033a6:	e0cd      	b.n	8003544 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80033a8:	2201      	movs	r2, #1
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	fa02 f303 	lsl.w	r3, r2, r3
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	4013      	ands	r3, r2
 80033b4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f000 80c0 	beq.w	800353e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80033be:	4a68      	ldr	r2, [pc, #416]	; (8003560 <HAL_GPIO_DeInit+0x1c8>)
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	089b      	lsrs	r3, r3, #2
 80033c4:	3302      	adds	r3, #2
 80033c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ca:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	f003 0303 	and.w	r3, r3, #3
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	220f      	movs	r2, #15
 80033d6:	fa02 f303 	lsl.w	r3, r2, r3
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	4013      	ands	r3, r2
 80033de:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80033e6:	d025      	beq.n	8003434 <HAL_GPIO_DeInit+0x9c>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a5e      	ldr	r2, [pc, #376]	; (8003564 <HAL_GPIO_DeInit+0x1cc>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d01f      	beq.n	8003430 <HAL_GPIO_DeInit+0x98>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a5d      	ldr	r2, [pc, #372]	; (8003568 <HAL_GPIO_DeInit+0x1d0>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d019      	beq.n	800342c <HAL_GPIO_DeInit+0x94>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a5c      	ldr	r2, [pc, #368]	; (800356c <HAL_GPIO_DeInit+0x1d4>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d013      	beq.n	8003428 <HAL_GPIO_DeInit+0x90>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a5b      	ldr	r2, [pc, #364]	; (8003570 <HAL_GPIO_DeInit+0x1d8>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d00d      	beq.n	8003424 <HAL_GPIO_DeInit+0x8c>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a5a      	ldr	r2, [pc, #360]	; (8003574 <HAL_GPIO_DeInit+0x1dc>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d007      	beq.n	8003420 <HAL_GPIO_DeInit+0x88>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a59      	ldr	r2, [pc, #356]	; (8003578 <HAL_GPIO_DeInit+0x1e0>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d101      	bne.n	800341c <HAL_GPIO_DeInit+0x84>
 8003418:	2306      	movs	r3, #6
 800341a:	e00c      	b.n	8003436 <HAL_GPIO_DeInit+0x9e>
 800341c:	2307      	movs	r3, #7
 800341e:	e00a      	b.n	8003436 <HAL_GPIO_DeInit+0x9e>
 8003420:	2305      	movs	r3, #5
 8003422:	e008      	b.n	8003436 <HAL_GPIO_DeInit+0x9e>
 8003424:	2304      	movs	r3, #4
 8003426:	e006      	b.n	8003436 <HAL_GPIO_DeInit+0x9e>
 8003428:	2303      	movs	r3, #3
 800342a:	e004      	b.n	8003436 <HAL_GPIO_DeInit+0x9e>
 800342c:	2302      	movs	r3, #2
 800342e:	e002      	b.n	8003436 <HAL_GPIO_DeInit+0x9e>
 8003430:	2301      	movs	r3, #1
 8003432:	e000      	b.n	8003436 <HAL_GPIO_DeInit+0x9e>
 8003434:	2300      	movs	r3, #0
 8003436:	697a      	ldr	r2, [r7, #20]
 8003438:	f002 0203 	and.w	r2, r2, #3
 800343c:	0092      	lsls	r2, r2, #2
 800343e:	4093      	lsls	r3, r2
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	429a      	cmp	r2, r3
 8003444:	d132      	bne.n	80034ac <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003446:	4b4d      	ldr	r3, [pc, #308]	; (800357c <HAL_GPIO_DeInit+0x1e4>)
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	43db      	mvns	r3, r3
 800344e:	494b      	ldr	r1, [pc, #300]	; (800357c <HAL_GPIO_DeInit+0x1e4>)
 8003450:	4013      	ands	r3, r2
 8003452:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003454:	4b49      	ldr	r3, [pc, #292]	; (800357c <HAL_GPIO_DeInit+0x1e4>)
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	43db      	mvns	r3, r3
 800345c:	4947      	ldr	r1, [pc, #284]	; (800357c <HAL_GPIO_DeInit+0x1e4>)
 800345e:	4013      	ands	r3, r2
 8003460:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8003462:	4b46      	ldr	r3, [pc, #280]	; (800357c <HAL_GPIO_DeInit+0x1e4>)
 8003464:	689a      	ldr	r2, [r3, #8]
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	43db      	mvns	r3, r3
 800346a:	4944      	ldr	r1, [pc, #272]	; (800357c <HAL_GPIO_DeInit+0x1e4>)
 800346c:	4013      	ands	r3, r2
 800346e:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8003470:	4b42      	ldr	r3, [pc, #264]	; (800357c <HAL_GPIO_DeInit+0x1e4>)
 8003472:	68da      	ldr	r2, [r3, #12]
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	43db      	mvns	r3, r3
 8003478:	4940      	ldr	r1, [pc, #256]	; (800357c <HAL_GPIO_DeInit+0x1e4>)
 800347a:	4013      	ands	r3, r2
 800347c:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	f003 0303 	and.w	r3, r3, #3
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	220f      	movs	r2, #15
 8003488:	fa02 f303 	lsl.w	r3, r2, r3
 800348c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800348e:	4a34      	ldr	r2, [pc, #208]	; (8003560 <HAL_GPIO_DeInit+0x1c8>)
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	089b      	lsrs	r3, r3, #2
 8003494:	3302      	adds	r3, #2
 8003496:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	43da      	mvns	r2, r3
 800349e:	4830      	ldr	r0, [pc, #192]	; (8003560 <HAL_GPIO_DeInit+0x1c8>)
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	089b      	lsrs	r3, r3, #2
 80034a4:	400a      	ands	r2, r1
 80034a6:	3302      	adds	r3, #2
 80034a8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	005b      	lsls	r3, r3, #1
 80034b4:	2103      	movs	r1, #3
 80034b6:	fa01 f303 	lsl.w	r3, r1, r3
 80034ba:	431a      	orrs	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	08da      	lsrs	r2, r3, #3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	3208      	adds	r2, #8
 80034c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	f003 0307 	and.w	r3, r3, #7
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	220f      	movs	r2, #15
 80034d6:	fa02 f303 	lsl.w	r3, r2, r3
 80034da:	43db      	mvns	r3, r3
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	08d2      	lsrs	r2, r2, #3
 80034e0:	4019      	ands	r1, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	3208      	adds	r2, #8
 80034e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	689a      	ldr	r2, [r3, #8]
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	2103      	movs	r1, #3
 80034f4:	fa01 f303 	lsl.w	r3, r1, r3
 80034f8:	43db      	mvns	r3, r3
 80034fa:	401a      	ands	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685a      	ldr	r2, [r3, #4]
 8003504:	2101      	movs	r1, #1
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	fa01 f303 	lsl.w	r3, r1, r3
 800350c:	43db      	mvns	r3, r3
 800350e:	401a      	ands	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68da      	ldr	r2, [r3, #12]
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	2103      	movs	r1, #3
 800351e:	fa01 f303 	lsl.w	r3, r1, r3
 8003522:	43db      	mvns	r3, r3
 8003524:	401a      	ands	r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800352e:	2101      	movs	r1, #1
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	fa01 f303 	lsl.w	r3, r1, r3
 8003536:	43db      	mvns	r3, r3
 8003538:	401a      	ands	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	3301      	adds	r3, #1
 8003542:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003544:	683a      	ldr	r2, [r7, #0]
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	fa22 f303 	lsr.w	r3, r2, r3
 800354c:	2b00      	cmp	r3, #0
 800354e:	f47f af2b 	bne.w	80033a8 <HAL_GPIO_DeInit+0x10>
  }
}
 8003552:	bf00      	nop
 8003554:	371c      	adds	r7, #28
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	40010000 	.word	0x40010000
 8003564:	48000400 	.word	0x48000400
 8003568:	48000800 	.word	0x48000800
 800356c:	48000c00 	.word	0x48000c00
 8003570:	48001000 	.word	0x48001000
 8003574:	48001400 	.word	0x48001400
 8003578:	48001800 	.word	0x48001800
 800357c:	40010400 	.word	0x40010400

08003580 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	460b      	mov	r3, r1
 800358a:	807b      	strh	r3, [r7, #2]
 800358c:	4613      	mov	r3, r2
 800358e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003590:	787b      	ldrb	r3, [r7, #1]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003596:	887a      	ldrh	r2, [r7, #2]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800359c:	e002      	b.n	80035a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800359e:	887a      	ldrh	r2, [r7, #2]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	4603      	mov	r3, r0
 80035b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80035ba:	4b08      	ldr	r3, [pc, #32]	; (80035dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035bc:	695a      	ldr	r2, [r3, #20]
 80035be:	88fb      	ldrh	r3, [r7, #6]
 80035c0:	4013      	ands	r3, r2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d006      	beq.n	80035d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80035c6:	4a05      	ldr	r2, [pc, #20]	; (80035dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035c8:	88fb      	ldrh	r3, [r7, #6]
 80035ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035cc:	88fb      	ldrh	r3, [r7, #6]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f000 f806 	bl	80035e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80035d4:	bf00      	nop
 80035d6:	3708      	adds	r7, #8
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	40010400 	.word	0x40010400

080035e0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	4603      	mov	r3, r0
 80035e8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80035ea:	bf00      	nop
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b082      	sub	sp, #8
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d101      	bne.n	8003608 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e081      	b.n	800370c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2b00      	cmp	r3, #0
 8003612:	d106      	bne.n	8003622 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f7fe fba5 	bl	8001d6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2224      	movs	r2, #36	; 0x24
 8003626:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f022 0201 	bic.w	r2, r2, #1
 8003638:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685a      	ldr	r2, [r3, #4]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003646:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	689a      	ldr	r2, [r3, #8]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003656:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	2b01      	cmp	r3, #1
 800365e:	d107      	bne.n	8003670 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689a      	ldr	r2, [r3, #8]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800366c:	609a      	str	r2, [r3, #8]
 800366e:	e006      	b.n	800367e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	689a      	ldr	r2, [r3, #8]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800367c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	2b02      	cmp	r3, #2
 8003684:	d104      	bne.n	8003690 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800368e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	6812      	ldr	r2, [r2, #0]
 800369a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800369e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036a2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	68da      	ldr	r2, [r3, #12]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036b2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	691a      	ldr	r2, [r3, #16]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	695b      	ldr	r3, [r3, #20]
 80036bc:	ea42 0103 	orr.w	r1, r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	021a      	lsls	r2, r3, #8
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	430a      	orrs	r2, r1
 80036cc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	69d9      	ldr	r1, [r3, #28]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a1a      	ldr	r2, [r3, #32]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	430a      	orrs	r2, r1
 80036dc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f042 0201 	orr.w	r2, r2, #1
 80036ec:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2220      	movs	r2, #32
 80036f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3708      	adds	r7, #8
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d101      	bne.n	8003726 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e021      	b.n	800376a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2224      	movs	r2, #36	; 0x24
 800372a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f022 0201 	bic.w	r2, r2, #1
 800373c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7fe fb58 	bl	8001df4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3708      	adds	r7, #8
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
	...

08003774 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b088      	sub	sp, #32
 8003778:	af02      	add	r7, sp, #8
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	4608      	mov	r0, r1
 800377e:	4611      	mov	r1, r2
 8003780:	461a      	mov	r2, r3
 8003782:	4603      	mov	r3, r0
 8003784:	817b      	strh	r3, [r7, #10]
 8003786:	460b      	mov	r3, r1
 8003788:	813b      	strh	r3, [r7, #8]
 800378a:	4613      	mov	r3, r2
 800378c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b20      	cmp	r3, #32
 8003798:	f040 80f9 	bne.w	800398e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800379c:	6a3b      	ldr	r3, [r7, #32]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d002      	beq.n	80037a8 <HAL_I2C_Mem_Write+0x34>
 80037a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d105      	bne.n	80037b4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037ae:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e0ed      	b.n	8003990 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d101      	bne.n	80037c2 <HAL_I2C_Mem_Write+0x4e>
 80037be:	2302      	movs	r3, #2
 80037c0:	e0e6      	b.n	8003990 <HAL_I2C_Mem_Write+0x21c>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80037ca:	f7ff fa21 	bl	8002c10 <HAL_GetTick>
 80037ce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	9300      	str	r3, [sp, #0]
 80037d4:	2319      	movs	r3, #25
 80037d6:	2201      	movs	r2, #1
 80037d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f000 fac3 	bl	8003d68 <I2C_WaitOnFlagUntilTimeout>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e0d1      	b.n	8003990 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2221      	movs	r2, #33	; 0x21
 80037f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2240      	movs	r2, #64	; 0x40
 80037f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6a3a      	ldr	r2, [r7, #32]
 8003806:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800380c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003814:	88f8      	ldrh	r0, [r7, #6]
 8003816:	893a      	ldrh	r2, [r7, #8]
 8003818:	8979      	ldrh	r1, [r7, #10]
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	9301      	str	r3, [sp, #4]
 800381e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003820:	9300      	str	r3, [sp, #0]
 8003822:	4603      	mov	r3, r0
 8003824:	68f8      	ldr	r0, [r7, #12]
 8003826:	f000 f9d3 	bl	8003bd0 <I2C_RequestMemoryWrite>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d005      	beq.n	800383c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e0a9      	b.n	8003990 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003840:	b29b      	uxth	r3, r3
 8003842:	2bff      	cmp	r3, #255	; 0xff
 8003844:	d90e      	bls.n	8003864 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	22ff      	movs	r2, #255	; 0xff
 800384a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003850:	b2da      	uxtb	r2, r3
 8003852:	8979      	ldrh	r1, [r7, #10]
 8003854:	2300      	movs	r3, #0
 8003856:	9300      	str	r3, [sp, #0]
 8003858:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f000 fba5 	bl	8003fac <I2C_TransferConfig>
 8003862:	e00f      	b.n	8003884 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003868:	b29a      	uxth	r2, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003872:	b2da      	uxtb	r2, r3
 8003874:	8979      	ldrh	r1, [r7, #10]
 8003876:	2300      	movs	r3, #0
 8003878:	9300      	str	r3, [sp, #0]
 800387a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f000 fb94 	bl	8003fac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003884:	697a      	ldr	r2, [r7, #20]
 8003886:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f000 faad 	bl	8003de8 <I2C_WaitOnTXISFlagUntilTimeout>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d001      	beq.n	8003898 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e07b      	b.n	8003990 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389c:	781a      	ldrb	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a8:	1c5a      	adds	r2, r3, #1
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	3b01      	subs	r3, #1
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c0:	3b01      	subs	r3, #1
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d034      	beq.n	800393c <HAL_I2C_Mem_Write+0x1c8>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d130      	bne.n	800393c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	9300      	str	r3, [sp, #0]
 80038de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e0:	2200      	movs	r2, #0
 80038e2:	2180      	movs	r1, #128	; 0x80
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f000 fa3f 	bl	8003d68 <I2C_WaitOnFlagUntilTimeout>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d001      	beq.n	80038f4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e04d      	b.n	8003990 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	2bff      	cmp	r3, #255	; 0xff
 80038fc:	d90e      	bls.n	800391c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	22ff      	movs	r2, #255	; 0xff
 8003902:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003908:	b2da      	uxtb	r2, r3
 800390a:	8979      	ldrh	r1, [r7, #10]
 800390c:	2300      	movs	r3, #0
 800390e:	9300      	str	r3, [sp, #0]
 8003910:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003914:	68f8      	ldr	r0, [r7, #12]
 8003916:	f000 fb49 	bl	8003fac <I2C_TransferConfig>
 800391a:	e00f      	b.n	800393c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003920:	b29a      	uxth	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800392a:	b2da      	uxtb	r2, r3
 800392c:	8979      	ldrh	r1, [r7, #10]
 800392e:	2300      	movs	r3, #0
 8003930:	9300      	str	r3, [sp, #0]
 8003932:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f000 fb38 	bl	8003fac <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003940:	b29b      	uxth	r3, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d19e      	bne.n	8003884 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003946:	697a      	ldr	r2, [r7, #20]
 8003948:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800394a:	68f8      	ldr	r0, [r7, #12]
 800394c:	f000 fa8c 	bl	8003e68 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d001      	beq.n	800395a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e01a      	b.n	8003990 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2220      	movs	r2, #32
 8003960:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	6859      	ldr	r1, [r3, #4]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	4b0a      	ldr	r3, [pc, #40]	; (8003998 <HAL_I2C_Mem_Write+0x224>)
 800396e:	400b      	ands	r3, r1
 8003970:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2220      	movs	r2, #32
 8003976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800398a:	2300      	movs	r3, #0
 800398c:	e000      	b.n	8003990 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800398e:	2302      	movs	r3, #2
  }
}
 8003990:	4618      	mov	r0, r3
 8003992:	3718      	adds	r7, #24
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	fe00e800 	.word	0xfe00e800

0800399c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b088      	sub	sp, #32
 80039a0:	af02      	add	r7, sp, #8
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	4608      	mov	r0, r1
 80039a6:	4611      	mov	r1, r2
 80039a8:	461a      	mov	r2, r3
 80039aa:	4603      	mov	r3, r0
 80039ac:	817b      	strh	r3, [r7, #10]
 80039ae:	460b      	mov	r3, r1
 80039b0:	813b      	strh	r3, [r7, #8]
 80039b2:	4613      	mov	r3, r2
 80039b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b20      	cmp	r3, #32
 80039c0:	f040 80fd 	bne.w	8003bbe <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80039c4:	6a3b      	ldr	r3, [r7, #32]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d002      	beq.n	80039d0 <HAL_I2C_Mem_Read+0x34>
 80039ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d105      	bne.n	80039dc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039d6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e0f1      	b.n	8003bc0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d101      	bne.n	80039ea <HAL_I2C_Mem_Read+0x4e>
 80039e6:	2302      	movs	r3, #2
 80039e8:	e0ea      	b.n	8003bc0 <HAL_I2C_Mem_Read+0x224>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80039f2:	f7ff f90d 	bl	8002c10 <HAL_GetTick>
 80039f6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	9300      	str	r3, [sp, #0]
 80039fc:	2319      	movs	r3, #25
 80039fe:	2201      	movs	r2, #1
 8003a00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f000 f9af 	bl	8003d68 <I2C_WaitOnFlagUntilTimeout>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d001      	beq.n	8003a14 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e0d5      	b.n	8003bc0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2222      	movs	r2, #34	; 0x22
 8003a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2240      	movs	r2, #64	; 0x40
 8003a20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2200      	movs	r2, #0
 8003a28:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6a3a      	ldr	r2, [r7, #32]
 8003a2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003a34:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a3c:	88f8      	ldrh	r0, [r7, #6]
 8003a3e:	893a      	ldrh	r2, [r7, #8]
 8003a40:	8979      	ldrh	r1, [r7, #10]
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	9301      	str	r3, [sp, #4]
 8003a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a48:	9300      	str	r3, [sp, #0]
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	68f8      	ldr	r0, [r7, #12]
 8003a4e:	f000 f913 	bl	8003c78 <I2C_RequestMemoryRead>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d005      	beq.n	8003a64 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e0ad      	b.n	8003bc0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	2bff      	cmp	r3, #255	; 0xff
 8003a6c:	d90e      	bls.n	8003a8c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	22ff      	movs	r2, #255	; 0xff
 8003a72:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a78:	b2da      	uxtb	r2, r3
 8003a7a:	8979      	ldrh	r1, [r7, #10]
 8003a7c:	4b52      	ldr	r3, [pc, #328]	; (8003bc8 <HAL_I2C_Mem_Read+0x22c>)
 8003a7e:	9300      	str	r3, [sp, #0]
 8003a80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	f000 fa91 	bl	8003fac <I2C_TransferConfig>
 8003a8a:	e00f      	b.n	8003aac <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a9a:	b2da      	uxtb	r2, r3
 8003a9c:	8979      	ldrh	r1, [r7, #10]
 8003a9e:	4b4a      	ldr	r3, [pc, #296]	; (8003bc8 <HAL_I2C_Mem_Read+0x22c>)
 8003aa0:	9300      	str	r3, [sp, #0]
 8003aa2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 fa80 	bl	8003fac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	9300      	str	r3, [sp, #0]
 8003ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	2104      	movs	r1, #4
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f000 f956 	bl	8003d68 <I2C_WaitOnFlagUntilTimeout>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d001      	beq.n	8003ac6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e07c      	b.n	8003bc0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad0:	b2d2      	uxtb	r2, r2
 8003ad2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad8:	1c5a      	adds	r2, r3, #1
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	b29a      	uxth	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	3b01      	subs	r3, #1
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d034      	beq.n	8003b6c <HAL_I2C_Mem_Read+0x1d0>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d130      	bne.n	8003b6c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	9300      	str	r3, [sp, #0]
 8003b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b10:	2200      	movs	r2, #0
 8003b12:	2180      	movs	r1, #128	; 0x80
 8003b14:	68f8      	ldr	r0, [r7, #12]
 8003b16:	f000 f927 	bl	8003d68 <I2C_WaitOnFlagUntilTimeout>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d001      	beq.n	8003b24 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e04d      	b.n	8003bc0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	2bff      	cmp	r3, #255	; 0xff
 8003b2c:	d90e      	bls.n	8003b4c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	22ff      	movs	r2, #255	; 0xff
 8003b32:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b38:	b2da      	uxtb	r2, r3
 8003b3a:	8979      	ldrh	r1, [r7, #10]
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	9300      	str	r3, [sp, #0]
 8003b40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b44:	68f8      	ldr	r0, [r7, #12]
 8003b46:	f000 fa31 	bl	8003fac <I2C_TransferConfig>
 8003b4a:	e00f      	b.n	8003b6c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b50:	b29a      	uxth	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b5a:	b2da      	uxtb	r2, r3
 8003b5c:	8979      	ldrh	r1, [r7, #10]
 8003b5e:	2300      	movs	r3, #0
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b66:	68f8      	ldr	r0, [r7, #12]
 8003b68:	f000 fa20 	bl	8003fac <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d19a      	bne.n	8003aac <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b7a:	68f8      	ldr	r0, [r7, #12]
 8003b7c:	f000 f974 	bl	8003e68 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e01a      	b.n	8003bc0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2220      	movs	r2, #32
 8003b90:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	6859      	ldr	r1, [r3, #4]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	4b0b      	ldr	r3, [pc, #44]	; (8003bcc <HAL_I2C_Mem_Read+0x230>)
 8003b9e:	400b      	ands	r3, r1
 8003ba0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2220      	movs	r2, #32
 8003ba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	e000      	b.n	8003bc0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003bbe:	2302      	movs	r3, #2
  }
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3718      	adds	r7, #24
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	80002400 	.word	0x80002400
 8003bcc:	fe00e800 	.word	0xfe00e800

08003bd0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b086      	sub	sp, #24
 8003bd4:	af02      	add	r7, sp, #8
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	4608      	mov	r0, r1
 8003bda:	4611      	mov	r1, r2
 8003bdc:	461a      	mov	r2, r3
 8003bde:	4603      	mov	r3, r0
 8003be0:	817b      	strh	r3, [r7, #10]
 8003be2:	460b      	mov	r3, r1
 8003be4:	813b      	strh	r3, [r7, #8]
 8003be6:	4613      	mov	r3, r2
 8003be8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003bea:	88fb      	ldrh	r3, [r7, #6]
 8003bec:	b2da      	uxtb	r2, r3
 8003bee:	8979      	ldrh	r1, [r7, #10]
 8003bf0:	4b20      	ldr	r3, [pc, #128]	; (8003c74 <I2C_RequestMemoryWrite+0xa4>)
 8003bf2:	9300      	str	r3, [sp, #0]
 8003bf4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003bf8:	68f8      	ldr	r0, [r7, #12]
 8003bfa:	f000 f9d7 	bl	8003fac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bfe:	69fa      	ldr	r2, [r7, #28]
 8003c00:	69b9      	ldr	r1, [r7, #24]
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	f000 f8f0 	bl	8003de8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e02c      	b.n	8003c6c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c12:	88fb      	ldrh	r3, [r7, #6]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d105      	bne.n	8003c24 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c18:	893b      	ldrh	r3, [r7, #8]
 8003c1a:	b2da      	uxtb	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	629a      	str	r2, [r3, #40]	; 0x28
 8003c22:	e015      	b.n	8003c50 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003c24:	893b      	ldrh	r3, [r7, #8]
 8003c26:	0a1b      	lsrs	r3, r3, #8
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	b2da      	uxtb	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c32:	69fa      	ldr	r2, [r7, #28]
 8003c34:	69b9      	ldr	r1, [r7, #24]
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f000 f8d6 	bl	8003de8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e012      	b.n	8003c6c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c46:	893b      	ldrh	r3, [r7, #8]
 8003c48:	b2da      	uxtb	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	9300      	str	r3, [sp, #0]
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	2200      	movs	r2, #0
 8003c58:	2180      	movs	r1, #128	; 0x80
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f000 f884 	bl	8003d68 <I2C_WaitOnFlagUntilTimeout>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d001      	beq.n	8003c6a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e000      	b.n	8003c6c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3710      	adds	r7, #16
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	80002000 	.word	0x80002000

08003c78 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af02      	add	r7, sp, #8
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	4608      	mov	r0, r1
 8003c82:	4611      	mov	r1, r2
 8003c84:	461a      	mov	r2, r3
 8003c86:	4603      	mov	r3, r0
 8003c88:	817b      	strh	r3, [r7, #10]
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	813b      	strh	r3, [r7, #8]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003c92:	88fb      	ldrh	r3, [r7, #6]
 8003c94:	b2da      	uxtb	r2, r3
 8003c96:	8979      	ldrh	r1, [r7, #10]
 8003c98:	4b20      	ldr	r3, [pc, #128]	; (8003d1c <I2C_RequestMemoryRead+0xa4>)
 8003c9a:	9300      	str	r3, [sp, #0]
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	68f8      	ldr	r0, [r7, #12]
 8003ca0:	f000 f984 	bl	8003fac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ca4:	69fa      	ldr	r2, [r7, #28]
 8003ca6:	69b9      	ldr	r1, [r7, #24]
 8003ca8:	68f8      	ldr	r0, [r7, #12]
 8003caa:	f000 f89d 	bl	8003de8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d001      	beq.n	8003cb8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e02c      	b.n	8003d12 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003cb8:	88fb      	ldrh	r3, [r7, #6]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d105      	bne.n	8003cca <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003cbe:	893b      	ldrh	r3, [r7, #8]
 8003cc0:	b2da      	uxtb	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	629a      	str	r2, [r3, #40]	; 0x28
 8003cc8:	e015      	b.n	8003cf6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003cca:	893b      	ldrh	r3, [r7, #8]
 8003ccc:	0a1b      	lsrs	r3, r3, #8
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	b2da      	uxtb	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cd8:	69fa      	ldr	r2, [r7, #28]
 8003cda:	69b9      	ldr	r1, [r7, #24]
 8003cdc:	68f8      	ldr	r0, [r7, #12]
 8003cde:	f000 f883 	bl	8003de8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d001      	beq.n	8003cec <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e012      	b.n	8003d12 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003cec:	893b      	ldrh	r3, [r7, #8]
 8003cee:	b2da      	uxtb	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	9300      	str	r3, [sp, #0]
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	2140      	movs	r1, #64	; 0x40
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	f000 f831 	bl	8003d68 <I2C_WaitOnFlagUntilTimeout>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d001      	beq.n	8003d10 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e000      	b.n	8003d12 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3710      	adds	r7, #16
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	80002000 	.word	0x80002000

08003d20 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d103      	bne.n	8003d3e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	699b      	ldr	r3, [r3, #24]
 8003d44:	f003 0301 	and.w	r3, r3, #1
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d007      	beq.n	8003d5c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	699a      	ldr	r2, [r3, #24]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f042 0201 	orr.w	r2, r2, #1
 8003d5a:	619a      	str	r2, [r3, #24]
  }
}
 8003d5c:	bf00      	nop
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	603b      	str	r3, [r7, #0]
 8003d74:	4613      	mov	r3, r2
 8003d76:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d78:	e022      	b.n	8003dc0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d80:	d01e      	beq.n	8003dc0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d82:	f7fe ff45 	bl	8002c10 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	683a      	ldr	r2, [r7, #0]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d302      	bcc.n	8003d98 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d113      	bne.n	8003dc0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d9c:	f043 0220 	orr.w	r2, r3, #32
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2220      	movs	r2, #32
 8003da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e00f      	b.n	8003de0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	699a      	ldr	r2, [r3, #24]
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	4013      	ands	r3, r2
 8003dca:	68ba      	ldr	r2, [r7, #8]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	bf0c      	ite	eq
 8003dd0:	2301      	moveq	r3, #1
 8003dd2:	2300      	movne	r3, #0
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	79fb      	ldrb	r3, [r7, #7]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d0cd      	beq.n	8003d7a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3710      	adds	r7, #16
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003df4:	e02c      	b.n	8003e50 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	68b9      	ldr	r1, [r7, #8]
 8003dfa:	68f8      	ldr	r0, [r7, #12]
 8003dfc:	f000 f870 	bl	8003ee0 <I2C_IsAcknowledgeFailed>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d001      	beq.n	8003e0a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e02a      	b.n	8003e60 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e10:	d01e      	beq.n	8003e50 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e12:	f7fe fefd 	bl	8002c10 <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	68ba      	ldr	r2, [r7, #8]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d302      	bcc.n	8003e28 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d113      	bne.n	8003e50 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2c:	f043 0220 	orr.w	r2, r3, #32
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2220      	movs	r2, #32
 8003e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e007      	b.n	8003e60 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d1cb      	bne.n	8003df6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3710      	adds	r7, #16
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e74:	e028      	b.n	8003ec8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	68b9      	ldr	r1, [r7, #8]
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f000 f830 	bl	8003ee0 <I2C_IsAcknowledgeFailed>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d001      	beq.n	8003e8a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e026      	b.n	8003ed8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e8a:	f7fe fec1 	bl	8002c10 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	68ba      	ldr	r2, [r7, #8]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d302      	bcc.n	8003ea0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d113      	bne.n	8003ec8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea4:	f043 0220 	orr.w	r2, r3, #32
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2220      	movs	r2, #32
 8003eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e007      	b.n	8003ed8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	f003 0320 	and.w	r3, r3, #32
 8003ed2:	2b20      	cmp	r3, #32
 8003ed4:	d1cf      	bne.n	8003e76 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3710      	adds	r7, #16
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	f003 0310 	and.w	r3, r3, #16
 8003ef6:	2b10      	cmp	r3, #16
 8003ef8:	d151      	bne.n	8003f9e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003efa:	e022      	b.n	8003f42 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f02:	d01e      	beq.n	8003f42 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f04:	f7fe fe84 	bl	8002c10 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	68ba      	ldr	r2, [r7, #8]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d302      	bcc.n	8003f1a <I2C_IsAcknowledgeFailed+0x3a>
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d113      	bne.n	8003f42 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f1e:	f043 0220 	orr.w	r2, r3, #32
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2220      	movs	r2, #32
 8003f2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e02e      	b.n	8003fa0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	699b      	ldr	r3, [r3, #24]
 8003f48:	f003 0320 	and.w	r3, r3, #32
 8003f4c:	2b20      	cmp	r3, #32
 8003f4e:	d1d5      	bne.n	8003efc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2210      	movs	r2, #16
 8003f56:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2220      	movs	r2, #32
 8003f5e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003f60:	68f8      	ldr	r0, [r7, #12]
 8003f62:	f7ff fedd 	bl	8003d20 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	6859      	ldr	r1, [r3, #4]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	4b0d      	ldr	r3, [pc, #52]	; (8003fa8 <I2C_IsAcknowledgeFailed+0xc8>)
 8003f72:	400b      	ands	r3, r1
 8003f74:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f7a:	f043 0204 	orr.w	r2, r3, #4
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2220      	movs	r2, #32
 8003f86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e000      	b.n	8003fa0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3710      	adds	r7, #16
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	fe00e800 	.word	0xfe00e800

08003fac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	607b      	str	r3, [r7, #4]
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	817b      	strh	r3, [r7, #10]
 8003fba:	4613      	mov	r3, r2
 8003fbc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	685a      	ldr	r2, [r3, #4]
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	0d5b      	lsrs	r3, r3, #21
 8003fc8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003fcc:	4b0d      	ldr	r3, [pc, #52]	; (8004004 <I2C_TransferConfig+0x58>)
 8003fce:	430b      	orrs	r3, r1
 8003fd0:	43db      	mvns	r3, r3
 8003fd2:	ea02 0103 	and.w	r1, r2, r3
 8003fd6:	897b      	ldrh	r3, [r7, #10]
 8003fd8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003fdc:	7a7b      	ldrb	r3, [r7, #9]
 8003fde:	041b      	lsls	r3, r3, #16
 8003fe0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003fe4:	431a      	orrs	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	431a      	orrs	r2, r3
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	431a      	orrs	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003ff6:	bf00      	nop
 8003ff8:	3714      	adds	r7, #20
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	03ff63ff 	.word	0x03ff63ff

08004008 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b20      	cmp	r3, #32
 800401c:	d138      	bne.n	8004090 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004024:	2b01      	cmp	r3, #1
 8004026:	d101      	bne.n	800402c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004028:	2302      	movs	r3, #2
 800402a:	e032      	b.n	8004092 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2224      	movs	r2, #36	; 0x24
 8004038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f022 0201 	bic.w	r2, r2, #1
 800404a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800405a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	6819      	ldr	r1, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	683a      	ldr	r2, [r7, #0]
 8004068:	430a      	orrs	r2, r1
 800406a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f042 0201 	orr.w	r2, r2, #1
 800407a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2220      	movs	r2, #32
 8004080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800408c:	2300      	movs	r3, #0
 800408e:	e000      	b.n	8004092 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004090:	2302      	movs	r3, #2
  }
}
 8004092:	4618      	mov	r0, r3
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800409e:	b480      	push	{r7}
 80040a0:	b085      	sub	sp, #20
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
 80040a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	2b20      	cmp	r3, #32
 80040b2:	d139      	bne.n	8004128 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d101      	bne.n	80040c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80040be:	2302      	movs	r3, #2
 80040c0:	e033      	b.n	800412a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2224      	movs	r2, #36	; 0x24
 80040ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f022 0201 	bic.w	r2, r2, #1
 80040e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80040f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	021b      	lsls	r3, r3, #8
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f042 0201 	orr.w	r2, r2, #1
 8004112:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2220      	movs	r2, #32
 8004118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004124:	2300      	movs	r3, #0
 8004126:	e000      	b.n	800412a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004128:	2302      	movs	r3, #2
  }
}
 800412a:	4618      	mov	r0, r3
 800412c:	3714      	adds	r7, #20
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr

08004136 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004136:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004138:	b08f      	sub	sp, #60	; 0x3c
 800413a:	af0a      	add	r7, sp, #40	; 0x28
 800413c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d101      	bne.n	8004148 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e116      	b.n	8004376 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b00      	cmp	r3, #0
 8004158:	d106      	bne.n	8004168 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f7fd ff62 	bl	800202c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2203      	movs	r2, #3
 800416c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004178:	2b00      	cmp	r3, #0
 800417a:	d102      	bne.n	8004182 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4618      	mov	r0, r3
 8004188:	f002 fe38 	bl	8006dfc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	603b      	str	r3, [r7, #0]
 8004192:	687e      	ldr	r6, [r7, #4]
 8004194:	466d      	mov	r5, sp
 8004196:	f106 0410 	add.w	r4, r6, #16
 800419a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800419c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800419e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80041a6:	e885 0003 	stmia.w	r5, {r0, r1}
 80041aa:	1d33      	adds	r3, r6, #4
 80041ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80041ae:	6838      	ldr	r0, [r7, #0]
 80041b0:	f002 fdd2 	bl	8006d58 <USB_CoreInit>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d005      	beq.n	80041c6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2202      	movs	r2, #2
 80041be:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e0d7      	b.n	8004376 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2100      	movs	r1, #0
 80041cc:	4618      	mov	r0, r3
 80041ce:	f002 fe26 	bl	8006e1e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041d2:	2300      	movs	r3, #0
 80041d4:	73fb      	strb	r3, [r7, #15]
 80041d6:	e04a      	b.n	800426e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80041d8:	7bfa      	ldrb	r2, [r7, #15]
 80041da:	6879      	ldr	r1, [r7, #4]
 80041dc:	4613      	mov	r3, r2
 80041de:	00db      	lsls	r3, r3, #3
 80041e0:	1a9b      	subs	r3, r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	440b      	add	r3, r1
 80041e6:	333d      	adds	r3, #61	; 0x3d
 80041e8:	2201      	movs	r2, #1
 80041ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80041ec:	7bfa      	ldrb	r2, [r7, #15]
 80041ee:	6879      	ldr	r1, [r7, #4]
 80041f0:	4613      	mov	r3, r2
 80041f2:	00db      	lsls	r3, r3, #3
 80041f4:	1a9b      	subs	r3, r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	440b      	add	r3, r1
 80041fa:	333c      	adds	r3, #60	; 0x3c
 80041fc:	7bfa      	ldrb	r2, [r7, #15]
 80041fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004200:	7bfa      	ldrb	r2, [r7, #15]
 8004202:	7bfb      	ldrb	r3, [r7, #15]
 8004204:	b298      	uxth	r0, r3
 8004206:	6879      	ldr	r1, [r7, #4]
 8004208:	4613      	mov	r3, r2
 800420a:	00db      	lsls	r3, r3, #3
 800420c:	1a9b      	subs	r3, r3, r2
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	440b      	add	r3, r1
 8004212:	3342      	adds	r3, #66	; 0x42
 8004214:	4602      	mov	r2, r0
 8004216:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004218:	7bfa      	ldrb	r2, [r7, #15]
 800421a:	6879      	ldr	r1, [r7, #4]
 800421c:	4613      	mov	r3, r2
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	1a9b      	subs	r3, r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	440b      	add	r3, r1
 8004226:	333f      	adds	r3, #63	; 0x3f
 8004228:	2200      	movs	r2, #0
 800422a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800422c:	7bfa      	ldrb	r2, [r7, #15]
 800422e:	6879      	ldr	r1, [r7, #4]
 8004230:	4613      	mov	r3, r2
 8004232:	00db      	lsls	r3, r3, #3
 8004234:	1a9b      	subs	r3, r3, r2
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	440b      	add	r3, r1
 800423a:	3344      	adds	r3, #68	; 0x44
 800423c:	2200      	movs	r2, #0
 800423e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004240:	7bfa      	ldrb	r2, [r7, #15]
 8004242:	6879      	ldr	r1, [r7, #4]
 8004244:	4613      	mov	r3, r2
 8004246:	00db      	lsls	r3, r3, #3
 8004248:	1a9b      	subs	r3, r3, r2
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	440b      	add	r3, r1
 800424e:	3348      	adds	r3, #72	; 0x48
 8004250:	2200      	movs	r2, #0
 8004252:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004254:	7bfa      	ldrb	r2, [r7, #15]
 8004256:	6879      	ldr	r1, [r7, #4]
 8004258:	4613      	mov	r3, r2
 800425a:	00db      	lsls	r3, r3, #3
 800425c:	1a9b      	subs	r3, r3, r2
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	440b      	add	r3, r1
 8004262:	3350      	adds	r3, #80	; 0x50
 8004264:	2200      	movs	r2, #0
 8004266:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004268:	7bfb      	ldrb	r3, [r7, #15]
 800426a:	3301      	adds	r3, #1
 800426c:	73fb      	strb	r3, [r7, #15]
 800426e:	7bfa      	ldrb	r2, [r7, #15]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	429a      	cmp	r2, r3
 8004276:	d3af      	bcc.n	80041d8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004278:	2300      	movs	r3, #0
 800427a:	73fb      	strb	r3, [r7, #15]
 800427c:	e044      	b.n	8004308 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800427e:	7bfa      	ldrb	r2, [r7, #15]
 8004280:	6879      	ldr	r1, [r7, #4]
 8004282:	4613      	mov	r3, r2
 8004284:	00db      	lsls	r3, r3, #3
 8004286:	1a9b      	subs	r3, r3, r2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	440b      	add	r3, r1
 800428c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004290:	2200      	movs	r2, #0
 8004292:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004294:	7bfa      	ldrb	r2, [r7, #15]
 8004296:	6879      	ldr	r1, [r7, #4]
 8004298:	4613      	mov	r3, r2
 800429a:	00db      	lsls	r3, r3, #3
 800429c:	1a9b      	subs	r3, r3, r2
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	440b      	add	r3, r1
 80042a2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80042a6:	7bfa      	ldrb	r2, [r7, #15]
 80042a8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80042aa:	7bfa      	ldrb	r2, [r7, #15]
 80042ac:	6879      	ldr	r1, [r7, #4]
 80042ae:	4613      	mov	r3, r2
 80042b0:	00db      	lsls	r3, r3, #3
 80042b2:	1a9b      	subs	r3, r3, r2
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	440b      	add	r3, r1
 80042b8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80042bc:	2200      	movs	r2, #0
 80042be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80042c0:	7bfa      	ldrb	r2, [r7, #15]
 80042c2:	6879      	ldr	r1, [r7, #4]
 80042c4:	4613      	mov	r3, r2
 80042c6:	00db      	lsls	r3, r3, #3
 80042c8:	1a9b      	subs	r3, r3, r2
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	440b      	add	r3, r1
 80042ce:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80042d2:	2200      	movs	r2, #0
 80042d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80042d6:	7bfa      	ldrb	r2, [r7, #15]
 80042d8:	6879      	ldr	r1, [r7, #4]
 80042da:	4613      	mov	r3, r2
 80042dc:	00db      	lsls	r3, r3, #3
 80042de:	1a9b      	subs	r3, r3, r2
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	440b      	add	r3, r1
 80042e4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80042e8:	2200      	movs	r2, #0
 80042ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80042ec:	7bfa      	ldrb	r2, [r7, #15]
 80042ee:	6879      	ldr	r1, [r7, #4]
 80042f0:	4613      	mov	r3, r2
 80042f2:	00db      	lsls	r3, r3, #3
 80042f4:	1a9b      	subs	r3, r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	440b      	add	r3, r1
 80042fa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80042fe:	2200      	movs	r2, #0
 8004300:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004302:	7bfb      	ldrb	r3, [r7, #15]
 8004304:	3301      	adds	r3, #1
 8004306:	73fb      	strb	r3, [r7, #15]
 8004308:	7bfa      	ldrb	r2, [r7, #15]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	429a      	cmp	r2, r3
 8004310:	d3b5      	bcc.n	800427e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	603b      	str	r3, [r7, #0]
 8004318:	687e      	ldr	r6, [r7, #4]
 800431a:	466d      	mov	r5, sp
 800431c:	f106 0410 	add.w	r4, r6, #16
 8004320:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004322:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004324:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004326:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004328:	e894 0003 	ldmia.w	r4, {r0, r1}
 800432c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004330:	1d33      	adds	r3, r6, #4
 8004332:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004334:	6838      	ldr	r0, [r7, #0]
 8004336:	f002 fd9d 	bl	8006e74 <USB_DevInit>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d005      	beq.n	800434c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2202      	movs	r2, #2
 8004344:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e014      	b.n	8004376 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004360:	2b01      	cmp	r3, #1
 8004362:	d102      	bne.n	800436a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f000 f80a 	bl	800437e <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4618      	mov	r0, r3
 8004370:	f002 ff2d 	bl	80071ce <USB_DevDisconnect>

  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3714      	adds	r7, #20
 800437a:	46bd      	mov	sp, r7
 800437c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800437e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800437e:	b480      	push	{r7}
 8004380:	b085      	sub	sp, #20
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	699b      	ldr	r3, [r3, #24]
 80043a0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043b0:	f043 0303 	orr.w	r3, r3, #3
 80043b4:	68fa      	ldr	r2, [r7, #12]
 80043b6:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3714      	adds	r7, #20
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
	...

080043c8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80043c8:	b480      	push	{r7}
 80043ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043cc:	4b05      	ldr	r3, [pc, #20]	; (80043e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a04      	ldr	r2, [pc, #16]	; (80043e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80043d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043d6:	6013      	str	r3, [r2, #0]
}
 80043d8:	bf00      	nop
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	40007000 	.word	0x40007000

080043e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80043e8:	b480      	push	{r7}
 80043ea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80043ec:	4b04      	ldr	r3, [pc, #16]	; (8004400 <HAL_PWREx_GetVoltageRange+0x18>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	40007000 	.word	0x40007000

08004404 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004404:	b480      	push	{r7}
 8004406:	b085      	sub	sp, #20
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004412:	d130      	bne.n	8004476 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004414:	4b23      	ldr	r3, [pc, #140]	; (80044a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800441c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004420:	d038      	beq.n	8004494 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004422:	4b20      	ldr	r3, [pc, #128]	; (80044a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800442a:	4a1e      	ldr	r2, [pc, #120]	; (80044a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800442c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004430:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004432:	4b1d      	ldr	r3, [pc, #116]	; (80044a8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2232      	movs	r2, #50	; 0x32
 8004438:	fb02 f303 	mul.w	r3, r2, r3
 800443c:	4a1b      	ldr	r2, [pc, #108]	; (80044ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800443e:	fba2 2303 	umull	r2, r3, r2, r3
 8004442:	0c9b      	lsrs	r3, r3, #18
 8004444:	3301      	adds	r3, #1
 8004446:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004448:	e002      	b.n	8004450 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	3b01      	subs	r3, #1
 800444e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004450:	4b14      	ldr	r3, [pc, #80]	; (80044a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004452:	695b      	ldr	r3, [r3, #20]
 8004454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004458:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800445c:	d102      	bne.n	8004464 <HAL_PWREx_ControlVoltageScaling+0x60>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1f2      	bne.n	800444a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004464:	4b0f      	ldr	r3, [pc, #60]	; (80044a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004466:	695b      	ldr	r3, [r3, #20]
 8004468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800446c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004470:	d110      	bne.n	8004494 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e00f      	b.n	8004496 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004476:	4b0b      	ldr	r3, [pc, #44]	; (80044a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800447e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004482:	d007      	beq.n	8004494 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004484:	4b07      	ldr	r3, [pc, #28]	; (80044a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800448c:	4a05      	ldr	r2, [pc, #20]	; (80044a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800448e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004492:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3714      	adds	r7, #20
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	40007000 	.word	0x40007000
 80044a8:	20000000 	.word	0x20000000
 80044ac:	431bde83 	.word	0x431bde83

080044b0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80044b0:	b480      	push	{r7}
 80044b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80044b4:	4b05      	ldr	r3, [pc, #20]	; (80044cc <HAL_PWREx_EnableVddUSB+0x1c>)
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	4a04      	ldr	r2, [pc, #16]	; (80044cc <HAL_PWREx_EnableVddUSB+0x1c>)
 80044ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044be:	6053      	str	r3, [r2, #4]
}
 80044c0:	bf00      	nop
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	40007000 	.word	0x40007000

080044d0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b086      	sub	sp, #24
 80044d4:	af02      	add	r7, sp, #8
 80044d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80044d8:	f7fe fb9a 	bl	8002c10 <HAL_GetTick>
 80044dc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d101      	bne.n	80044e8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e06f      	b.n	80045c8 <HAL_QSPI_Init+0xf8>
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  /* Process locked */
  __HAL_LOCK(hqspi);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d101      	bne.n	80044f8 <HAL_QSPI_Init+0x28>
 80044f4:	2302      	movs	r3, #2
 80044f6:	e067      	b.n	80045c8 <HAL_QSPI_Init+0xf8>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004506:	b2db      	uxtb	r3, r3
 8004508:	2b00      	cmp	r3, #0
 800450a:	d10b      	bne.n	8004524 <HAL_QSPI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f7fd fc8b 	bl	8001e30 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800451a:	f241 3188 	movw	r1, #5000	; 0x1388
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 f858 	bl	80045d4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	3b01      	subs	r3, #1
 8004534:	021a      	lsls	r2, r3, #8
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	430a      	orrs	r2, r1
 800453c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004542:	9300      	str	r3, [sp, #0]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	2120      	movs	r1, #32
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 f850 	bl	80045f0 <QSPI_WaitFlagStateUntilTimeout>
 8004550:	4603      	mov	r3, r0
 8004552:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004554:	7afb      	ldrb	r3, [r7, #11]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d131      	bne.n	80045be <HAL_QSPI_Init+0xee>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004564:	f023 0310 	bic.w	r3, r3, #16
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	6852      	ldr	r2, [r2, #4]
 800456c:	0611      	lsls	r1, r2, #24
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	68d2      	ldr	r2, [r2, #12]
 8004572:	4311      	orrs	r1, r2
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	6812      	ldr	r2, [r2, #0]
 8004578:	430b      	orrs	r3, r1
 800457a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	685a      	ldr	r2, [r3, #4]
 8004582:	4b13      	ldr	r3, [pc, #76]	; (80045d0 <HAL_QSPI_Init+0x100>)
 8004584:	4013      	ands	r3, r2
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	6912      	ldr	r2, [r2, #16]
 800458a:	0411      	lsls	r1, r2, #16
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	6952      	ldr	r2, [r2, #20]
 8004590:	4311      	orrs	r1, r2
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	6992      	ldr	r2, [r2, #24]
 8004596:	4311      	orrs	r1, r2
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	6812      	ldr	r2, [r2, #0]
 800459c:	430b      	orrs	r3, r1
 800459e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f042 0201 	orr.w	r2, r2, #1
 80045ae:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2201      	movs	r2, #1
 80045ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80045c6:	7afb      	ldrb	r3, [r7, #11]
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3710      	adds	r7, #16
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	ffe0f8fe 	.word	0xffe0f8fe

080045d4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	683a      	ldr	r2, [r7, #0]
 80045e2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	603b      	str	r3, [r7, #0]
 80045fc:	4613      	mov	r3, r2
 80045fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004600:	e01a      	b.n	8004638 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004608:	d016      	beq.n	8004638 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800460a:	f7fe fb01 	bl	8002c10 <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	69ba      	ldr	r2, [r7, #24]
 8004616:	429a      	cmp	r2, r3
 8004618:	d302      	bcc.n	8004620 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800461a:	69bb      	ldr	r3, [r7, #24]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d10b      	bne.n	8004638 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2204      	movs	r2, #4
 8004624:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800462c:	f043 0201 	orr.w	r2, r3, #1
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e00e      	b.n	8004656 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	689a      	ldr	r2, [r3, #8]
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	4013      	ands	r3, r2
 8004642:	2b00      	cmp	r3, #0
 8004644:	bf14      	ite	ne
 8004646:	2301      	movne	r3, #1
 8004648:	2300      	moveq	r3, #0
 800464a:	b2db      	uxtb	r3, r3
 800464c:	461a      	mov	r2, r3
 800464e:	79fb      	ldrb	r3, [r7, #7]
 8004650:	429a      	cmp	r2, r3
 8004652:	d1d6      	bne.n	8004602 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3710      	adds	r7, #16
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
	...

08004660 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b088      	sub	sp, #32
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d101      	bne.n	8004672 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e3d4      	b.n	8004e1c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004672:	4ba1      	ldr	r3, [pc, #644]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f003 030c 	and.w	r3, r3, #12
 800467a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800467c:	4b9e      	ldr	r3, [pc, #632]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	f003 0303 	and.w	r3, r3, #3
 8004684:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0310 	and.w	r3, r3, #16
 800468e:	2b00      	cmp	r3, #0
 8004690:	f000 80e4 	beq.w	800485c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d007      	beq.n	80046aa <HAL_RCC_OscConfig+0x4a>
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	2b0c      	cmp	r3, #12
 800469e:	f040 808b 	bne.w	80047b8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	f040 8087 	bne.w	80047b8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80046aa:	4b93      	ldr	r3, [pc, #588]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d005      	beq.n	80046c2 <HAL_RCC_OscConfig+0x62>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d101      	bne.n	80046c2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e3ac      	b.n	8004e1c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a1a      	ldr	r2, [r3, #32]
 80046c6:	4b8c      	ldr	r3, [pc, #560]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0308 	and.w	r3, r3, #8
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d004      	beq.n	80046dc <HAL_RCC_OscConfig+0x7c>
 80046d2:	4b89      	ldr	r3, [pc, #548]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046da:	e005      	b.n	80046e8 <HAL_RCC_OscConfig+0x88>
 80046dc:	4b86      	ldr	r3, [pc, #536]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 80046de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046e2:	091b      	lsrs	r3, r3, #4
 80046e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d223      	bcs.n	8004734 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a1b      	ldr	r3, [r3, #32]
 80046f0:	4618      	mov	r0, r3
 80046f2:	f000 fd71 	bl	80051d8 <RCC_SetFlashLatencyFromMSIRange>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d001      	beq.n	8004700 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e38d      	b.n	8004e1c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004700:	4b7d      	ldr	r3, [pc, #500]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a7c      	ldr	r2, [pc, #496]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 8004706:	f043 0308 	orr.w	r3, r3, #8
 800470a:	6013      	str	r3, [r2, #0]
 800470c:	4b7a      	ldr	r3, [pc, #488]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a1b      	ldr	r3, [r3, #32]
 8004718:	4977      	ldr	r1, [pc, #476]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 800471a:	4313      	orrs	r3, r2
 800471c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800471e:	4b76      	ldr	r3, [pc, #472]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	69db      	ldr	r3, [r3, #28]
 800472a:	021b      	lsls	r3, r3, #8
 800472c:	4972      	ldr	r1, [pc, #456]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 800472e:	4313      	orrs	r3, r2
 8004730:	604b      	str	r3, [r1, #4]
 8004732:	e025      	b.n	8004780 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004734:	4b70      	ldr	r3, [pc, #448]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a6f      	ldr	r2, [pc, #444]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 800473a:	f043 0308 	orr.w	r3, r3, #8
 800473e:	6013      	str	r3, [r2, #0]
 8004740:	4b6d      	ldr	r3, [pc, #436]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a1b      	ldr	r3, [r3, #32]
 800474c:	496a      	ldr	r1, [pc, #424]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 800474e:	4313      	orrs	r3, r2
 8004750:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004752:	4b69      	ldr	r3, [pc, #420]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	69db      	ldr	r3, [r3, #28]
 800475e:	021b      	lsls	r3, r3, #8
 8004760:	4965      	ldr	r1, [pc, #404]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 8004762:	4313      	orrs	r3, r2
 8004764:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d109      	bne.n	8004780 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a1b      	ldr	r3, [r3, #32]
 8004770:	4618      	mov	r0, r3
 8004772:	f000 fd31 	bl	80051d8 <RCC_SetFlashLatencyFromMSIRange>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d001      	beq.n	8004780 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e34d      	b.n	8004e1c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004780:	f000 fc36 	bl	8004ff0 <HAL_RCC_GetSysClockFreq>
 8004784:	4601      	mov	r1, r0
 8004786:	4b5c      	ldr	r3, [pc, #368]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	091b      	lsrs	r3, r3, #4
 800478c:	f003 030f 	and.w	r3, r3, #15
 8004790:	4a5a      	ldr	r2, [pc, #360]	; (80048fc <HAL_RCC_OscConfig+0x29c>)
 8004792:	5cd3      	ldrb	r3, [r2, r3]
 8004794:	f003 031f 	and.w	r3, r3, #31
 8004798:	fa21 f303 	lsr.w	r3, r1, r3
 800479c:	4a58      	ldr	r2, [pc, #352]	; (8004900 <HAL_RCC_OscConfig+0x2a0>)
 800479e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80047a0:	4b58      	ldr	r3, [pc, #352]	; (8004904 <HAL_RCC_OscConfig+0x2a4>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4618      	mov	r0, r3
 80047a6:	f7fd fcad 	bl	8002104 <HAL_InitTick>
 80047aa:	4603      	mov	r3, r0
 80047ac:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80047ae:	7bfb      	ldrb	r3, [r7, #15]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d052      	beq.n	800485a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80047b4:	7bfb      	ldrb	r3, [r7, #15]
 80047b6:	e331      	b.n	8004e1c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d032      	beq.n	8004826 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80047c0:	4b4d      	ldr	r3, [pc, #308]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a4c      	ldr	r2, [pc, #304]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 80047c6:	f043 0301 	orr.w	r3, r3, #1
 80047ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80047cc:	f7fe fa20 	bl	8002c10 <HAL_GetTick>
 80047d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80047d2:	e008      	b.n	80047e6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80047d4:	f7fe fa1c 	bl	8002c10 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e31a      	b.n	8004e1c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80047e6:	4b44      	ldr	r3, [pc, #272]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d0f0      	beq.n	80047d4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80047f2:	4b41      	ldr	r3, [pc, #260]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a40      	ldr	r2, [pc, #256]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 80047f8:	f043 0308 	orr.w	r3, r3, #8
 80047fc:	6013      	str	r3, [r2, #0]
 80047fe:	4b3e      	ldr	r3, [pc, #248]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a1b      	ldr	r3, [r3, #32]
 800480a:	493b      	ldr	r1, [pc, #236]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 800480c:	4313      	orrs	r3, r2
 800480e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004810:	4b39      	ldr	r3, [pc, #228]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	69db      	ldr	r3, [r3, #28]
 800481c:	021b      	lsls	r3, r3, #8
 800481e:	4936      	ldr	r1, [pc, #216]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 8004820:	4313      	orrs	r3, r2
 8004822:	604b      	str	r3, [r1, #4]
 8004824:	e01a      	b.n	800485c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004826:	4b34      	ldr	r3, [pc, #208]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a33      	ldr	r2, [pc, #204]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 800482c:	f023 0301 	bic.w	r3, r3, #1
 8004830:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004832:	f7fe f9ed 	bl	8002c10 <HAL_GetTick>
 8004836:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004838:	e008      	b.n	800484c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800483a:	f7fe f9e9 	bl	8002c10 <HAL_GetTick>
 800483e:	4602      	mov	r2, r0
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	2b02      	cmp	r3, #2
 8004846:	d901      	bls.n	800484c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e2e7      	b.n	8004e1c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800484c:	4b2a      	ldr	r3, [pc, #168]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0302 	and.w	r3, r3, #2
 8004854:	2b00      	cmp	r3, #0
 8004856:	d1f0      	bne.n	800483a <HAL_RCC_OscConfig+0x1da>
 8004858:	e000      	b.n	800485c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800485a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0301 	and.w	r3, r3, #1
 8004864:	2b00      	cmp	r3, #0
 8004866:	d074      	beq.n	8004952 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	2b08      	cmp	r3, #8
 800486c:	d005      	beq.n	800487a <HAL_RCC_OscConfig+0x21a>
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	2b0c      	cmp	r3, #12
 8004872:	d10e      	bne.n	8004892 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	2b03      	cmp	r3, #3
 8004878:	d10b      	bne.n	8004892 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800487a:	4b1f      	ldr	r3, [pc, #124]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d064      	beq.n	8004950 <HAL_RCC_OscConfig+0x2f0>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d160      	bne.n	8004950 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e2c4      	b.n	8004e1c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800489a:	d106      	bne.n	80048aa <HAL_RCC_OscConfig+0x24a>
 800489c:	4b16      	ldr	r3, [pc, #88]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a15      	ldr	r2, [pc, #84]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 80048a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048a6:	6013      	str	r3, [r2, #0]
 80048a8:	e01d      	b.n	80048e6 <HAL_RCC_OscConfig+0x286>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048b2:	d10c      	bne.n	80048ce <HAL_RCC_OscConfig+0x26e>
 80048b4:	4b10      	ldr	r3, [pc, #64]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a0f      	ldr	r2, [pc, #60]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 80048ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048be:	6013      	str	r3, [r2, #0]
 80048c0:	4b0d      	ldr	r3, [pc, #52]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a0c      	ldr	r2, [pc, #48]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 80048c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048ca:	6013      	str	r3, [r2, #0]
 80048cc:	e00b      	b.n	80048e6 <HAL_RCC_OscConfig+0x286>
 80048ce:	4b0a      	ldr	r3, [pc, #40]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a09      	ldr	r2, [pc, #36]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 80048d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048d8:	6013      	str	r3, [r2, #0]
 80048da:	4b07      	ldr	r3, [pc, #28]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a06      	ldr	r2, [pc, #24]	; (80048f8 <HAL_RCC_OscConfig+0x298>)
 80048e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048e4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d01c      	beq.n	8004928 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ee:	f7fe f98f 	bl	8002c10 <HAL_GetTick>
 80048f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048f4:	e011      	b.n	800491a <HAL_RCC_OscConfig+0x2ba>
 80048f6:	bf00      	nop
 80048f8:	40021000 	.word	0x40021000
 80048fc:	0800a788 	.word	0x0800a788
 8004900:	20000000 	.word	0x20000000
 8004904:	2000002c 	.word	0x2000002c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004908:	f7fe f982 	bl	8002c10 <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	2b64      	cmp	r3, #100	; 0x64
 8004914:	d901      	bls.n	800491a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e280      	b.n	8004e1c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800491a:	4baf      	ldr	r3, [pc, #700]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d0f0      	beq.n	8004908 <HAL_RCC_OscConfig+0x2a8>
 8004926:	e014      	b.n	8004952 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004928:	f7fe f972 	bl	8002c10 <HAL_GetTick>
 800492c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800492e:	e008      	b.n	8004942 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004930:	f7fe f96e 	bl	8002c10 <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	2b64      	cmp	r3, #100	; 0x64
 800493c:	d901      	bls.n	8004942 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e26c      	b.n	8004e1c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004942:	4ba5      	ldr	r3, [pc, #660]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d1f0      	bne.n	8004930 <HAL_RCC_OscConfig+0x2d0>
 800494e:	e000      	b.n	8004952 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004950:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	2b00      	cmp	r3, #0
 800495c:	d060      	beq.n	8004a20 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	2b04      	cmp	r3, #4
 8004962:	d005      	beq.n	8004970 <HAL_RCC_OscConfig+0x310>
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	2b0c      	cmp	r3, #12
 8004968:	d119      	bne.n	800499e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	2b02      	cmp	r3, #2
 800496e:	d116      	bne.n	800499e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004970:	4b99      	ldr	r3, [pc, #612]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004978:	2b00      	cmp	r3, #0
 800497a:	d005      	beq.n	8004988 <HAL_RCC_OscConfig+0x328>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d101      	bne.n	8004988 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e249      	b.n	8004e1c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004988:	4b93      	ldr	r3, [pc, #588]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	061b      	lsls	r3, r3, #24
 8004996:	4990      	ldr	r1, [pc, #576]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 8004998:	4313      	orrs	r3, r2
 800499a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800499c:	e040      	b.n	8004a20 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d023      	beq.n	80049ee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049a6:	4b8c      	ldr	r3, [pc, #560]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a8b      	ldr	r2, [pc, #556]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 80049ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b2:	f7fe f92d 	bl	8002c10 <HAL_GetTick>
 80049b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049b8:	e008      	b.n	80049cc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049ba:	f7fe f929 	bl	8002c10 <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d901      	bls.n	80049cc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e227      	b.n	8004e1c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049cc:	4b82      	ldr	r3, [pc, #520]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d0f0      	beq.n	80049ba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049d8:	4b7f      	ldr	r3, [pc, #508]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	061b      	lsls	r3, r3, #24
 80049e6:	497c      	ldr	r1, [pc, #496]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	604b      	str	r3, [r1, #4]
 80049ec:	e018      	b.n	8004a20 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049ee:	4b7a      	ldr	r3, [pc, #488]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a79      	ldr	r2, [pc, #484]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 80049f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049fa:	f7fe f909 	bl	8002c10 <HAL_GetTick>
 80049fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a00:	e008      	b.n	8004a14 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a02:	f7fe f905 	bl	8002c10 <HAL_GetTick>
 8004a06:	4602      	mov	r2, r0
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d901      	bls.n	8004a14 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e203      	b.n	8004e1c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a14:	4b70      	ldr	r3, [pc, #448]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1f0      	bne.n	8004a02 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0308 	and.w	r3, r3, #8
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d03c      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	695b      	ldr	r3, [r3, #20]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d01c      	beq.n	8004a6e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a34:	4b68      	ldr	r3, [pc, #416]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 8004a36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a3a:	4a67      	ldr	r2, [pc, #412]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 8004a3c:	f043 0301 	orr.w	r3, r3, #1
 8004a40:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a44:	f7fe f8e4 	bl	8002c10 <HAL_GetTick>
 8004a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a4a:	e008      	b.n	8004a5e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a4c:	f7fe f8e0 	bl	8002c10 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e1de      	b.n	8004e1c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a5e:	4b5e      	ldr	r3, [pc, #376]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 8004a60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a64:	f003 0302 	and.w	r3, r3, #2
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d0ef      	beq.n	8004a4c <HAL_RCC_OscConfig+0x3ec>
 8004a6c:	e01b      	b.n	8004aa6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a6e:	4b5a      	ldr	r3, [pc, #360]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 8004a70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a74:	4a58      	ldr	r2, [pc, #352]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 8004a76:	f023 0301 	bic.w	r3, r3, #1
 8004a7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a7e:	f7fe f8c7 	bl	8002c10 <HAL_GetTick>
 8004a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a84:	e008      	b.n	8004a98 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a86:	f7fe f8c3 	bl	8002c10 <HAL_GetTick>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	d901      	bls.n	8004a98 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	e1c1      	b.n	8004e1c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a98:	4b4f      	ldr	r3, [pc, #316]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 8004a9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a9e:	f003 0302 	and.w	r3, r3, #2
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1ef      	bne.n	8004a86 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0304 	and.w	r3, r3, #4
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	f000 80a6 	beq.w	8004c00 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004ab8:	4b47      	ldr	r3, [pc, #284]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 8004aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d10d      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ac4:	4b44      	ldr	r3, [pc, #272]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 8004ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac8:	4a43      	ldr	r2, [pc, #268]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 8004aca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ace:	6593      	str	r3, [r2, #88]	; 0x58
 8004ad0:	4b41      	ldr	r3, [pc, #260]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 8004ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ad8:	60bb      	str	r3, [r7, #8]
 8004ada:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004adc:	2301      	movs	r3, #1
 8004ade:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ae0:	4b3e      	ldr	r3, [pc, #248]	; (8004bdc <HAL_RCC_OscConfig+0x57c>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d118      	bne.n	8004b1e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004aec:	4b3b      	ldr	r3, [pc, #236]	; (8004bdc <HAL_RCC_OscConfig+0x57c>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a3a      	ldr	r2, [pc, #232]	; (8004bdc <HAL_RCC_OscConfig+0x57c>)
 8004af2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004af6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004af8:	f7fe f88a 	bl	8002c10 <HAL_GetTick>
 8004afc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004afe:	e008      	b.n	8004b12 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b00:	f7fe f886 	bl	8002c10 <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e184      	b.n	8004e1c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b12:	4b32      	ldr	r3, [pc, #200]	; (8004bdc <HAL_RCC_OscConfig+0x57c>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d0f0      	beq.n	8004b00 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d108      	bne.n	8004b38 <HAL_RCC_OscConfig+0x4d8>
 8004b26:	4b2c      	ldr	r3, [pc, #176]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 8004b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b2c:	4a2a      	ldr	r2, [pc, #168]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 8004b2e:	f043 0301 	orr.w	r3, r3, #1
 8004b32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b36:	e024      	b.n	8004b82 <HAL_RCC_OscConfig+0x522>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	2b05      	cmp	r3, #5
 8004b3e:	d110      	bne.n	8004b62 <HAL_RCC_OscConfig+0x502>
 8004b40:	4b25      	ldr	r3, [pc, #148]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 8004b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b46:	4a24      	ldr	r2, [pc, #144]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 8004b48:	f043 0304 	orr.w	r3, r3, #4
 8004b4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b50:	4b21      	ldr	r3, [pc, #132]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 8004b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b56:	4a20      	ldr	r2, [pc, #128]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 8004b58:	f043 0301 	orr.w	r3, r3, #1
 8004b5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b60:	e00f      	b.n	8004b82 <HAL_RCC_OscConfig+0x522>
 8004b62:	4b1d      	ldr	r3, [pc, #116]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 8004b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b68:	4a1b      	ldr	r2, [pc, #108]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 8004b6a:	f023 0301 	bic.w	r3, r3, #1
 8004b6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b72:	4b19      	ldr	r3, [pc, #100]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 8004b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b78:	4a17      	ldr	r2, [pc, #92]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 8004b7a:	f023 0304 	bic.w	r3, r3, #4
 8004b7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d016      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b8a:	f7fe f841 	bl	8002c10 <HAL_GetTick>
 8004b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b90:	e00a      	b.n	8004ba8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b92:	f7fe f83d 	bl	8002c10 <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d901      	bls.n	8004ba8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e139      	b.n	8004e1c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ba8:	4b0b      	ldr	r3, [pc, #44]	; (8004bd8 <HAL_RCC_OscConfig+0x578>)
 8004baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bae:	f003 0302 	and.w	r3, r3, #2
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d0ed      	beq.n	8004b92 <HAL_RCC_OscConfig+0x532>
 8004bb6:	e01a      	b.n	8004bee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bb8:	f7fe f82a 	bl	8002c10 <HAL_GetTick>
 8004bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004bbe:	e00f      	b.n	8004be0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bc0:	f7fe f826 	bl	8002c10 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d906      	bls.n	8004be0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e122      	b.n	8004e1c <HAL_RCC_OscConfig+0x7bc>
 8004bd6:	bf00      	nop
 8004bd8:	40021000 	.word	0x40021000
 8004bdc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004be0:	4b90      	ldr	r3, [pc, #576]	; (8004e24 <HAL_RCC_OscConfig+0x7c4>)
 8004be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be6:	f003 0302 	and.w	r3, r3, #2
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d1e8      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bee:	7ffb      	ldrb	r3, [r7, #31]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d105      	bne.n	8004c00 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bf4:	4b8b      	ldr	r3, [pc, #556]	; (8004e24 <HAL_RCC_OscConfig+0x7c4>)
 8004bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf8:	4a8a      	ldr	r2, [pc, #552]	; (8004e24 <HAL_RCC_OscConfig+0x7c4>)
 8004bfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bfe:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	f000 8108 	beq.w	8004e1a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	f040 80d0 	bne.w	8004db4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004c14:	4b83      	ldr	r3, [pc, #524]	; (8004e24 <HAL_RCC_OscConfig+0x7c4>)
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	f003 0203 	and.w	r2, r3, #3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d130      	bne.n	8004c8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c32:	3b01      	subs	r3, #1
 8004c34:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d127      	bne.n	8004c8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c44:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d11f      	bne.n	8004c8a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c54:	2a07      	cmp	r2, #7
 8004c56:	bf14      	ite	ne
 8004c58:	2201      	movne	r2, #1
 8004c5a:	2200      	moveq	r2, #0
 8004c5c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d113      	bne.n	8004c8a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c6c:	085b      	lsrs	r3, r3, #1
 8004c6e:	3b01      	subs	r3, #1
 8004c70:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d109      	bne.n	8004c8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c80:	085b      	lsrs	r3, r3, #1
 8004c82:	3b01      	subs	r3, #1
 8004c84:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d06e      	beq.n	8004d68 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	2b0c      	cmp	r3, #12
 8004c8e:	d069      	beq.n	8004d64 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004c90:	4b64      	ldr	r3, [pc, #400]	; (8004e24 <HAL_RCC_OscConfig+0x7c4>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d105      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004c9c:	4b61      	ldr	r3, [pc, #388]	; (8004e24 <HAL_RCC_OscConfig+0x7c4>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d001      	beq.n	8004cac <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e0b7      	b.n	8004e1c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004cac:	4b5d      	ldr	r3, [pc, #372]	; (8004e24 <HAL_RCC_OscConfig+0x7c4>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a5c      	ldr	r2, [pc, #368]	; (8004e24 <HAL_RCC_OscConfig+0x7c4>)
 8004cb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cb6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004cb8:	f7fd ffaa 	bl	8002c10 <HAL_GetTick>
 8004cbc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cbe:	e008      	b.n	8004cd2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cc0:	f7fd ffa6 	bl	8002c10 <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d901      	bls.n	8004cd2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e0a4      	b.n	8004e1c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cd2:	4b54      	ldr	r3, [pc, #336]	; (8004e24 <HAL_RCC_OscConfig+0x7c4>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d1f0      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cde:	4b51      	ldr	r3, [pc, #324]	; (8004e24 <HAL_RCC_OscConfig+0x7c4>)
 8004ce0:	68da      	ldr	r2, [r3, #12]
 8004ce2:	4b51      	ldr	r3, [pc, #324]	; (8004e28 <HAL_RCC_OscConfig+0x7c8>)
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004cee:	3a01      	subs	r2, #1
 8004cf0:	0112      	lsls	r2, r2, #4
 8004cf2:	4311      	orrs	r1, r2
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004cf8:	0212      	lsls	r2, r2, #8
 8004cfa:	4311      	orrs	r1, r2
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004d00:	0852      	lsrs	r2, r2, #1
 8004d02:	3a01      	subs	r2, #1
 8004d04:	0552      	lsls	r2, r2, #21
 8004d06:	4311      	orrs	r1, r2
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004d0c:	0852      	lsrs	r2, r2, #1
 8004d0e:	3a01      	subs	r2, #1
 8004d10:	0652      	lsls	r2, r2, #25
 8004d12:	4311      	orrs	r1, r2
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d18:	0912      	lsrs	r2, r2, #4
 8004d1a:	0452      	lsls	r2, r2, #17
 8004d1c:	430a      	orrs	r2, r1
 8004d1e:	4941      	ldr	r1, [pc, #260]	; (8004e24 <HAL_RCC_OscConfig+0x7c4>)
 8004d20:	4313      	orrs	r3, r2
 8004d22:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004d24:	4b3f      	ldr	r3, [pc, #252]	; (8004e24 <HAL_RCC_OscConfig+0x7c4>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a3e      	ldr	r2, [pc, #248]	; (8004e24 <HAL_RCC_OscConfig+0x7c4>)
 8004d2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d2e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d30:	4b3c      	ldr	r3, [pc, #240]	; (8004e24 <HAL_RCC_OscConfig+0x7c4>)
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	4a3b      	ldr	r2, [pc, #236]	; (8004e24 <HAL_RCC_OscConfig+0x7c4>)
 8004d36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d3a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004d3c:	f7fd ff68 	bl	8002c10 <HAL_GetTick>
 8004d40:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d42:	e008      	b.n	8004d56 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d44:	f7fd ff64 	bl	8002c10 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d901      	bls.n	8004d56 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e062      	b.n	8004e1c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d56:	4b33      	ldr	r3, [pc, #204]	; (8004e24 <HAL_RCC_OscConfig+0x7c4>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d0f0      	beq.n	8004d44 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d62:	e05a      	b.n	8004e1a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e059      	b.n	8004e1c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d68:	4b2e      	ldr	r3, [pc, #184]	; (8004e24 <HAL_RCC_OscConfig+0x7c4>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d152      	bne.n	8004e1a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004d74:	4b2b      	ldr	r3, [pc, #172]	; (8004e24 <HAL_RCC_OscConfig+0x7c4>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a2a      	ldr	r2, [pc, #168]	; (8004e24 <HAL_RCC_OscConfig+0x7c4>)
 8004d7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d7e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d80:	4b28      	ldr	r3, [pc, #160]	; (8004e24 <HAL_RCC_OscConfig+0x7c4>)
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	4a27      	ldr	r2, [pc, #156]	; (8004e24 <HAL_RCC_OscConfig+0x7c4>)
 8004d86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d8a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d8c:	f7fd ff40 	bl	8002c10 <HAL_GetTick>
 8004d90:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d92:	e008      	b.n	8004da6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d94:	f7fd ff3c 	bl	8002c10 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d901      	bls.n	8004da6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e03a      	b.n	8004e1c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004da6:	4b1f      	ldr	r3, [pc, #124]	; (8004e24 <HAL_RCC_OscConfig+0x7c4>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d0f0      	beq.n	8004d94 <HAL_RCC_OscConfig+0x734>
 8004db2:	e032      	b.n	8004e1a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	2b0c      	cmp	r3, #12
 8004db8:	d02d      	beq.n	8004e16 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dba:	4b1a      	ldr	r3, [pc, #104]	; (8004e24 <HAL_RCC_OscConfig+0x7c4>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a19      	ldr	r2, [pc, #100]	; (8004e24 <HAL_RCC_OscConfig+0x7c4>)
 8004dc0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004dc4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004dc6:	4b17      	ldr	r3, [pc, #92]	; (8004e24 <HAL_RCC_OscConfig+0x7c4>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d105      	bne.n	8004dde <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004dd2:	4b14      	ldr	r3, [pc, #80]	; (8004e24 <HAL_RCC_OscConfig+0x7c4>)
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	4a13      	ldr	r2, [pc, #76]	; (8004e24 <HAL_RCC_OscConfig+0x7c4>)
 8004dd8:	f023 0303 	bic.w	r3, r3, #3
 8004ddc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004dde:	4b11      	ldr	r3, [pc, #68]	; (8004e24 <HAL_RCC_OscConfig+0x7c4>)
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	4a10      	ldr	r2, [pc, #64]	; (8004e24 <HAL_RCC_OscConfig+0x7c4>)
 8004de4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004de8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dec:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dee:	f7fd ff0f 	bl	8002c10 <HAL_GetTick>
 8004df2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004df4:	e008      	b.n	8004e08 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004df6:	f7fd ff0b 	bl	8002c10 <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d901      	bls.n	8004e08 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e009      	b.n	8004e1c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e08:	4b06      	ldr	r3, [pc, #24]	; (8004e24 <HAL_RCC_OscConfig+0x7c4>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d1f0      	bne.n	8004df6 <HAL_RCC_OscConfig+0x796>
 8004e14:	e001      	b.n	8004e1a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e000      	b.n	8004e1c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3720      	adds	r7, #32
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	40021000 	.word	0x40021000
 8004e28:	f99d808c 	.word	0xf99d808c

08004e2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d101      	bne.n	8004e40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e0c8      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e40:	4b66      	ldr	r3, [pc, #408]	; (8004fdc <HAL_RCC_ClockConfig+0x1b0>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0307 	and.w	r3, r3, #7
 8004e48:	683a      	ldr	r2, [r7, #0]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d910      	bls.n	8004e70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e4e:	4b63      	ldr	r3, [pc, #396]	; (8004fdc <HAL_RCC_ClockConfig+0x1b0>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f023 0207 	bic.w	r2, r3, #7
 8004e56:	4961      	ldr	r1, [pc, #388]	; (8004fdc <HAL_RCC_ClockConfig+0x1b0>)
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e5e:	4b5f      	ldr	r3, [pc, #380]	; (8004fdc <HAL_RCC_ClockConfig+0x1b0>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0307 	and.w	r3, r3, #7
 8004e66:	683a      	ldr	r2, [r7, #0]
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d001      	beq.n	8004e70 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e0b0      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0301 	and.w	r3, r3, #1
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d04c      	beq.n	8004f16 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	2b03      	cmp	r3, #3
 8004e82:	d107      	bne.n	8004e94 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e84:	4b56      	ldr	r3, [pc, #344]	; (8004fe0 <HAL_RCC_ClockConfig+0x1b4>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d121      	bne.n	8004ed4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e09e      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d107      	bne.n	8004eac <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e9c:	4b50      	ldr	r3, [pc, #320]	; (8004fe0 <HAL_RCC_ClockConfig+0x1b4>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d115      	bne.n	8004ed4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e092      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d107      	bne.n	8004ec4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004eb4:	4b4a      	ldr	r3, [pc, #296]	; (8004fe0 <HAL_RCC_ClockConfig+0x1b4>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0302 	and.w	r3, r3, #2
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d109      	bne.n	8004ed4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e086      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ec4:	4b46      	ldr	r3, [pc, #280]	; (8004fe0 <HAL_RCC_ClockConfig+0x1b4>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d101      	bne.n	8004ed4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e07e      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ed4:	4b42      	ldr	r3, [pc, #264]	; (8004fe0 <HAL_RCC_ClockConfig+0x1b4>)
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	f023 0203 	bic.w	r2, r3, #3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	493f      	ldr	r1, [pc, #252]	; (8004fe0 <HAL_RCC_ClockConfig+0x1b4>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ee6:	f7fd fe93 	bl	8002c10 <HAL_GetTick>
 8004eea:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eec:	e00a      	b.n	8004f04 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004eee:	f7fd fe8f 	bl	8002c10 <HAL_GetTick>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d901      	bls.n	8004f04 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004f00:	2303      	movs	r3, #3
 8004f02:	e066      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f04:	4b36      	ldr	r3, [pc, #216]	; (8004fe0 <HAL_RCC_ClockConfig+0x1b4>)
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f003 020c 	and.w	r2, r3, #12
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d1eb      	bne.n	8004eee <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0302 	and.w	r3, r3, #2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d008      	beq.n	8004f34 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f22:	4b2f      	ldr	r3, [pc, #188]	; (8004fe0 <HAL_RCC_ClockConfig+0x1b4>)
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	492c      	ldr	r1, [pc, #176]	; (8004fe0 <HAL_RCC_ClockConfig+0x1b4>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f34:	4b29      	ldr	r3, [pc, #164]	; (8004fdc <HAL_RCC_ClockConfig+0x1b0>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0307 	and.w	r3, r3, #7
 8004f3c:	683a      	ldr	r2, [r7, #0]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d210      	bcs.n	8004f64 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f42:	4b26      	ldr	r3, [pc, #152]	; (8004fdc <HAL_RCC_ClockConfig+0x1b0>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f023 0207 	bic.w	r2, r3, #7
 8004f4a:	4924      	ldr	r1, [pc, #144]	; (8004fdc <HAL_RCC_ClockConfig+0x1b0>)
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f52:	4b22      	ldr	r3, [pc, #136]	; (8004fdc <HAL_RCC_ClockConfig+0x1b0>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0307 	and.w	r3, r3, #7
 8004f5a:	683a      	ldr	r2, [r7, #0]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d001      	beq.n	8004f64 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e036      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0304 	and.w	r3, r3, #4
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d008      	beq.n	8004f82 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f70:	4b1b      	ldr	r3, [pc, #108]	; (8004fe0 <HAL_RCC_ClockConfig+0x1b4>)
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	4918      	ldr	r1, [pc, #96]	; (8004fe0 <HAL_RCC_ClockConfig+0x1b4>)
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 0308 	and.w	r3, r3, #8
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d009      	beq.n	8004fa2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f8e:	4b14      	ldr	r3, [pc, #80]	; (8004fe0 <HAL_RCC_ClockConfig+0x1b4>)
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	00db      	lsls	r3, r3, #3
 8004f9c:	4910      	ldr	r1, [pc, #64]	; (8004fe0 <HAL_RCC_ClockConfig+0x1b4>)
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004fa2:	f000 f825 	bl	8004ff0 <HAL_RCC_GetSysClockFreq>
 8004fa6:	4601      	mov	r1, r0
 8004fa8:	4b0d      	ldr	r3, [pc, #52]	; (8004fe0 <HAL_RCC_ClockConfig+0x1b4>)
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	091b      	lsrs	r3, r3, #4
 8004fae:	f003 030f 	and.w	r3, r3, #15
 8004fb2:	4a0c      	ldr	r2, [pc, #48]	; (8004fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8004fb4:	5cd3      	ldrb	r3, [r2, r3]
 8004fb6:	f003 031f 	and.w	r3, r3, #31
 8004fba:	fa21 f303 	lsr.w	r3, r1, r3
 8004fbe:	4a0a      	ldr	r2, [pc, #40]	; (8004fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8004fc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004fc2:	4b0a      	ldr	r3, [pc, #40]	; (8004fec <HAL_RCC_ClockConfig+0x1c0>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f7fd f89c 	bl	8002104 <HAL_InitTick>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	72fb      	strb	r3, [r7, #11]

  return status;
 8004fd0:	7afb      	ldrb	r3, [r7, #11]
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3710      	adds	r7, #16
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	40022000 	.word	0x40022000
 8004fe0:	40021000 	.word	0x40021000
 8004fe4:	0800a788 	.word	0x0800a788
 8004fe8:	20000000 	.word	0x20000000
 8004fec:	2000002c 	.word	0x2000002c

08004ff0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b089      	sub	sp, #36	; 0x24
 8004ff4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	61fb      	str	r3, [r7, #28]
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ffe:	4b3d      	ldr	r3, [pc, #244]	; (80050f4 <HAL_RCC_GetSysClockFreq+0x104>)
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f003 030c 	and.w	r3, r3, #12
 8005006:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005008:	4b3a      	ldr	r3, [pc, #232]	; (80050f4 <HAL_RCC_GetSysClockFreq+0x104>)
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	f003 0303 	and.w	r3, r3, #3
 8005010:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d005      	beq.n	8005024 <HAL_RCC_GetSysClockFreq+0x34>
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	2b0c      	cmp	r3, #12
 800501c:	d121      	bne.n	8005062 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2b01      	cmp	r3, #1
 8005022:	d11e      	bne.n	8005062 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005024:	4b33      	ldr	r3, [pc, #204]	; (80050f4 <HAL_RCC_GetSysClockFreq+0x104>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0308 	and.w	r3, r3, #8
 800502c:	2b00      	cmp	r3, #0
 800502e:	d107      	bne.n	8005040 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005030:	4b30      	ldr	r3, [pc, #192]	; (80050f4 <HAL_RCC_GetSysClockFreq+0x104>)
 8005032:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005036:	0a1b      	lsrs	r3, r3, #8
 8005038:	f003 030f 	and.w	r3, r3, #15
 800503c:	61fb      	str	r3, [r7, #28]
 800503e:	e005      	b.n	800504c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005040:	4b2c      	ldr	r3, [pc, #176]	; (80050f4 <HAL_RCC_GetSysClockFreq+0x104>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	091b      	lsrs	r3, r3, #4
 8005046:	f003 030f 	and.w	r3, r3, #15
 800504a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800504c:	4a2a      	ldr	r2, [pc, #168]	; (80050f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005054:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d10d      	bne.n	8005078 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005060:	e00a      	b.n	8005078 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	2b04      	cmp	r3, #4
 8005066:	d102      	bne.n	800506e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005068:	4b24      	ldr	r3, [pc, #144]	; (80050fc <HAL_RCC_GetSysClockFreq+0x10c>)
 800506a:	61bb      	str	r3, [r7, #24]
 800506c:	e004      	b.n	8005078 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	2b08      	cmp	r3, #8
 8005072:	d101      	bne.n	8005078 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005074:	4b22      	ldr	r3, [pc, #136]	; (8005100 <HAL_RCC_GetSysClockFreq+0x110>)
 8005076:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	2b0c      	cmp	r3, #12
 800507c:	d133      	bne.n	80050e6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800507e:	4b1d      	ldr	r3, [pc, #116]	; (80050f4 <HAL_RCC_GetSysClockFreq+0x104>)
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	f003 0303 	and.w	r3, r3, #3
 8005086:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	2b02      	cmp	r3, #2
 800508c:	d002      	beq.n	8005094 <HAL_RCC_GetSysClockFreq+0xa4>
 800508e:	2b03      	cmp	r3, #3
 8005090:	d003      	beq.n	800509a <HAL_RCC_GetSysClockFreq+0xaa>
 8005092:	e005      	b.n	80050a0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005094:	4b19      	ldr	r3, [pc, #100]	; (80050fc <HAL_RCC_GetSysClockFreq+0x10c>)
 8005096:	617b      	str	r3, [r7, #20]
      break;
 8005098:	e005      	b.n	80050a6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800509a:	4b19      	ldr	r3, [pc, #100]	; (8005100 <HAL_RCC_GetSysClockFreq+0x110>)
 800509c:	617b      	str	r3, [r7, #20]
      break;
 800509e:	e002      	b.n	80050a6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	617b      	str	r3, [r7, #20]
      break;
 80050a4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80050a6:	4b13      	ldr	r3, [pc, #76]	; (80050f4 <HAL_RCC_GetSysClockFreq+0x104>)
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	091b      	lsrs	r3, r3, #4
 80050ac:	f003 0307 	and.w	r3, r3, #7
 80050b0:	3301      	adds	r3, #1
 80050b2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80050b4:	4b0f      	ldr	r3, [pc, #60]	; (80050f4 <HAL_RCC_GetSysClockFreq+0x104>)
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	0a1b      	lsrs	r3, r3, #8
 80050ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050be:	697a      	ldr	r2, [r7, #20]
 80050c0:	fb02 f203 	mul.w	r2, r2, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ca:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80050cc:	4b09      	ldr	r3, [pc, #36]	; (80050f4 <HAL_RCC_GetSysClockFreq+0x104>)
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	0e5b      	lsrs	r3, r3, #25
 80050d2:	f003 0303 	and.w	r3, r3, #3
 80050d6:	3301      	adds	r3, #1
 80050d8:	005b      	lsls	r3, r3, #1
 80050da:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80050dc:	697a      	ldr	r2, [r7, #20]
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80050e6:	69bb      	ldr	r3, [r7, #24]
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3724      	adds	r7, #36	; 0x24
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr
 80050f4:	40021000 	.word	0x40021000
 80050f8:	0800a7a0 	.word	0x0800a7a0
 80050fc:	00f42400 	.word	0x00f42400
 8005100:	007a1200 	.word	0x007a1200

08005104 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005104:	b480      	push	{r7}
 8005106:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005108:	4b03      	ldr	r3, [pc, #12]	; (8005118 <HAL_RCC_GetHCLKFreq+0x14>)
 800510a:	681b      	ldr	r3, [r3, #0]
}
 800510c:	4618      	mov	r0, r3
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	20000000 	.word	0x20000000

0800511c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005120:	f7ff fff0 	bl	8005104 <HAL_RCC_GetHCLKFreq>
 8005124:	4601      	mov	r1, r0
 8005126:	4b06      	ldr	r3, [pc, #24]	; (8005140 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	0a1b      	lsrs	r3, r3, #8
 800512c:	f003 0307 	and.w	r3, r3, #7
 8005130:	4a04      	ldr	r2, [pc, #16]	; (8005144 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005132:	5cd3      	ldrb	r3, [r2, r3]
 8005134:	f003 031f 	and.w	r3, r3, #31
 8005138:	fa21 f303 	lsr.w	r3, r1, r3
}
 800513c:	4618      	mov	r0, r3
 800513e:	bd80      	pop	{r7, pc}
 8005140:	40021000 	.word	0x40021000
 8005144:	0800a798 	.word	0x0800a798

08005148 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800514c:	f7ff ffda 	bl	8005104 <HAL_RCC_GetHCLKFreq>
 8005150:	4601      	mov	r1, r0
 8005152:	4b06      	ldr	r3, [pc, #24]	; (800516c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	0adb      	lsrs	r3, r3, #11
 8005158:	f003 0307 	and.w	r3, r3, #7
 800515c:	4a04      	ldr	r2, [pc, #16]	; (8005170 <HAL_RCC_GetPCLK2Freq+0x28>)
 800515e:	5cd3      	ldrb	r3, [r2, r3]
 8005160:	f003 031f 	and.w	r3, r3, #31
 8005164:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005168:	4618      	mov	r0, r3
 800516a:	bd80      	pop	{r7, pc}
 800516c:	40021000 	.word	0x40021000
 8005170:	0800a798 	.word	0x0800a798

08005174 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	220f      	movs	r2, #15
 8005182:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005184:	4b12      	ldr	r3, [pc, #72]	; (80051d0 <HAL_RCC_GetClockConfig+0x5c>)
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f003 0203 	and.w	r2, r3, #3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005190:	4b0f      	ldr	r3, [pc, #60]	; (80051d0 <HAL_RCC_GetClockConfig+0x5c>)
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800519c:	4b0c      	ldr	r3, [pc, #48]	; (80051d0 <HAL_RCC_GetClockConfig+0x5c>)
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80051a8:	4b09      	ldr	r3, [pc, #36]	; (80051d0 <HAL_RCC_GetClockConfig+0x5c>)
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	08db      	lsrs	r3, r3, #3
 80051ae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80051b6:	4b07      	ldr	r3, [pc, #28]	; (80051d4 <HAL_RCC_GetClockConfig+0x60>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0207 	and.w	r2, r3, #7
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	601a      	str	r2, [r3, #0]
}
 80051c2:	bf00      	nop
 80051c4:	370c      	adds	r7, #12
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	40021000 	.word	0x40021000
 80051d4:	40022000 	.word	0x40022000

080051d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b086      	sub	sp, #24
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80051e0:	2300      	movs	r3, #0
 80051e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80051e4:	4b2a      	ldr	r3, [pc, #168]	; (8005290 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d003      	beq.n	80051f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80051f0:	f7ff f8fa 	bl	80043e8 <HAL_PWREx_GetVoltageRange>
 80051f4:	6178      	str	r0, [r7, #20]
 80051f6:	e014      	b.n	8005222 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80051f8:	4b25      	ldr	r3, [pc, #148]	; (8005290 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051fc:	4a24      	ldr	r2, [pc, #144]	; (8005290 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005202:	6593      	str	r3, [r2, #88]	; 0x58
 8005204:	4b22      	ldr	r3, [pc, #136]	; (8005290 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800520c:	60fb      	str	r3, [r7, #12]
 800520e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005210:	f7ff f8ea 	bl	80043e8 <HAL_PWREx_GetVoltageRange>
 8005214:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005216:	4b1e      	ldr	r3, [pc, #120]	; (8005290 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800521a:	4a1d      	ldr	r2, [pc, #116]	; (8005290 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800521c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005220:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005228:	d10b      	bne.n	8005242 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2b80      	cmp	r3, #128	; 0x80
 800522e:	d919      	bls.n	8005264 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2ba0      	cmp	r3, #160	; 0xa0
 8005234:	d902      	bls.n	800523c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005236:	2302      	movs	r3, #2
 8005238:	613b      	str	r3, [r7, #16]
 800523a:	e013      	b.n	8005264 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800523c:	2301      	movs	r3, #1
 800523e:	613b      	str	r3, [r7, #16]
 8005240:	e010      	b.n	8005264 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2b80      	cmp	r3, #128	; 0x80
 8005246:	d902      	bls.n	800524e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005248:	2303      	movs	r3, #3
 800524a:	613b      	str	r3, [r7, #16]
 800524c:	e00a      	b.n	8005264 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2b80      	cmp	r3, #128	; 0x80
 8005252:	d102      	bne.n	800525a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005254:	2302      	movs	r3, #2
 8005256:	613b      	str	r3, [r7, #16]
 8005258:	e004      	b.n	8005264 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2b70      	cmp	r3, #112	; 0x70
 800525e:	d101      	bne.n	8005264 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005260:	2301      	movs	r3, #1
 8005262:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005264:	4b0b      	ldr	r3, [pc, #44]	; (8005294 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f023 0207 	bic.w	r2, r3, #7
 800526c:	4909      	ldr	r1, [pc, #36]	; (8005294 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	4313      	orrs	r3, r2
 8005272:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005274:	4b07      	ldr	r3, [pc, #28]	; (8005294 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0307 	and.w	r3, r3, #7
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	429a      	cmp	r2, r3
 8005280:	d001      	beq.n	8005286 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e000      	b.n	8005288 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005286:	2300      	movs	r3, #0
}
 8005288:	4618      	mov	r0, r3
 800528a:	3718      	adds	r7, #24
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}
 8005290:	40021000 	.word	0x40021000
 8005294:	40022000 	.word	0x40022000

08005298 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b086      	sub	sp, #24
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80052a0:	2300      	movs	r3, #0
 80052a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80052a4:	2300      	movs	r3, #0
 80052a6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d03f      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052bc:	d01c      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80052be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052c2:	d802      	bhi.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x32>
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d00e      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80052c8:	e01f      	b.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x72>
 80052ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80052ce:	d003      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80052d0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80052d4:	d01c      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80052d6:	e018      	b.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80052d8:	4b85      	ldr	r3, [pc, #532]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	4a84      	ldr	r2, [pc, #528]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80052de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052e2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80052e4:	e015      	b.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	3304      	adds	r3, #4
 80052ea:	2100      	movs	r1, #0
 80052ec:	4618      	mov	r0, r3
 80052ee:	f000 fac9 	bl	8005884 <RCCEx_PLLSAI1_Config>
 80052f2:	4603      	mov	r3, r0
 80052f4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80052f6:	e00c      	b.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	3320      	adds	r3, #32
 80052fc:	2100      	movs	r1, #0
 80052fe:	4618      	mov	r0, r3
 8005300:	f000 fbb0 	bl	8005a64 <RCCEx_PLLSAI2_Config>
 8005304:	4603      	mov	r3, r0
 8005306:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005308:	e003      	b.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	74fb      	strb	r3, [r7, #19]
      break;
 800530e:	e000      	b.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8005310:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005312:	7cfb      	ldrb	r3, [r7, #19]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d10b      	bne.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005318:	4b75      	ldr	r3, [pc, #468]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800531a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800531e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005326:	4972      	ldr	r1, [pc, #456]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005328:	4313      	orrs	r3, r2
 800532a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800532e:	e001      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005330:	7cfb      	ldrb	r3, [r7, #19]
 8005332:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d03f      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005344:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005348:	d01c      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800534a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800534e:	d802      	bhi.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8005350:	2b00      	cmp	r3, #0
 8005352:	d00e      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8005354:	e01f      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005356:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800535a:	d003      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 800535c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005360:	d01c      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8005362:	e018      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005364:	4b62      	ldr	r3, [pc, #392]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	4a61      	ldr	r2, [pc, #388]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800536a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800536e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005370:	e015      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	3304      	adds	r3, #4
 8005376:	2100      	movs	r1, #0
 8005378:	4618      	mov	r0, r3
 800537a:	f000 fa83 	bl	8005884 <RCCEx_PLLSAI1_Config>
 800537e:	4603      	mov	r3, r0
 8005380:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005382:	e00c      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	3320      	adds	r3, #32
 8005388:	2100      	movs	r1, #0
 800538a:	4618      	mov	r0, r3
 800538c:	f000 fb6a 	bl	8005a64 <RCCEx_PLLSAI2_Config>
 8005390:	4603      	mov	r3, r0
 8005392:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005394:	e003      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	74fb      	strb	r3, [r7, #19]
      break;
 800539a:	e000      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800539c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800539e:	7cfb      	ldrb	r3, [r7, #19]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d10b      	bne.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80053a4:	4b52      	ldr	r3, [pc, #328]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80053a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053aa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053b2:	494f      	ldr	r1, [pc, #316]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80053b4:	4313      	orrs	r3, r2
 80053b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80053ba:	e001      	b.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053bc:	7cfb      	ldrb	r3, [r7, #19]
 80053be:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	f000 80a0 	beq.w	800550e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053ce:	2300      	movs	r3, #0
 80053d0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80053d2:	4b47      	ldr	r3, [pc, #284]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80053d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d101      	bne.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80053de:	2301      	movs	r3, #1
 80053e0:	e000      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80053e2:	2300      	movs	r3, #0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00d      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053e8:	4b41      	ldr	r3, [pc, #260]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80053ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ec:	4a40      	ldr	r2, [pc, #256]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80053ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053f2:	6593      	str	r3, [r2, #88]	; 0x58
 80053f4:	4b3e      	ldr	r3, [pc, #248]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80053f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053fc:	60bb      	str	r3, [r7, #8]
 80053fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005400:	2301      	movs	r3, #1
 8005402:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005404:	4b3b      	ldr	r3, [pc, #236]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a3a      	ldr	r2, [pc, #232]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800540a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800540e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005410:	f7fd fbfe 	bl	8002c10 <HAL_GetTick>
 8005414:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005416:	e009      	b.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005418:	f7fd fbfa 	bl	8002c10 <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	2b02      	cmp	r3, #2
 8005424:	d902      	bls.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	74fb      	strb	r3, [r7, #19]
        break;
 800542a:	e005      	b.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800542c:	4b31      	ldr	r3, [pc, #196]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005434:	2b00      	cmp	r3, #0
 8005436:	d0ef      	beq.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8005438:	7cfb      	ldrb	r3, [r7, #19]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d15c      	bne.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800543e:	4b2c      	ldr	r3, [pc, #176]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005444:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005448:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d01f      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005456:	697a      	ldr	r2, [r7, #20]
 8005458:	429a      	cmp	r2, r3
 800545a:	d019      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800545c:	4b24      	ldr	r3, [pc, #144]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800545e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005462:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005466:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005468:	4b21      	ldr	r3, [pc, #132]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800546a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800546e:	4a20      	ldr	r2, [pc, #128]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005474:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005478:	4b1d      	ldr	r3, [pc, #116]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800547a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800547e:	4a1c      	ldr	r2, [pc, #112]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005480:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005484:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005488:	4a19      	ldr	r2, [pc, #100]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	f003 0301 	and.w	r3, r3, #1
 8005496:	2b00      	cmp	r3, #0
 8005498:	d016      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800549a:	f7fd fbb9 	bl	8002c10 <HAL_GetTick>
 800549e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054a0:	e00b      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054a2:	f7fd fbb5 	bl	8002c10 <HAL_GetTick>
 80054a6:	4602      	mov	r2, r0
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d902      	bls.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	74fb      	strb	r3, [r7, #19]
            break;
 80054b8:	e006      	b.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054ba:	4b0d      	ldr	r3, [pc, #52]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80054bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054c0:	f003 0302 	and.w	r3, r3, #2
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d0ec      	beq.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80054c8:	7cfb      	ldrb	r3, [r7, #19]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d10c      	bne.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054ce:	4b08      	ldr	r3, [pc, #32]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80054d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054de:	4904      	ldr	r1, [pc, #16]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80054e0:	4313      	orrs	r3, r2
 80054e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80054e6:	e009      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80054e8:	7cfb      	ldrb	r3, [r7, #19]
 80054ea:	74bb      	strb	r3, [r7, #18]
 80054ec:	e006      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x264>
 80054ee:	bf00      	nop
 80054f0:	40021000 	.word	0x40021000
 80054f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054f8:	7cfb      	ldrb	r3, [r7, #19]
 80054fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80054fc:	7c7b      	ldrb	r3, [r7, #17]
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d105      	bne.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005502:	4b9e      	ldr	r3, [pc, #632]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005506:	4a9d      	ldr	r2, [pc, #628]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005508:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800550c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0301 	and.w	r3, r3, #1
 8005516:	2b00      	cmp	r3, #0
 8005518:	d00a      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800551a:	4b98      	ldr	r3, [pc, #608]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800551c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005520:	f023 0203 	bic.w	r2, r3, #3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005528:	4994      	ldr	r1, [pc, #592]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800552a:	4313      	orrs	r3, r2
 800552c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0302 	and.w	r3, r3, #2
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00a      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800553c:	4b8f      	ldr	r3, [pc, #572]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800553e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005542:	f023 020c 	bic.w	r2, r3, #12
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800554a:	498c      	ldr	r1, [pc, #560]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800554c:	4313      	orrs	r3, r2
 800554e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0304 	and.w	r3, r3, #4
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00a      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800555e:	4b87      	ldr	r3, [pc, #540]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005564:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556c:	4983      	ldr	r1, [pc, #524]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800556e:	4313      	orrs	r3, r2
 8005570:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0308 	and.w	r3, r3, #8
 800557c:	2b00      	cmp	r3, #0
 800557e:	d00a      	beq.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005580:	4b7e      	ldr	r3, [pc, #504]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005586:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800558e:	497b      	ldr	r1, [pc, #492]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005590:	4313      	orrs	r3, r2
 8005592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0310 	and.w	r3, r3, #16
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d00a      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80055a2:	4b76      	ldr	r3, [pc, #472]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80055a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055b0:	4972      	ldr	r1, [pc, #456]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0320 	and.w	r3, r3, #32
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d00a      	beq.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80055c4:	4b6d      	ldr	r3, [pc, #436]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80055c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055d2:	496a      	ldr	r1, [pc, #424]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80055d4:	4313      	orrs	r3, r2
 80055d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00a      	beq.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80055e6:	4b65      	ldr	r3, [pc, #404]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80055e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055f4:	4961      	ldr	r1, [pc, #388]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005604:	2b00      	cmp	r3, #0
 8005606:	d00a      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005608:	4b5c      	ldr	r3, [pc, #368]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800560a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800560e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005616:	4959      	ldr	r1, [pc, #356]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005618:	4313      	orrs	r3, r2
 800561a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005626:	2b00      	cmp	r3, #0
 8005628:	d00a      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800562a:	4b54      	ldr	r3, [pc, #336]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800562c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005630:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005638:	4950      	ldr	r1, [pc, #320]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800563a:	4313      	orrs	r3, r2
 800563c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005648:	2b00      	cmp	r3, #0
 800564a:	d00a      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800564c:	4b4b      	ldr	r3, [pc, #300]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800564e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005652:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800565a:	4948      	ldr	r1, [pc, #288]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800565c:	4313      	orrs	r3, r2
 800565e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800566a:	2b00      	cmp	r3, #0
 800566c:	d00a      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800566e:	4b43      	ldr	r3, [pc, #268]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005674:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800567c:	493f      	ldr	r1, [pc, #252]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800567e:	4313      	orrs	r3, r2
 8005680:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d028      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005690:	4b3a      	ldr	r3, [pc, #232]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005696:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800569e:	4937      	ldr	r1, [pc, #220]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80056a0:	4313      	orrs	r3, r2
 80056a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056ae:	d106      	bne.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056b0:	4b32      	ldr	r3, [pc, #200]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	4a31      	ldr	r2, [pc, #196]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80056b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056ba:	60d3      	str	r3, [r2, #12]
 80056bc:	e011      	b.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80056c6:	d10c      	bne.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	3304      	adds	r3, #4
 80056cc:	2101      	movs	r1, #1
 80056ce:	4618      	mov	r0, r3
 80056d0:	f000 f8d8 	bl	8005884 <RCCEx_PLLSAI1_Config>
 80056d4:	4603      	mov	r3, r0
 80056d6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80056d8:	7cfb      	ldrb	r3, [r7, #19]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d001      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80056de:	7cfb      	ldrb	r3, [r7, #19]
 80056e0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d028      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80056ee:	4b23      	ldr	r3, [pc, #140]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80056f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056f4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056fc:	491f      	ldr	r1, [pc, #124]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80056fe:	4313      	orrs	r3, r2
 8005700:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005708:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800570c:	d106      	bne.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800570e:	4b1b      	ldr	r3, [pc, #108]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	4a1a      	ldr	r2, [pc, #104]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005714:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005718:	60d3      	str	r3, [r2, #12]
 800571a:	e011      	b.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005720:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005724:	d10c      	bne.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	3304      	adds	r3, #4
 800572a:	2101      	movs	r1, #1
 800572c:	4618      	mov	r0, r3
 800572e:	f000 f8a9 	bl	8005884 <RCCEx_PLLSAI1_Config>
 8005732:	4603      	mov	r3, r0
 8005734:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005736:	7cfb      	ldrb	r3, [r7, #19]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d001      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 800573c:	7cfb      	ldrb	r3, [r7, #19]
 800573e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005748:	2b00      	cmp	r3, #0
 800574a:	d02b      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800574c:	4b0b      	ldr	r3, [pc, #44]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800574e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005752:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800575a:	4908      	ldr	r1, [pc, #32]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800575c:	4313      	orrs	r3, r2
 800575e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005766:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800576a:	d109      	bne.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800576c:	4b03      	ldr	r3, [pc, #12]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	4a02      	ldr	r2, [pc, #8]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005772:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005776:	60d3      	str	r3, [r2, #12]
 8005778:	e014      	b.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800577a:	bf00      	nop
 800577c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005784:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005788:	d10c      	bne.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	3304      	adds	r3, #4
 800578e:	2101      	movs	r1, #1
 8005790:	4618      	mov	r0, r3
 8005792:	f000 f877 	bl	8005884 <RCCEx_PLLSAI1_Config>
 8005796:	4603      	mov	r3, r0
 8005798:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800579a:	7cfb      	ldrb	r3, [r7, #19]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d001      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80057a0:	7cfb      	ldrb	r3, [r7, #19]
 80057a2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d02f      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80057b0:	4b2b      	ldr	r3, [pc, #172]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057b6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057be:	4928      	ldr	r1, [pc, #160]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057c0:	4313      	orrs	r3, r2
 80057c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057ce:	d10d      	bne.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	3304      	adds	r3, #4
 80057d4:	2102      	movs	r1, #2
 80057d6:	4618      	mov	r0, r3
 80057d8:	f000 f854 	bl	8005884 <RCCEx_PLLSAI1_Config>
 80057dc:	4603      	mov	r3, r0
 80057de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80057e0:	7cfb      	ldrb	r3, [r7, #19]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d014      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80057e6:	7cfb      	ldrb	r3, [r7, #19]
 80057e8:	74bb      	strb	r3, [r7, #18]
 80057ea:	e011      	b.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057f4:	d10c      	bne.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	3320      	adds	r3, #32
 80057fa:	2102      	movs	r1, #2
 80057fc:	4618      	mov	r0, r3
 80057fe:	f000 f931 	bl	8005a64 <RCCEx_PLLSAI2_Config>
 8005802:	4603      	mov	r3, r0
 8005804:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005806:	7cfb      	ldrb	r3, [r7, #19]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d001      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800580c:	7cfb      	ldrb	r3, [r7, #19]
 800580e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00a      	beq.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800581c:	4b10      	ldr	r3, [pc, #64]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800581e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005822:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800582a:	490d      	ldr	r1, [pc, #52]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800582c:	4313      	orrs	r3, r2
 800582e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00b      	beq.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800583e:	4b08      	ldr	r3, [pc, #32]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005844:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800584e:	4904      	ldr	r1, [pc, #16]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005850:	4313      	orrs	r3, r2
 8005852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005856:	7cbb      	ldrb	r3, [r7, #18]
}
 8005858:	4618      	mov	r0, r3
 800585a:	3718      	adds	r7, #24
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}
 8005860:	40021000 	.word	0x40021000

08005864 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005864:	b480      	push	{r7}
 8005866:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005868:	4b05      	ldr	r3, [pc, #20]	; (8005880 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a04      	ldr	r2, [pc, #16]	; (8005880 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800586e:	f043 0304 	orr.w	r3, r3, #4
 8005872:	6013      	str	r3, [r2, #0]
}
 8005874:	bf00      	nop
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr
 800587e:	bf00      	nop
 8005880:	40021000 	.word	0x40021000

08005884 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800588e:	2300      	movs	r3, #0
 8005890:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005892:	4b73      	ldr	r3, [pc, #460]	; (8005a60 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	f003 0303 	and.w	r3, r3, #3
 800589a:	2b00      	cmp	r3, #0
 800589c:	d018      	beq.n	80058d0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800589e:	4b70      	ldr	r3, [pc, #448]	; (8005a60 <RCCEx_PLLSAI1_Config+0x1dc>)
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	f003 0203 	and.w	r2, r3, #3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d10d      	bne.n	80058ca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
       ||
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d009      	beq.n	80058ca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80058b6:	4b6a      	ldr	r3, [pc, #424]	; (8005a60 <RCCEx_PLLSAI1_Config+0x1dc>)
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	091b      	lsrs	r3, r3, #4
 80058bc:	f003 0307 	and.w	r3, r3, #7
 80058c0:	1c5a      	adds	r2, r3, #1
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	685b      	ldr	r3, [r3, #4]
       ||
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d044      	beq.n	8005954 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	73fb      	strb	r3, [r7, #15]
 80058ce:	e041      	b.n	8005954 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d00c      	beq.n	80058f2 <RCCEx_PLLSAI1_Config+0x6e>
 80058d8:	2b03      	cmp	r3, #3
 80058da:	d013      	beq.n	8005904 <RCCEx_PLLSAI1_Config+0x80>
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d120      	bne.n	8005922 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80058e0:	4b5f      	ldr	r3, [pc, #380]	; (8005a60 <RCCEx_PLLSAI1_Config+0x1dc>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0302 	and.w	r3, r3, #2
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d11d      	bne.n	8005928 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058f0:	e01a      	b.n	8005928 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80058f2:	4b5b      	ldr	r3, [pc, #364]	; (8005a60 <RCCEx_PLLSAI1_Config+0x1dc>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d116      	bne.n	800592c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005902:	e013      	b.n	800592c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005904:	4b56      	ldr	r3, [pc, #344]	; (8005a60 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d10f      	bne.n	8005930 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005910:	4b53      	ldr	r3, [pc, #332]	; (8005a60 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005918:	2b00      	cmp	r3, #0
 800591a:	d109      	bne.n	8005930 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005920:	e006      	b.n	8005930 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	73fb      	strb	r3, [r7, #15]
      break;
 8005926:	e004      	b.n	8005932 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005928:	bf00      	nop
 800592a:	e002      	b.n	8005932 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800592c:	bf00      	nop
 800592e:	e000      	b.n	8005932 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005930:	bf00      	nop
    }

    if(status == HAL_OK)
 8005932:	7bfb      	ldrb	r3, [r7, #15]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d10d      	bne.n	8005954 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005938:	4b49      	ldr	r3, [pc, #292]	; (8005a60 <RCCEx_PLLSAI1_Config+0x1dc>)
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6819      	ldr	r1, [r3, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	3b01      	subs	r3, #1
 800594a:	011b      	lsls	r3, r3, #4
 800594c:	430b      	orrs	r3, r1
 800594e:	4944      	ldr	r1, [pc, #272]	; (8005a60 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005950:	4313      	orrs	r3, r2
 8005952:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005954:	7bfb      	ldrb	r3, [r7, #15]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d17d      	bne.n	8005a56 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800595a:	4b41      	ldr	r3, [pc, #260]	; (8005a60 <RCCEx_PLLSAI1_Config+0x1dc>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a40      	ldr	r2, [pc, #256]	; (8005a60 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005960:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005964:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005966:	f7fd f953 	bl	8002c10 <HAL_GetTick>
 800596a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800596c:	e009      	b.n	8005982 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800596e:	f7fd f94f 	bl	8002c10 <HAL_GetTick>
 8005972:	4602      	mov	r2, r0
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	2b02      	cmp	r3, #2
 800597a:	d902      	bls.n	8005982 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	73fb      	strb	r3, [r7, #15]
        break;
 8005980:	e005      	b.n	800598e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005982:	4b37      	ldr	r3, [pc, #220]	; (8005a60 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800598a:	2b00      	cmp	r3, #0
 800598c:	d1ef      	bne.n	800596e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800598e:	7bfb      	ldrb	r3, [r7, #15]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d160      	bne.n	8005a56 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d111      	bne.n	80059be <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800599a:	4b31      	ldr	r3, [pc, #196]	; (8005a60 <RCCEx_PLLSAI1_Config+0x1dc>)
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80059a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	6892      	ldr	r2, [r2, #8]
 80059aa:	0211      	lsls	r1, r2, #8
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	68d2      	ldr	r2, [r2, #12]
 80059b0:	0912      	lsrs	r2, r2, #4
 80059b2:	0452      	lsls	r2, r2, #17
 80059b4:	430a      	orrs	r2, r1
 80059b6:	492a      	ldr	r1, [pc, #168]	; (8005a60 <RCCEx_PLLSAI1_Config+0x1dc>)
 80059b8:	4313      	orrs	r3, r2
 80059ba:	610b      	str	r3, [r1, #16]
 80059bc:	e027      	b.n	8005a0e <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d112      	bne.n	80059ea <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059c4:	4b26      	ldr	r3, [pc, #152]	; (8005a60 <RCCEx_PLLSAI1_Config+0x1dc>)
 80059c6:	691b      	ldr	r3, [r3, #16]
 80059c8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80059cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	6892      	ldr	r2, [r2, #8]
 80059d4:	0211      	lsls	r1, r2, #8
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	6912      	ldr	r2, [r2, #16]
 80059da:	0852      	lsrs	r2, r2, #1
 80059dc:	3a01      	subs	r2, #1
 80059de:	0552      	lsls	r2, r2, #21
 80059e0:	430a      	orrs	r2, r1
 80059e2:	491f      	ldr	r1, [pc, #124]	; (8005a60 <RCCEx_PLLSAI1_Config+0x1dc>)
 80059e4:	4313      	orrs	r3, r2
 80059e6:	610b      	str	r3, [r1, #16]
 80059e8:	e011      	b.n	8005a0e <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059ea:	4b1d      	ldr	r3, [pc, #116]	; (8005a60 <RCCEx_PLLSAI1_Config+0x1dc>)
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80059f2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	6892      	ldr	r2, [r2, #8]
 80059fa:	0211      	lsls	r1, r2, #8
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	6952      	ldr	r2, [r2, #20]
 8005a00:	0852      	lsrs	r2, r2, #1
 8005a02:	3a01      	subs	r2, #1
 8005a04:	0652      	lsls	r2, r2, #25
 8005a06:	430a      	orrs	r2, r1
 8005a08:	4915      	ldr	r1, [pc, #84]	; (8005a60 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005a0e:	4b14      	ldr	r3, [pc, #80]	; (8005a60 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a13      	ldr	r2, [pc, #76]	; (8005a60 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a14:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a18:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a1a:	f7fd f8f9 	bl	8002c10 <HAL_GetTick>
 8005a1e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a20:	e009      	b.n	8005a36 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a22:	f7fd f8f5 	bl	8002c10 <HAL_GetTick>
 8005a26:	4602      	mov	r2, r0
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	2b02      	cmp	r3, #2
 8005a2e:	d902      	bls.n	8005a36 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8005a30:	2303      	movs	r3, #3
 8005a32:	73fb      	strb	r3, [r7, #15]
          break;
 8005a34:	e005      	b.n	8005a42 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a36:	4b0a      	ldr	r3, [pc, #40]	; (8005a60 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d0ef      	beq.n	8005a22 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8005a42:	7bfb      	ldrb	r3, [r7, #15]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d106      	bne.n	8005a56 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005a48:	4b05      	ldr	r3, [pc, #20]	; (8005a60 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a4a:	691a      	ldr	r2, [r3, #16]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	699b      	ldr	r3, [r3, #24]
 8005a50:	4903      	ldr	r1, [pc, #12]	; (8005a60 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a52:	4313      	orrs	r3, r2
 8005a54:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3710      	adds	r7, #16
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	40021000 	.word	0x40021000

08005a64 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005a72:	4b68      	ldr	r3, [pc, #416]	; (8005c14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	f003 0303 	and.w	r3, r3, #3
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d018      	beq.n	8005ab0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005a7e:	4b65      	ldr	r3, [pc, #404]	; (8005c14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	f003 0203 	and.w	r2, r3, #3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d10d      	bne.n	8005aaa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
       ||
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d009      	beq.n	8005aaa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005a96:	4b5f      	ldr	r3, [pc, #380]	; (8005c14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	091b      	lsrs	r3, r3, #4
 8005a9c:	f003 0307 	and.w	r3, r3, #7
 8005aa0:	1c5a      	adds	r2, r3, #1
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	685b      	ldr	r3, [r3, #4]
       ||
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d044      	beq.n	8005b34 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	73fb      	strb	r3, [r7, #15]
 8005aae:	e041      	b.n	8005b34 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2b02      	cmp	r3, #2
 8005ab6:	d00c      	beq.n	8005ad2 <RCCEx_PLLSAI2_Config+0x6e>
 8005ab8:	2b03      	cmp	r3, #3
 8005aba:	d013      	beq.n	8005ae4 <RCCEx_PLLSAI2_Config+0x80>
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d120      	bne.n	8005b02 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005ac0:	4b54      	ldr	r3, [pc, #336]	; (8005c14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 0302 	and.w	r3, r3, #2
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d11d      	bne.n	8005b08 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ad0:	e01a      	b.n	8005b08 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005ad2:	4b50      	ldr	r3, [pc, #320]	; (8005c14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d116      	bne.n	8005b0c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ae2:	e013      	b.n	8005b0c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005ae4:	4b4b      	ldr	r3, [pc, #300]	; (8005c14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d10f      	bne.n	8005b10 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005af0:	4b48      	ldr	r3, [pc, #288]	; (8005c14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d109      	bne.n	8005b10 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005b00:	e006      	b.n	8005b10 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	73fb      	strb	r3, [r7, #15]
      break;
 8005b06:	e004      	b.n	8005b12 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005b08:	bf00      	nop
 8005b0a:	e002      	b.n	8005b12 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005b0c:	bf00      	nop
 8005b0e:	e000      	b.n	8005b12 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005b10:	bf00      	nop
    }

    if(status == HAL_OK)
 8005b12:	7bfb      	ldrb	r3, [r7, #15]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d10d      	bne.n	8005b34 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005b18:	4b3e      	ldr	r3, [pc, #248]	; (8005c14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6819      	ldr	r1, [r3, #0]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	3b01      	subs	r3, #1
 8005b2a:	011b      	lsls	r3, r3, #4
 8005b2c:	430b      	orrs	r3, r1
 8005b2e:	4939      	ldr	r1, [pc, #228]	; (8005c14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005b30:	4313      	orrs	r3, r2
 8005b32:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005b34:	7bfb      	ldrb	r3, [r7, #15]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d167      	bne.n	8005c0a <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005b3a:	4b36      	ldr	r3, [pc, #216]	; (8005c14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a35      	ldr	r2, [pc, #212]	; (8005c14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005b40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b46:	f7fd f863 	bl	8002c10 <HAL_GetTick>
 8005b4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005b4c:	e009      	b.n	8005b62 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005b4e:	f7fd f85f 	bl	8002c10 <HAL_GetTick>
 8005b52:	4602      	mov	r2, r0
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	1ad3      	subs	r3, r2, r3
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d902      	bls.n	8005b62 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	73fb      	strb	r3, [r7, #15]
        break;
 8005b60:	e005      	b.n	8005b6e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005b62:	4b2c      	ldr	r3, [pc, #176]	; (8005c14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1ef      	bne.n	8005b4e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8005b6e:	7bfb      	ldrb	r3, [r7, #15]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d14a      	bne.n	8005c0a <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d111      	bne.n	8005b9e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005b7a:	4b26      	ldr	r3, [pc, #152]	; (8005c14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005b82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	6892      	ldr	r2, [r2, #8]
 8005b8a:	0211      	lsls	r1, r2, #8
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	68d2      	ldr	r2, [r2, #12]
 8005b90:	0912      	lsrs	r2, r2, #4
 8005b92:	0452      	lsls	r2, r2, #17
 8005b94:	430a      	orrs	r2, r1
 8005b96:	491f      	ldr	r1, [pc, #124]	; (8005c14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	614b      	str	r3, [r1, #20]
 8005b9c:	e011      	b.n	8005bc2 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005b9e:	4b1d      	ldr	r3, [pc, #116]	; (8005c14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005ba0:	695b      	ldr	r3, [r3, #20]
 8005ba2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005ba6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	6892      	ldr	r2, [r2, #8]
 8005bae:	0211      	lsls	r1, r2, #8
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	6912      	ldr	r2, [r2, #16]
 8005bb4:	0852      	lsrs	r2, r2, #1
 8005bb6:	3a01      	subs	r2, #1
 8005bb8:	0652      	lsls	r2, r2, #25
 8005bba:	430a      	orrs	r2, r1
 8005bbc:	4915      	ldr	r1, [pc, #84]	; (8005c14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005bc2:	4b14      	ldr	r3, [pc, #80]	; (8005c14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a13      	ldr	r2, [pc, #76]	; (8005c14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bcc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bce:	f7fd f81f 	bl	8002c10 <HAL_GetTick>
 8005bd2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005bd4:	e009      	b.n	8005bea <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005bd6:	f7fd f81b 	bl	8002c10 <HAL_GetTick>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	2b02      	cmp	r3, #2
 8005be2:	d902      	bls.n	8005bea <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8005be4:	2303      	movs	r3, #3
 8005be6:	73fb      	strb	r3, [r7, #15]
          break;
 8005be8:	e005      	b.n	8005bf6 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005bea:	4b0a      	ldr	r3, [pc, #40]	; (8005c14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d0ef      	beq.n	8005bd6 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8005bf6:	7bfb      	ldrb	r3, [r7, #15]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d106      	bne.n	8005c0a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005bfc:	4b05      	ldr	r3, [pc, #20]	; (8005c14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005bfe:	695a      	ldr	r2, [r3, #20]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	695b      	ldr	r3, [r3, #20]
 8005c04:	4903      	ldr	r1, [pc, #12]	; (8005c14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005c06:	4313      	orrs	r3, r2
 8005c08:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3710      	adds	r7, #16
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	40021000 	.word	0x40021000

08005c18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d101      	bne.n	8005c2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e07c      	b.n	8005d24 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d106      	bne.n	8005c4a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f7fc f937 	bl	8001eb8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2202      	movs	r2, #2
 8005c4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c60:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c6a:	d902      	bls.n	8005c72 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	60fb      	str	r3, [r7, #12]
 8005c70:	e002      	b.n	8005c78 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005c72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c76:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005c80:	d007      	beq.n	8005c92 <HAL_SPI_Init+0x7a>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c8a:	d002      	beq.n	8005c92 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d10b      	bne.n	8005cb2 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ca2:	d903      	bls.n	8005cac <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	631a      	str	r2, [r3, #48]	; 0x30
 8005caa:	e002      	b.n	8005cb2 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	685a      	ldr	r2, [r3, #4]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	431a      	orrs	r2, r3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	431a      	orrs	r2, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	431a      	orrs	r2, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	699b      	ldr	r3, [r3, #24]
 8005ccc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cd0:	431a      	orrs	r2, r3
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	69db      	ldr	r3, [r3, #28]
 8005cd6:	431a      	orrs	r2, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6a1b      	ldr	r3, [r3, #32]
 8005cdc:	ea42 0103 	orr.w	r1, r2, r3
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	430a      	orrs	r2, r1
 8005cea:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	699b      	ldr	r3, [r3, #24]
 8005cf0:	0c1b      	lsrs	r3, r3, #16
 8005cf2:	f003 0204 	and.w	r2, r3, #4
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfa:	431a      	orrs	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d00:	431a      	orrs	r2, r3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	ea42 0103 	orr.w	r1, r2, r3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	430a      	orrs	r2, r1
 8005d12:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005d22:	2300      	movs	r3, #0
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3710      	adds	r7, #16
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d101      	bne.n	8005d3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e01d      	b.n	8005d7a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d106      	bne.n	8005d58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 f815 	bl	8005d82 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2202      	movs	r2, #2
 8005d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	3304      	adds	r3, #4
 8005d68:	4619      	mov	r1, r3
 8005d6a:	4610      	mov	r0, r2
 8005d6c:	f000 f986 	bl	800607c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3708      	adds	r7, #8
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}

08005d82 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005d82:	b480      	push	{r7}
 8005d84:	b083      	sub	sp, #12
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005d8a:	bf00      	nop
 8005d8c:	370c      	adds	r7, #12
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
	...

08005d98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68da      	ldr	r2, [r3, #12]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f042 0201 	orr.w	r2, r2, #1
 8005dae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	689a      	ldr	r2, [r3, #8]
 8005db6:	4b0c      	ldr	r3, [pc, #48]	; (8005de8 <HAL_TIM_Base_Start_IT+0x50>)
 8005db8:	4013      	ands	r3, r2
 8005dba:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2b06      	cmp	r3, #6
 8005dc0:	d00b      	beq.n	8005dda <HAL_TIM_Base_Start_IT+0x42>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dc8:	d007      	beq.n	8005dda <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f042 0201 	orr.w	r2, r2, #1
 8005dd8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3714      	adds	r7, #20
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr
 8005de8:	00010007 	.word	0x00010007

08005dec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b082      	sub	sp, #8
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	f003 0302 	and.w	r3, r3, #2
 8005dfe:	2b02      	cmp	r3, #2
 8005e00:	d122      	bne.n	8005e48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	f003 0302 	and.w	r3, r3, #2
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d11b      	bne.n	8005e48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f06f 0202 	mvn.w	r2, #2
 8005e18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	699b      	ldr	r3, [r3, #24]
 8005e26:	f003 0303 	and.w	r3, r3, #3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d003      	beq.n	8005e36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 f905 	bl	800603e <HAL_TIM_IC_CaptureCallback>
 8005e34:	e005      	b.n	8005e42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 f8f7 	bl	800602a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 f908 	bl	8006052 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	f003 0304 	and.w	r3, r3, #4
 8005e52:	2b04      	cmp	r3, #4
 8005e54:	d122      	bne.n	8005e9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	f003 0304 	and.w	r3, r3, #4
 8005e60:	2b04      	cmp	r3, #4
 8005e62:	d11b      	bne.n	8005e9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f06f 0204 	mvn.w	r2, #4
 8005e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2202      	movs	r2, #2
 8005e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	699b      	ldr	r3, [r3, #24]
 8005e7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d003      	beq.n	8005e8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 f8db 	bl	800603e <HAL_TIM_IC_CaptureCallback>
 8005e88:	e005      	b.n	8005e96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 f8cd 	bl	800602a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 f8de 	bl	8006052 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	f003 0308 	and.w	r3, r3, #8
 8005ea6:	2b08      	cmp	r3, #8
 8005ea8:	d122      	bne.n	8005ef0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	f003 0308 	and.w	r3, r3, #8
 8005eb4:	2b08      	cmp	r3, #8
 8005eb6:	d11b      	bne.n	8005ef0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f06f 0208 	mvn.w	r2, #8
 8005ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2204      	movs	r2, #4
 8005ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	69db      	ldr	r3, [r3, #28]
 8005ece:	f003 0303 	and.w	r3, r3, #3
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d003      	beq.n	8005ede <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 f8b1 	bl	800603e <HAL_TIM_IC_CaptureCallback>
 8005edc:	e005      	b.n	8005eea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 f8a3 	bl	800602a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 f8b4 	bl	8006052 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	f003 0310 	and.w	r3, r3, #16
 8005efa:	2b10      	cmp	r3, #16
 8005efc:	d122      	bne.n	8005f44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	f003 0310 	and.w	r3, r3, #16
 8005f08:	2b10      	cmp	r3, #16
 8005f0a:	d11b      	bne.n	8005f44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f06f 0210 	mvn.w	r2, #16
 8005f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2208      	movs	r2, #8
 8005f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	69db      	ldr	r3, [r3, #28]
 8005f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d003      	beq.n	8005f32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 f887 	bl	800603e <HAL_TIM_IC_CaptureCallback>
 8005f30:	e005      	b.n	8005f3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 f879 	bl	800602a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 f88a 	bl	8006052 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	f003 0301 	and.w	r3, r3, #1
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d10e      	bne.n	8005f70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	f003 0301 	and.w	r3, r3, #1
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d107      	bne.n	8005f70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f06f 0201 	mvn.w	r2, #1
 8005f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f7fb fe78 	bl	8001c60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f7a:	2b80      	cmp	r3, #128	; 0x80
 8005f7c:	d10e      	bne.n	8005f9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f88:	2b80      	cmp	r3, #128	; 0x80
 8005f8a:	d107      	bne.n	8005f9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 f914 	bl	80061c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005faa:	d10e      	bne.n	8005fca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fb6:	2b80      	cmp	r3, #128	; 0x80
 8005fb8:	d107      	bne.n	8005fca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005fc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 f907 	bl	80061d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fd4:	2b40      	cmp	r3, #64	; 0x40
 8005fd6:	d10e      	bne.n	8005ff6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fe2:	2b40      	cmp	r3, #64	; 0x40
 8005fe4:	d107      	bne.n	8005ff6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005fee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 f838 	bl	8006066 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	691b      	ldr	r3, [r3, #16]
 8005ffc:	f003 0320 	and.w	r3, r3, #32
 8006000:	2b20      	cmp	r3, #32
 8006002:	d10e      	bne.n	8006022 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	f003 0320 	and.w	r3, r3, #32
 800600e:	2b20      	cmp	r3, #32
 8006010:	d107      	bne.n	8006022 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f06f 0220 	mvn.w	r2, #32
 800601a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f000 f8c7 	bl	80061b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006022:	bf00      	nop
 8006024:	3708      	adds	r7, #8
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}

0800602a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800602a:	b480      	push	{r7}
 800602c:	b083      	sub	sp, #12
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006032:	bf00      	nop
 8006034:	370c      	adds	r7, #12
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr

0800603e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800603e:	b480      	push	{r7}
 8006040:	b083      	sub	sp, #12
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006046:	bf00      	nop
 8006048:	370c      	adds	r7, #12
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr

08006052 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006052:	b480      	push	{r7}
 8006054:	b083      	sub	sp, #12
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800605a:	bf00      	nop
 800605c:	370c      	adds	r7, #12
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr

08006066 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006066:	b480      	push	{r7}
 8006068:	b083      	sub	sp, #12
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800606e:	bf00      	nop
 8006070:	370c      	adds	r7, #12
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr
	...

0800607c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800607c:	b480      	push	{r7}
 800607e:	b085      	sub	sp, #20
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a40      	ldr	r2, [pc, #256]	; (8006190 <TIM_Base_SetConfig+0x114>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d013      	beq.n	80060bc <TIM_Base_SetConfig+0x40>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800609a:	d00f      	beq.n	80060bc <TIM_Base_SetConfig+0x40>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a3d      	ldr	r2, [pc, #244]	; (8006194 <TIM_Base_SetConfig+0x118>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d00b      	beq.n	80060bc <TIM_Base_SetConfig+0x40>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4a3c      	ldr	r2, [pc, #240]	; (8006198 <TIM_Base_SetConfig+0x11c>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d007      	beq.n	80060bc <TIM_Base_SetConfig+0x40>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a3b      	ldr	r2, [pc, #236]	; (800619c <TIM_Base_SetConfig+0x120>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d003      	beq.n	80060bc <TIM_Base_SetConfig+0x40>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a3a      	ldr	r2, [pc, #232]	; (80061a0 <TIM_Base_SetConfig+0x124>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d108      	bne.n	80060ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a2f      	ldr	r2, [pc, #188]	; (8006190 <TIM_Base_SetConfig+0x114>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d01f      	beq.n	8006116 <TIM_Base_SetConfig+0x9a>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060dc:	d01b      	beq.n	8006116 <TIM_Base_SetConfig+0x9a>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a2c      	ldr	r2, [pc, #176]	; (8006194 <TIM_Base_SetConfig+0x118>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d017      	beq.n	8006116 <TIM_Base_SetConfig+0x9a>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	4a2b      	ldr	r2, [pc, #172]	; (8006198 <TIM_Base_SetConfig+0x11c>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d013      	beq.n	8006116 <TIM_Base_SetConfig+0x9a>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	4a2a      	ldr	r2, [pc, #168]	; (800619c <TIM_Base_SetConfig+0x120>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d00f      	beq.n	8006116 <TIM_Base_SetConfig+0x9a>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	4a29      	ldr	r2, [pc, #164]	; (80061a0 <TIM_Base_SetConfig+0x124>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d00b      	beq.n	8006116 <TIM_Base_SetConfig+0x9a>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	4a28      	ldr	r2, [pc, #160]	; (80061a4 <TIM_Base_SetConfig+0x128>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d007      	beq.n	8006116 <TIM_Base_SetConfig+0x9a>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4a27      	ldr	r2, [pc, #156]	; (80061a8 <TIM_Base_SetConfig+0x12c>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d003      	beq.n	8006116 <TIM_Base_SetConfig+0x9a>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4a26      	ldr	r2, [pc, #152]	; (80061ac <TIM_Base_SetConfig+0x130>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d108      	bne.n	8006128 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800611c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	68fa      	ldr	r2, [r7, #12]
 8006124:	4313      	orrs	r3, r2
 8006126:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	695b      	ldr	r3, [r3, #20]
 8006132:	4313      	orrs	r3, r2
 8006134:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	68fa      	ldr	r2, [r7, #12]
 800613a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	689a      	ldr	r2, [r3, #8]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4a10      	ldr	r2, [pc, #64]	; (8006190 <TIM_Base_SetConfig+0x114>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d00f      	beq.n	8006174 <TIM_Base_SetConfig+0xf8>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a12      	ldr	r2, [pc, #72]	; (80061a0 <TIM_Base_SetConfig+0x124>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d00b      	beq.n	8006174 <TIM_Base_SetConfig+0xf8>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4a11      	ldr	r2, [pc, #68]	; (80061a4 <TIM_Base_SetConfig+0x128>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d007      	beq.n	8006174 <TIM_Base_SetConfig+0xf8>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a10      	ldr	r2, [pc, #64]	; (80061a8 <TIM_Base_SetConfig+0x12c>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d003      	beq.n	8006174 <TIM_Base_SetConfig+0xf8>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a0f      	ldr	r2, [pc, #60]	; (80061ac <TIM_Base_SetConfig+0x130>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d103      	bne.n	800617c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	691a      	ldr	r2, [r3, #16]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	615a      	str	r2, [r3, #20]
}
 8006182:	bf00      	nop
 8006184:	3714      	adds	r7, #20
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	40012c00 	.word	0x40012c00
 8006194:	40000400 	.word	0x40000400
 8006198:	40000800 	.word	0x40000800
 800619c:	40000c00 	.word	0x40000c00
 80061a0:	40013400 	.word	0x40013400
 80061a4:	40014000 	.word	0x40014000
 80061a8:	40014400 	.word	0x40014400
 80061ac:	40014800 	.word	0x40014800

080061b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b083      	sub	sp, #12
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061b8:	bf00      	nop
 80061ba:	370c      	adds	r7, #12
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061cc:	bf00      	nop
 80061ce:	370c      	adds	r7, #12
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80061d8:	b480      	push	{r7}
 80061da:	b083      	sub	sp, #12
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80061e0:	bf00      	nop
 80061e2:	370c      	adds	r7, #12
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d101      	bne.n	80061fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e040      	b.n	8006280 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006202:	2b00      	cmp	r3, #0
 8006204:	d106      	bne.n	8006214 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f7fb fe96 	bl	8001f40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2224      	movs	r2, #36	; 0x24
 8006218:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f022 0201 	bic.w	r2, r2, #1
 8006228:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 f8c0 	bl	80063b0 <UART_SetConfig>
 8006230:	4603      	mov	r3, r0
 8006232:	2b01      	cmp	r3, #1
 8006234:	d101      	bne.n	800623a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	e022      	b.n	8006280 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623e:	2b00      	cmp	r3, #0
 8006240:	d002      	beq.n	8006248 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 fc26 	bl	8006a94 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	685a      	ldr	r2, [r3, #4]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006256:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	689a      	ldr	r2, [r3, #8]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006266:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f042 0201 	orr.w	r2, r2, #1
 8006276:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f000 fcad 	bl	8006bd8 <UART_CheckIdleState>
 800627e:	4603      	mov	r3, r0
}
 8006280:	4618      	mov	r0, r3
 8006282:	3708      	adds	r7, #8
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}

08006288 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b08a      	sub	sp, #40	; 0x28
 800628c:	af02      	add	r7, sp, #8
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	60b9      	str	r1, [r7, #8]
 8006292:	603b      	str	r3, [r7, #0]
 8006294:	4613      	mov	r3, r2
 8006296:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800629c:	2b20      	cmp	r3, #32
 800629e:	f040 8081 	bne.w	80063a4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d002      	beq.n	80062ae <HAL_UART_Transmit+0x26>
 80062a8:	88fb      	ldrh	r3, [r7, #6]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d101      	bne.n	80062b2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	e079      	b.n	80063a6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d101      	bne.n	80062c0 <HAL_UART_Transmit+0x38>
 80062bc:	2302      	movs	r3, #2
 80062be:	e072      	b.n	80063a6 <HAL_UART_Transmit+0x11e>
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2200      	movs	r2, #0
 80062cc:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2221      	movs	r2, #33	; 0x21
 80062d2:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80062d4:	f7fc fc9c 	bl	8002c10 <HAL_GetTick>
 80062d8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	88fa      	ldrh	r2, [r7, #6]
 80062de:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	88fa      	ldrh	r2, [r7, #6]
 80062e6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062f2:	d108      	bne.n	8006306 <HAL_UART_Transmit+0x7e>
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d104      	bne.n	8006306 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80062fc:	2300      	movs	r3, #0
 80062fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	61bb      	str	r3, [r7, #24]
 8006304:	e003      	b.n	800630e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800630a:	2300      	movs	r3, #0
 800630c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2200      	movs	r2, #0
 8006312:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8006316:	e02d      	b.n	8006374 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	9300      	str	r3, [sp, #0]
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	2200      	movs	r2, #0
 8006320:	2180      	movs	r1, #128	; 0x80
 8006322:	68f8      	ldr	r0, [r7, #12]
 8006324:	f000 fc9d 	bl	8006c62 <UART_WaitOnFlagUntilTimeout>
 8006328:	4603      	mov	r3, r0
 800632a:	2b00      	cmp	r3, #0
 800632c:	d001      	beq.n	8006332 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800632e:	2303      	movs	r3, #3
 8006330:	e039      	b.n	80063a6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d10b      	bne.n	8006350 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	881a      	ldrh	r2, [r3, #0]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006344:	b292      	uxth	r2, r2
 8006346:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	3302      	adds	r3, #2
 800634c:	61bb      	str	r3, [r7, #24]
 800634e:	e008      	b.n	8006362 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	781a      	ldrb	r2, [r3, #0]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	b292      	uxth	r2, r2
 800635a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	3301      	adds	r3, #1
 8006360:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006368:	b29b      	uxth	r3, r3
 800636a:	3b01      	subs	r3, #1
 800636c:	b29a      	uxth	r2, r3
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800637a:	b29b      	uxth	r3, r3
 800637c:	2b00      	cmp	r3, #0
 800637e:	d1cb      	bne.n	8006318 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	9300      	str	r3, [sp, #0]
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	2200      	movs	r2, #0
 8006388:	2140      	movs	r1, #64	; 0x40
 800638a:	68f8      	ldr	r0, [r7, #12]
 800638c:	f000 fc69 	bl	8006c62 <UART_WaitOnFlagUntilTimeout>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d001      	beq.n	800639a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	e005      	b.n	80063a6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2220      	movs	r2, #32
 800639e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80063a0:	2300      	movs	r3, #0
 80063a2:	e000      	b.n	80063a6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80063a4:	2302      	movs	r3, #2
  }
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3720      	adds	r7, #32
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
	...

080063b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063b0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80063b4:	b08a      	sub	sp, #40	; 0x28
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80063ba:	2300      	movs	r3, #0
 80063bc:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 80063be:	2300      	movs	r3, #0
 80063c0:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80063c2:	2300      	movs	r3, #0
 80063c4:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	689a      	ldr	r2, [r3, #8]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	431a      	orrs	r2, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	695b      	ldr	r3, [r3, #20]
 80063d4:	431a      	orrs	r2, r3
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	69db      	ldr	r3, [r3, #28]
 80063da:	4313      	orrs	r3, r2
 80063dc:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	4bb8      	ldr	r3, [pc, #736]	; (80066c8 <UART_SetConfig+0x318>)
 80063e6:	4013      	ands	r3, r2
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	6812      	ldr	r2, [r2, #0]
 80063ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80063ee:	430b      	orrs	r3, r1
 80063f0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	68da      	ldr	r2, [r3, #12]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	430a      	orrs	r2, r1
 8006406:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	699b      	ldr	r3, [r3, #24]
 800640c:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4aae      	ldr	r2, [pc, #696]	; (80066cc <UART_SetConfig+0x31c>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d004      	beq.n	8006422 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6a1b      	ldr	r3, [r3, #32]
 800641c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800641e:	4313      	orrs	r3, r2
 8006420:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006432:	430a      	orrs	r2, r1
 8006434:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4aa5      	ldr	r2, [pc, #660]	; (80066d0 <UART_SetConfig+0x320>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d126      	bne.n	800648e <UART_SetConfig+0xde>
 8006440:	4ba4      	ldr	r3, [pc, #656]	; (80066d4 <UART_SetConfig+0x324>)
 8006442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006446:	f003 0303 	and.w	r3, r3, #3
 800644a:	2b03      	cmp	r3, #3
 800644c:	d81a      	bhi.n	8006484 <UART_SetConfig+0xd4>
 800644e:	a201      	add	r2, pc, #4	; (adr r2, 8006454 <UART_SetConfig+0xa4>)
 8006450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006454:	08006465 	.word	0x08006465
 8006458:	08006475 	.word	0x08006475
 800645c:	0800646d 	.word	0x0800646d
 8006460:	0800647d 	.word	0x0800647d
 8006464:	2301      	movs	r3, #1
 8006466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800646a:	e105      	b.n	8006678 <UART_SetConfig+0x2c8>
 800646c:	2302      	movs	r3, #2
 800646e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006472:	e101      	b.n	8006678 <UART_SetConfig+0x2c8>
 8006474:	2304      	movs	r3, #4
 8006476:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800647a:	e0fd      	b.n	8006678 <UART_SetConfig+0x2c8>
 800647c:	2308      	movs	r3, #8
 800647e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006482:	e0f9      	b.n	8006678 <UART_SetConfig+0x2c8>
 8006484:	2310      	movs	r3, #16
 8006486:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800648a:	bf00      	nop
 800648c:	e0f4      	b.n	8006678 <UART_SetConfig+0x2c8>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a91      	ldr	r2, [pc, #580]	; (80066d8 <UART_SetConfig+0x328>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d138      	bne.n	800650a <UART_SetConfig+0x15a>
 8006498:	4b8e      	ldr	r3, [pc, #568]	; (80066d4 <UART_SetConfig+0x324>)
 800649a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800649e:	f003 030c 	and.w	r3, r3, #12
 80064a2:	2b0c      	cmp	r3, #12
 80064a4:	d82c      	bhi.n	8006500 <UART_SetConfig+0x150>
 80064a6:	a201      	add	r2, pc, #4	; (adr r2, 80064ac <UART_SetConfig+0xfc>)
 80064a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ac:	080064e1 	.word	0x080064e1
 80064b0:	08006501 	.word	0x08006501
 80064b4:	08006501 	.word	0x08006501
 80064b8:	08006501 	.word	0x08006501
 80064bc:	080064f1 	.word	0x080064f1
 80064c0:	08006501 	.word	0x08006501
 80064c4:	08006501 	.word	0x08006501
 80064c8:	08006501 	.word	0x08006501
 80064cc:	080064e9 	.word	0x080064e9
 80064d0:	08006501 	.word	0x08006501
 80064d4:	08006501 	.word	0x08006501
 80064d8:	08006501 	.word	0x08006501
 80064dc:	080064f9 	.word	0x080064f9
 80064e0:	2300      	movs	r3, #0
 80064e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064e6:	e0c7      	b.n	8006678 <UART_SetConfig+0x2c8>
 80064e8:	2302      	movs	r3, #2
 80064ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064ee:	e0c3      	b.n	8006678 <UART_SetConfig+0x2c8>
 80064f0:	2304      	movs	r3, #4
 80064f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064f6:	e0bf      	b.n	8006678 <UART_SetConfig+0x2c8>
 80064f8:	2308      	movs	r3, #8
 80064fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064fe:	e0bb      	b.n	8006678 <UART_SetConfig+0x2c8>
 8006500:	2310      	movs	r3, #16
 8006502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006506:	bf00      	nop
 8006508:	e0b6      	b.n	8006678 <UART_SetConfig+0x2c8>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a73      	ldr	r2, [pc, #460]	; (80066dc <UART_SetConfig+0x32c>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d125      	bne.n	8006560 <UART_SetConfig+0x1b0>
 8006514:	4b6f      	ldr	r3, [pc, #444]	; (80066d4 <UART_SetConfig+0x324>)
 8006516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800651a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800651e:	2b10      	cmp	r3, #16
 8006520:	d011      	beq.n	8006546 <UART_SetConfig+0x196>
 8006522:	2b10      	cmp	r3, #16
 8006524:	d802      	bhi.n	800652c <UART_SetConfig+0x17c>
 8006526:	2b00      	cmp	r3, #0
 8006528:	d005      	beq.n	8006536 <UART_SetConfig+0x186>
 800652a:	e014      	b.n	8006556 <UART_SetConfig+0x1a6>
 800652c:	2b20      	cmp	r3, #32
 800652e:	d006      	beq.n	800653e <UART_SetConfig+0x18e>
 8006530:	2b30      	cmp	r3, #48	; 0x30
 8006532:	d00c      	beq.n	800654e <UART_SetConfig+0x19e>
 8006534:	e00f      	b.n	8006556 <UART_SetConfig+0x1a6>
 8006536:	2300      	movs	r3, #0
 8006538:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800653c:	e09c      	b.n	8006678 <UART_SetConfig+0x2c8>
 800653e:	2302      	movs	r3, #2
 8006540:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006544:	e098      	b.n	8006678 <UART_SetConfig+0x2c8>
 8006546:	2304      	movs	r3, #4
 8006548:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800654c:	e094      	b.n	8006678 <UART_SetConfig+0x2c8>
 800654e:	2308      	movs	r3, #8
 8006550:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006554:	e090      	b.n	8006678 <UART_SetConfig+0x2c8>
 8006556:	2310      	movs	r3, #16
 8006558:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800655c:	bf00      	nop
 800655e:	e08b      	b.n	8006678 <UART_SetConfig+0x2c8>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a5e      	ldr	r2, [pc, #376]	; (80066e0 <UART_SetConfig+0x330>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d125      	bne.n	80065b6 <UART_SetConfig+0x206>
 800656a:	4b5a      	ldr	r3, [pc, #360]	; (80066d4 <UART_SetConfig+0x324>)
 800656c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006570:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006574:	2b40      	cmp	r3, #64	; 0x40
 8006576:	d011      	beq.n	800659c <UART_SetConfig+0x1ec>
 8006578:	2b40      	cmp	r3, #64	; 0x40
 800657a:	d802      	bhi.n	8006582 <UART_SetConfig+0x1d2>
 800657c:	2b00      	cmp	r3, #0
 800657e:	d005      	beq.n	800658c <UART_SetConfig+0x1dc>
 8006580:	e014      	b.n	80065ac <UART_SetConfig+0x1fc>
 8006582:	2b80      	cmp	r3, #128	; 0x80
 8006584:	d006      	beq.n	8006594 <UART_SetConfig+0x1e4>
 8006586:	2bc0      	cmp	r3, #192	; 0xc0
 8006588:	d00c      	beq.n	80065a4 <UART_SetConfig+0x1f4>
 800658a:	e00f      	b.n	80065ac <UART_SetConfig+0x1fc>
 800658c:	2300      	movs	r3, #0
 800658e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006592:	e071      	b.n	8006678 <UART_SetConfig+0x2c8>
 8006594:	2302      	movs	r3, #2
 8006596:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800659a:	e06d      	b.n	8006678 <UART_SetConfig+0x2c8>
 800659c:	2304      	movs	r3, #4
 800659e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065a2:	e069      	b.n	8006678 <UART_SetConfig+0x2c8>
 80065a4:	2308      	movs	r3, #8
 80065a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065aa:	e065      	b.n	8006678 <UART_SetConfig+0x2c8>
 80065ac:	2310      	movs	r3, #16
 80065ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065b2:	bf00      	nop
 80065b4:	e060      	b.n	8006678 <UART_SetConfig+0x2c8>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a4a      	ldr	r2, [pc, #296]	; (80066e4 <UART_SetConfig+0x334>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d129      	bne.n	8006614 <UART_SetConfig+0x264>
 80065c0:	4b44      	ldr	r3, [pc, #272]	; (80066d4 <UART_SetConfig+0x324>)
 80065c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065ce:	d014      	beq.n	80065fa <UART_SetConfig+0x24a>
 80065d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065d4:	d802      	bhi.n	80065dc <UART_SetConfig+0x22c>
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d007      	beq.n	80065ea <UART_SetConfig+0x23a>
 80065da:	e016      	b.n	800660a <UART_SetConfig+0x25a>
 80065dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065e0:	d007      	beq.n	80065f2 <UART_SetConfig+0x242>
 80065e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065e6:	d00c      	beq.n	8006602 <UART_SetConfig+0x252>
 80065e8:	e00f      	b.n	800660a <UART_SetConfig+0x25a>
 80065ea:	2300      	movs	r3, #0
 80065ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065f0:	e042      	b.n	8006678 <UART_SetConfig+0x2c8>
 80065f2:	2302      	movs	r3, #2
 80065f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065f8:	e03e      	b.n	8006678 <UART_SetConfig+0x2c8>
 80065fa:	2304      	movs	r3, #4
 80065fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006600:	e03a      	b.n	8006678 <UART_SetConfig+0x2c8>
 8006602:	2308      	movs	r3, #8
 8006604:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006608:	e036      	b.n	8006678 <UART_SetConfig+0x2c8>
 800660a:	2310      	movs	r3, #16
 800660c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006610:	bf00      	nop
 8006612:	e031      	b.n	8006678 <UART_SetConfig+0x2c8>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a2c      	ldr	r2, [pc, #176]	; (80066cc <UART_SetConfig+0x31c>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d129      	bne.n	8006672 <UART_SetConfig+0x2c2>
 800661e:	4b2d      	ldr	r3, [pc, #180]	; (80066d4 <UART_SetConfig+0x324>)
 8006620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006624:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006628:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800662c:	d014      	beq.n	8006658 <UART_SetConfig+0x2a8>
 800662e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006632:	d802      	bhi.n	800663a <UART_SetConfig+0x28a>
 8006634:	2b00      	cmp	r3, #0
 8006636:	d007      	beq.n	8006648 <UART_SetConfig+0x298>
 8006638:	e016      	b.n	8006668 <UART_SetConfig+0x2b8>
 800663a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800663e:	d007      	beq.n	8006650 <UART_SetConfig+0x2a0>
 8006640:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006644:	d00c      	beq.n	8006660 <UART_SetConfig+0x2b0>
 8006646:	e00f      	b.n	8006668 <UART_SetConfig+0x2b8>
 8006648:	2300      	movs	r3, #0
 800664a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800664e:	e013      	b.n	8006678 <UART_SetConfig+0x2c8>
 8006650:	2302      	movs	r3, #2
 8006652:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006656:	e00f      	b.n	8006678 <UART_SetConfig+0x2c8>
 8006658:	2304      	movs	r3, #4
 800665a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800665e:	e00b      	b.n	8006678 <UART_SetConfig+0x2c8>
 8006660:	2308      	movs	r3, #8
 8006662:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006666:	e007      	b.n	8006678 <UART_SetConfig+0x2c8>
 8006668:	2310      	movs	r3, #16
 800666a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800666e:	bf00      	nop
 8006670:	e002      	b.n	8006678 <UART_SetConfig+0x2c8>
 8006672:	2310      	movs	r3, #16
 8006674:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a13      	ldr	r2, [pc, #76]	; (80066cc <UART_SetConfig+0x31c>)
 800667e:	4293      	cmp	r3, r2
 8006680:	f040 80fe 	bne.w	8006880 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006684:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006688:	2b08      	cmp	r3, #8
 800668a:	d837      	bhi.n	80066fc <UART_SetConfig+0x34c>
 800668c:	a201      	add	r2, pc, #4	; (adr r2, 8006694 <UART_SetConfig+0x2e4>)
 800668e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006692:	bf00      	nop
 8006694:	080066b9 	.word	0x080066b9
 8006698:	080066fd 	.word	0x080066fd
 800669c:	080066c1 	.word	0x080066c1
 80066a0:	080066fd 	.word	0x080066fd
 80066a4:	080066ed 	.word	0x080066ed
 80066a8:	080066fd 	.word	0x080066fd
 80066ac:	080066fd 	.word	0x080066fd
 80066b0:	080066fd 	.word	0x080066fd
 80066b4:	080066f5 	.word	0x080066f5
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80066b8:	f7fe fd30 	bl	800511c <HAL_RCC_GetPCLK1Freq>
 80066bc:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80066be:	e020      	b.n	8006702 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80066c0:	4b09      	ldr	r3, [pc, #36]	; (80066e8 <UART_SetConfig+0x338>)
 80066c2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80066c4:	e01d      	b.n	8006702 <UART_SetConfig+0x352>
 80066c6:	bf00      	nop
 80066c8:	efff69f3 	.word	0xefff69f3
 80066cc:	40008000 	.word	0x40008000
 80066d0:	40013800 	.word	0x40013800
 80066d4:	40021000 	.word	0x40021000
 80066d8:	40004400 	.word	0x40004400
 80066dc:	40004800 	.word	0x40004800
 80066e0:	40004c00 	.word	0x40004c00
 80066e4:	40005000 	.word	0x40005000
 80066e8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80066ec:	f7fe fc80 	bl	8004ff0 <HAL_RCC_GetSysClockFreq>
 80066f0:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80066f2:	e006      	b.n	8006702 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80066f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066f8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80066fa:	e002      	b.n	8006702 <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	76fb      	strb	r3, [r7, #27]
        break;
 8006700:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	2b00      	cmp	r3, #0
 8006706:	f000 81b9 	beq.w	8006a7c <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	685a      	ldr	r2, [r3, #4]
 800670e:	4613      	mov	r3, r2
 8006710:	005b      	lsls	r3, r3, #1
 8006712:	4413      	add	r3, r2
 8006714:	697a      	ldr	r2, [r7, #20]
 8006716:	429a      	cmp	r2, r3
 8006718:	d305      	bcc.n	8006726 <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006720:	697a      	ldr	r2, [r7, #20]
 8006722:	429a      	cmp	r2, r3
 8006724:	d902      	bls.n	800672c <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	76fb      	strb	r3, [r7, #27]
 800672a:	e1a7      	b.n	8006a7c <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 800672c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006730:	2b08      	cmp	r3, #8
 8006732:	f200 8092 	bhi.w	800685a <UART_SetConfig+0x4aa>
 8006736:	a201      	add	r2, pc, #4	; (adr r2, 800673c <UART_SetConfig+0x38c>)
 8006738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800673c:	08006761 	.word	0x08006761
 8006740:	0800685b 	.word	0x0800685b
 8006744:	080067af 	.word	0x080067af
 8006748:	0800685b 	.word	0x0800685b
 800674c:	080067e3 	.word	0x080067e3
 8006750:	0800685b 	.word	0x0800685b
 8006754:	0800685b 	.word	0x0800685b
 8006758:	0800685b 	.word	0x0800685b
 800675c:	08006831 	.word	0x08006831
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8006760:	f7fe fcdc 	bl	800511c <HAL_RCC_GetPCLK1Freq>
 8006764:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	4619      	mov	r1, r3
 800676a:	f04f 0200 	mov.w	r2, #0
 800676e:	f04f 0300 	mov.w	r3, #0
 8006772:	f04f 0400 	mov.w	r4, #0
 8006776:	0214      	lsls	r4, r2, #8
 8006778:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800677c:	020b      	lsls	r3, r1, #8
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	6852      	ldr	r2, [r2, #4]
 8006782:	0852      	lsrs	r2, r2, #1
 8006784:	4611      	mov	r1, r2
 8006786:	f04f 0200 	mov.w	r2, #0
 800678a:	eb13 0b01 	adds.w	fp, r3, r1
 800678e:	eb44 0c02 	adc.w	ip, r4, r2
 8006792:	4658      	mov	r0, fp
 8006794:	4661      	mov	r1, ip
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	f04f 0400 	mov.w	r4, #0
 800679e:	461a      	mov	r2, r3
 80067a0:	4623      	mov	r3, r4
 80067a2:	f7fa f9ab 	bl	8000afc <__aeabi_uldivmod>
 80067a6:	4603      	mov	r3, r0
 80067a8:	460c      	mov	r4, r1
 80067aa:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80067ac:	e058      	b.n	8006860 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	085b      	lsrs	r3, r3, #1
 80067b4:	f04f 0400 	mov.w	r4, #0
 80067b8:	49ae      	ldr	r1, [pc, #696]	; (8006a74 <UART_SetConfig+0x6c4>)
 80067ba:	f04f 0200 	mov.w	r2, #0
 80067be:	eb13 0b01 	adds.w	fp, r3, r1
 80067c2:	eb44 0c02 	adc.w	ip, r4, r2
 80067c6:	4658      	mov	r0, fp
 80067c8:	4661      	mov	r1, ip
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	f04f 0400 	mov.w	r4, #0
 80067d2:	461a      	mov	r2, r3
 80067d4:	4623      	mov	r3, r4
 80067d6:	f7fa f991 	bl	8000afc <__aeabi_uldivmod>
 80067da:	4603      	mov	r3, r0
 80067dc:	460c      	mov	r4, r1
 80067de:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80067e0:	e03e      	b.n	8006860 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 80067e2:	f7fe fc05 	bl	8004ff0 <HAL_RCC_GetSysClockFreq>
 80067e6:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	4619      	mov	r1, r3
 80067ec:	f04f 0200 	mov.w	r2, #0
 80067f0:	f04f 0300 	mov.w	r3, #0
 80067f4:	f04f 0400 	mov.w	r4, #0
 80067f8:	0214      	lsls	r4, r2, #8
 80067fa:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80067fe:	020b      	lsls	r3, r1, #8
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	6852      	ldr	r2, [r2, #4]
 8006804:	0852      	lsrs	r2, r2, #1
 8006806:	4611      	mov	r1, r2
 8006808:	f04f 0200 	mov.w	r2, #0
 800680c:	eb13 0b01 	adds.w	fp, r3, r1
 8006810:	eb44 0c02 	adc.w	ip, r4, r2
 8006814:	4658      	mov	r0, fp
 8006816:	4661      	mov	r1, ip
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	f04f 0400 	mov.w	r4, #0
 8006820:	461a      	mov	r2, r3
 8006822:	4623      	mov	r3, r4
 8006824:	f7fa f96a 	bl	8000afc <__aeabi_uldivmod>
 8006828:	4603      	mov	r3, r0
 800682a:	460c      	mov	r4, r1
 800682c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800682e:	e017      	b.n	8006860 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	085b      	lsrs	r3, r3, #1
 8006836:	f04f 0400 	mov.w	r4, #0
 800683a:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800683e:	f144 0100 	adc.w	r1, r4, #0
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	f04f 0400 	mov.w	r4, #0
 800684a:	461a      	mov	r2, r3
 800684c:	4623      	mov	r3, r4
 800684e:	f7fa f955 	bl	8000afc <__aeabi_uldivmod>
 8006852:	4603      	mov	r3, r0
 8006854:	460c      	mov	r4, r1
 8006856:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006858:	e002      	b.n	8006860 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	76fb      	strb	r3, [r7, #27]
            break;
 800685e:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006866:	d308      	bcc.n	800687a <UART_SetConfig+0x4ca>
 8006868:	69fb      	ldr	r3, [r7, #28]
 800686a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800686e:	d204      	bcs.n	800687a <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	69fa      	ldr	r2, [r7, #28]
 8006876:	60da      	str	r2, [r3, #12]
 8006878:	e100      	b.n	8006a7c <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	76fb      	strb	r3, [r7, #27]
 800687e:	e0fd      	b.n	8006a7c <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	69db      	ldr	r3, [r3, #28]
 8006884:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006888:	f040 8084 	bne.w	8006994 <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 800688c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006890:	2b08      	cmp	r3, #8
 8006892:	d85f      	bhi.n	8006954 <UART_SetConfig+0x5a4>
 8006894:	a201      	add	r2, pc, #4	; (adr r2, 800689c <UART_SetConfig+0x4ec>)
 8006896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800689a:	bf00      	nop
 800689c:	080068c1 	.word	0x080068c1
 80068a0:	080068e1 	.word	0x080068e1
 80068a4:	08006901 	.word	0x08006901
 80068a8:	08006955 	.word	0x08006955
 80068ac:	0800691d 	.word	0x0800691d
 80068b0:	08006955 	.word	0x08006955
 80068b4:	08006955 	.word	0x08006955
 80068b8:	08006955 	.word	0x08006955
 80068bc:	0800693d 	.word	0x0800693d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068c0:	f7fe fc2c 	bl	800511c <HAL_RCC_GetPCLK1Freq>
 80068c4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	005a      	lsls	r2, r3, #1
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	085b      	lsrs	r3, r3, #1
 80068d0:	441a      	add	r2, r3
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80068da:	b29b      	uxth	r3, r3
 80068dc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80068de:	e03c      	b.n	800695a <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068e0:	f7fe fc32 	bl	8005148 <HAL_RCC_GetPCLK2Freq>
 80068e4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	005a      	lsls	r2, r3, #1
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	085b      	lsrs	r3, r3, #1
 80068f0:	441a      	add	r2, r3
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80068fe:	e02c      	b.n	800695a <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	085b      	lsrs	r3, r3, #1
 8006906:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800690a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	6852      	ldr	r2, [r2, #4]
 8006912:	fbb3 f3f2 	udiv	r3, r3, r2
 8006916:	b29b      	uxth	r3, r3
 8006918:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800691a:	e01e      	b.n	800695a <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800691c:	f7fe fb68 	bl	8004ff0 <HAL_RCC_GetSysClockFreq>
 8006920:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	005a      	lsls	r2, r3, #1
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	085b      	lsrs	r3, r3, #1
 800692c:	441a      	add	r2, r3
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	fbb2 f3f3 	udiv	r3, r2, r3
 8006936:	b29b      	uxth	r3, r3
 8006938:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800693a:	e00e      	b.n	800695a <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	085b      	lsrs	r3, r3, #1
 8006942:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	fbb2 f3f3 	udiv	r3, r2, r3
 800694e:	b29b      	uxth	r3, r3
 8006950:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006952:	e002      	b.n	800695a <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	76fb      	strb	r3, [r7, #27]
        break;
 8006958:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800695a:	69fb      	ldr	r3, [r7, #28]
 800695c:	2b0f      	cmp	r3, #15
 800695e:	d916      	bls.n	800698e <UART_SetConfig+0x5de>
 8006960:	69fb      	ldr	r3, [r7, #28]
 8006962:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006966:	d212      	bcs.n	800698e <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	b29b      	uxth	r3, r3
 800696c:	f023 030f 	bic.w	r3, r3, #15
 8006970:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006972:	69fb      	ldr	r3, [r7, #28]
 8006974:	085b      	lsrs	r3, r3, #1
 8006976:	b29b      	uxth	r3, r3
 8006978:	f003 0307 	and.w	r3, r3, #7
 800697c:	b29a      	uxth	r2, r3
 800697e:	89fb      	ldrh	r3, [r7, #14]
 8006980:	4313      	orrs	r3, r2
 8006982:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	89fa      	ldrh	r2, [r7, #14]
 800698a:	60da      	str	r2, [r3, #12]
 800698c:	e076      	b.n	8006a7c <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	76fb      	strb	r3, [r7, #27]
 8006992:	e073      	b.n	8006a7c <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 8006994:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006998:	2b08      	cmp	r3, #8
 800699a:	d85c      	bhi.n	8006a56 <UART_SetConfig+0x6a6>
 800699c:	a201      	add	r2, pc, #4	; (adr r2, 80069a4 <UART_SetConfig+0x5f4>)
 800699e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069a2:	bf00      	nop
 80069a4:	080069c9 	.word	0x080069c9
 80069a8:	080069e7 	.word	0x080069e7
 80069ac:	08006a05 	.word	0x08006a05
 80069b0:	08006a57 	.word	0x08006a57
 80069b4:	08006a21 	.word	0x08006a21
 80069b8:	08006a57 	.word	0x08006a57
 80069bc:	08006a57 	.word	0x08006a57
 80069c0:	08006a57 	.word	0x08006a57
 80069c4:	08006a3f 	.word	0x08006a3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069c8:	f7fe fba8 	bl	800511c <HAL_RCC_GetPCLK1Freq>
 80069cc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	085a      	lsrs	r2, r3, #1
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	441a      	add	r2, r3
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80069e4:	e03a      	b.n	8006a5c <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069e6:	f7fe fbaf 	bl	8005148 <HAL_RCC_GetPCLK2Freq>
 80069ea:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	085a      	lsrs	r2, r3, #1
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	441a      	add	r2, r3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006a02:	e02b      	b.n	8006a5c <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	085b      	lsrs	r3, r3, #1
 8006a0a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8006a0e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	6852      	ldr	r2, [r2, #4]
 8006a16:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006a1e:	e01d      	b.n	8006a5c <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a20:	f7fe fae6 	bl	8004ff0 <HAL_RCC_GetSysClockFreq>
 8006a24:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	085a      	lsrs	r2, r3, #1
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	441a      	add	r2, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006a3c:	e00e      	b.n	8006a5c <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	085b      	lsrs	r3, r3, #1
 8006a44:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006a54:	e002      	b.n	8006a5c <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	76fb      	strb	r3, [r7, #27]
        break;
 8006a5a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	2b0f      	cmp	r3, #15
 8006a60:	d90a      	bls.n	8006a78 <UART_SetConfig+0x6c8>
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a68:	d206      	bcs.n	8006a78 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	69fa      	ldr	r2, [r7, #28]
 8006a70:	60da      	str	r2, [r3, #12]
 8006a72:	e003      	b.n	8006a7c <UART_SetConfig+0x6cc>
 8006a74:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006a88:	7efb      	ldrb	r3, [r7, #27]
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3728      	adds	r7, #40	; 0x28
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08006a94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa0:	f003 0301 	and.w	r3, r3, #1
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00a      	beq.n	8006abe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	430a      	orrs	r2, r1
 8006abc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac2:	f003 0302 	and.w	r3, r3, #2
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d00a      	beq.n	8006ae0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	430a      	orrs	r2, r1
 8006ade:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae4:	f003 0304 	and.w	r3, r3, #4
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d00a      	beq.n	8006b02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	430a      	orrs	r2, r1
 8006b00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b06:	f003 0308 	and.w	r3, r3, #8
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d00a      	beq.n	8006b24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	430a      	orrs	r2, r1
 8006b22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b28:	f003 0310 	and.w	r3, r3, #16
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d00a      	beq.n	8006b46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	430a      	orrs	r2, r1
 8006b44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4a:	f003 0320 	and.w	r3, r3, #32
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d00a      	beq.n	8006b68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	430a      	orrs	r2, r1
 8006b66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d01a      	beq.n	8006baa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	430a      	orrs	r2, r1
 8006b88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b92:	d10a      	bne.n	8006baa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	430a      	orrs	r2, r1
 8006ba8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d00a      	beq.n	8006bcc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	430a      	orrs	r2, r1
 8006bca:	605a      	str	r2, [r3, #4]
  }
}
 8006bcc:	bf00      	nop
 8006bce:	370c      	adds	r7, #12
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b086      	sub	sp, #24
 8006bdc:	af02      	add	r7, sp, #8
 8006bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006be6:	f7fc f813 	bl	8002c10 <HAL_GetTick>
 8006bea:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f003 0308 	and.w	r3, r3, #8
 8006bf6:	2b08      	cmp	r3, #8
 8006bf8:	d10e      	bne.n	8006c18 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bfa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006bfe:	9300      	str	r3, [sp, #0]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f000 f82a 	bl	8006c62 <UART_WaitOnFlagUntilTimeout>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d001      	beq.n	8006c18 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c14:	2303      	movs	r3, #3
 8006c16:	e020      	b.n	8006c5a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 0304 	and.w	r3, r3, #4
 8006c22:	2b04      	cmp	r3, #4
 8006c24:	d10e      	bne.n	8006c44 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c26:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c2a:	9300      	str	r3, [sp, #0]
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 f814 	bl	8006c62 <UART_WaitOnFlagUntilTimeout>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d001      	beq.n	8006c44 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c40:	2303      	movs	r3, #3
 8006c42:	e00a      	b.n	8006c5a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2220      	movs	r2, #32
 8006c48:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2220      	movs	r2, #32
 8006c4e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006c58:	2300      	movs	r3, #0
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3710      	adds	r7, #16
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}

08006c62 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c62:	b580      	push	{r7, lr}
 8006c64:	b084      	sub	sp, #16
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	60f8      	str	r0, [r7, #12]
 8006c6a:	60b9      	str	r1, [r7, #8]
 8006c6c:	603b      	str	r3, [r7, #0]
 8006c6e:	4613      	mov	r3, r2
 8006c70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c72:	e05d      	b.n	8006d30 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c74:	69bb      	ldr	r3, [r7, #24]
 8006c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c7a:	d059      	beq.n	8006d30 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c7c:	f7fb ffc8 	bl	8002c10 <HAL_GetTick>
 8006c80:	4602      	mov	r2, r0
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	1ad3      	subs	r3, r2, r3
 8006c86:	69ba      	ldr	r2, [r7, #24]
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d302      	bcc.n	8006c92 <UART_WaitOnFlagUntilTimeout+0x30>
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d11b      	bne.n	8006cca <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006ca0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	689a      	ldr	r2, [r3, #8]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f022 0201 	bic.w	r2, r2, #1
 8006cb0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2220      	movs	r2, #32
 8006cb6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2220      	movs	r2, #32
 8006cbc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006cc6:	2303      	movs	r3, #3
 8006cc8:	e042      	b.n	8006d50 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 0304 	and.w	r3, r3, #4
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d02b      	beq.n	8006d30 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	69db      	ldr	r3, [r3, #28]
 8006cde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ce2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ce6:	d123      	bne.n	8006d30 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006cf0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006d00:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	689a      	ldr	r2, [r3, #8]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f022 0201 	bic.w	r2, r2, #1
 8006d10:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2220      	movs	r2, #32
 8006d16:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2220      	movs	r2, #32
 8006d1c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2220      	movs	r2, #32
 8006d22:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2200      	movs	r2, #0
 8006d28:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8006d2c:	2303      	movs	r3, #3
 8006d2e:	e00f      	b.n	8006d50 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	69da      	ldr	r2, [r3, #28]
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	4013      	ands	r3, r2
 8006d3a:	68ba      	ldr	r2, [r7, #8]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	bf0c      	ite	eq
 8006d40:	2301      	moveq	r3, #1
 8006d42:	2300      	movne	r3, #0
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	461a      	mov	r2, r3
 8006d48:	79fb      	ldrb	r3, [r7, #7]
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d092      	beq.n	8006c74 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d4e:	2300      	movs	r3, #0
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3710      	adds	r7, #16
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d58:	b084      	sub	sp, #16
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b084      	sub	sp, #16
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
 8006d62:	f107 001c 	add.w	r0, r7, #28
 8006d66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d122      	bne.n	8006db6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d74:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006d84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006d98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d105      	bne.n	8006daa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 fa28 	bl	8007200 <USB_CoreReset>
 8006db0:	4603      	mov	r3, r0
 8006db2:	73fb      	strb	r3, [r7, #15]
 8006db4:	e01a      	b.n	8006dec <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	68db      	ldr	r3, [r3, #12]
 8006dba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 fa1c 	bl	8007200 <USB_CoreReset>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006dcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d106      	bne.n	8006de0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dd6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	639a      	str	r2, [r3, #56]	; 0x38
 8006dde:	e005      	b.n	8006dec <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006de4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8006dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3710      	adds	r7, #16
 8006df2:	46bd      	mov	sp, r7
 8006df4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006df8:	b004      	add	sp, #16
 8006dfa:	4770      	bx	lr

08006dfc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	f023 0201 	bic.w	r2, r3, #1
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e10:	2300      	movs	r3, #0
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	370c      	adds	r7, #12
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr

08006e1e <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006e1e:	b580      	push	{r7, lr}
 8006e20:	b082      	sub	sp, #8
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
 8006e26:	460b      	mov	r3, r1
 8006e28:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	68db      	ldr	r3, [r3, #12]
 8006e2e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006e36:	78fb      	ldrb	r3, [r7, #3]
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d106      	bne.n	8006e4a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	60da      	str	r2, [r3, #12]
 8006e48:	e00b      	b.n	8006e62 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006e4a:	78fb      	ldrb	r3, [r7, #3]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d106      	bne.n	8006e5e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	60da      	str	r2, [r3, #12]
 8006e5c:	e001      	b.n	8006e62 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e003      	b.n	8006e6a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006e62:	2032      	movs	r0, #50	; 0x32
 8006e64:	f7fb fee0 	bl	8002c28 <HAL_Delay>

  return HAL_OK;
 8006e68:	2300      	movs	r3, #0
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3708      	adds	r7, #8
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
	...

08006e74 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e74:	b084      	sub	sp, #16
 8006e76:	b580      	push	{r7, lr}
 8006e78:	b086      	sub	sp, #24
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
 8006e7e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006e82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006e86:	2300      	movs	r3, #0
 8006e88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006e8e:	2300      	movs	r3, #0
 8006e90:	613b      	str	r3, [r7, #16]
 8006e92:	e009      	b.n	8006ea8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	3340      	adds	r3, #64	; 0x40
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	4413      	add	r3, r2
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	3301      	adds	r3, #1
 8006ea6:	613b      	str	r3, [r7, #16]
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	2b0e      	cmp	r3, #14
 8006eac:	d9f2      	bls.n	8006e94 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006eae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d11c      	bne.n	8006eee <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	68fa      	ldr	r2, [r7, #12]
 8006ebe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ec2:	f043 0302 	orr.w	r3, r3, #2
 8006ec6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ecc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	601a      	str	r2, [r3, #0]
 8006eec:	e005      	b.n	8006efa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006f00:	461a      	mov	r2, r3
 8006f02:	2300      	movs	r3, #0
 8006f04:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f14:	461a      	mov	r2, r3
 8006f16:	680b      	ldr	r3, [r1, #0]
 8006f18:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006f1a:	2103      	movs	r1, #3
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f000 f93d 	bl	800719c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006f22:	2110      	movs	r1, #16
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f000 f8f1 	bl	800710c <USB_FlushTxFifo>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d001      	beq.n	8006f34 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8006f30:	2301      	movs	r3, #1
 8006f32:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 f90f 	bl	8007158 <USB_FlushRxFifo>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d001      	beq.n	8006f44 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8006f40:	2301      	movs	r3, #1
 8006f42:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f56:	461a      	mov	r2, r3
 8006f58:	2300      	movs	r3, #0
 8006f5a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f62:	461a      	mov	r2, r3
 8006f64:	2300      	movs	r3, #0
 8006f66:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f68:	2300      	movs	r3, #0
 8006f6a:	613b      	str	r3, [r7, #16]
 8006f6c:	e043      	b.n	8006ff6 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	015a      	lsls	r2, r3, #5
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	4413      	add	r3, r2
 8006f76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f84:	d118      	bne.n	8006fb8 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d10a      	bne.n	8006fa2 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	015a      	lsls	r2, r3, #5
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	4413      	add	r3, r2
 8006f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f98:	461a      	mov	r2, r3
 8006f9a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006f9e:	6013      	str	r3, [r2, #0]
 8006fa0:	e013      	b.n	8006fca <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	015a      	lsls	r2, r3, #5
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	4413      	add	r3, r2
 8006faa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fae:	461a      	mov	r2, r3
 8006fb0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006fb4:	6013      	str	r3, [r2, #0]
 8006fb6:	e008      	b.n	8006fca <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	015a      	lsls	r2, r3, #5
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	4413      	add	r3, r2
 8006fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	015a      	lsls	r2, r3, #5
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	2300      	movs	r3, #0
 8006fda:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	015a      	lsls	r2, r3, #5
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fe8:	461a      	mov	r2, r3
 8006fea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006fee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	613b      	str	r3, [r7, #16]
 8006ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff8:	693a      	ldr	r2, [r7, #16]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d3b7      	bcc.n	8006f6e <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ffe:	2300      	movs	r3, #0
 8007000:	613b      	str	r3, [r7, #16]
 8007002:	e043      	b.n	800708c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	015a      	lsls	r2, r3, #5
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	4413      	add	r3, r2
 800700c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007016:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800701a:	d118      	bne.n	800704e <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d10a      	bne.n	8007038 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	015a      	lsls	r2, r3, #5
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	4413      	add	r3, r2
 800702a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800702e:	461a      	mov	r2, r3
 8007030:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007034:	6013      	str	r3, [r2, #0]
 8007036:	e013      	b.n	8007060 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	015a      	lsls	r2, r3, #5
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	4413      	add	r3, r2
 8007040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007044:	461a      	mov	r2, r3
 8007046:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800704a:	6013      	str	r3, [r2, #0]
 800704c:	e008      	b.n	8007060 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	015a      	lsls	r2, r3, #5
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	4413      	add	r3, r2
 8007056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800705a:	461a      	mov	r2, r3
 800705c:	2300      	movs	r3, #0
 800705e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	015a      	lsls	r2, r3, #5
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	4413      	add	r3, r2
 8007068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800706c:	461a      	mov	r2, r3
 800706e:	2300      	movs	r3, #0
 8007070:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	015a      	lsls	r2, r3, #5
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	4413      	add	r3, r2
 800707a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800707e:	461a      	mov	r2, r3
 8007080:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007084:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	3301      	adds	r3, #1
 800708a:	613b      	str	r3, [r7, #16]
 800708c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708e:	693a      	ldr	r2, [r7, #16]
 8007090:	429a      	cmp	r2, r3
 8007092:	d3b7      	bcc.n	8007004 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800709a:	691b      	ldr	r3, [r3, #16]
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070a6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2200      	movs	r2, #0
 80070ac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80070b4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	699b      	ldr	r3, [r3, #24]
 80070ba:	f043 0210 	orr.w	r2, r3, #16
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	699a      	ldr	r2, [r3, #24]
 80070c6:	4b10      	ldr	r3, [pc, #64]	; (8007108 <USB_DevInit+0x294>)
 80070c8:	4313      	orrs	r3, r2
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80070ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d005      	beq.n	80070e0 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	699b      	ldr	r3, [r3, #24]
 80070d8:	f043 0208 	orr.w	r2, r3, #8
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80070e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d107      	bne.n	80070f6 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	699b      	ldr	r3, [r3, #24]
 80070ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070ee:	f043 0304 	orr.w	r3, r3, #4
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80070f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3718      	adds	r7, #24
 80070fc:	46bd      	mov	sp, r7
 80070fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007102:	b004      	add	sp, #16
 8007104:	4770      	bx	lr
 8007106:	bf00      	nop
 8007108:	803c3800 	.word	0x803c3800

0800710c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800710c:	b480      	push	{r7}
 800710e:	b085      	sub	sp, #20
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007116:	2300      	movs	r3, #0
 8007118:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	019b      	lsls	r3, r3, #6
 800711e:	f043 0220 	orr.w	r2, r3, #32
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	3301      	adds	r3, #1
 800712a:	60fb      	str	r3, [r7, #12]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	4a09      	ldr	r2, [pc, #36]	; (8007154 <USB_FlushTxFifo+0x48>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d901      	bls.n	8007138 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007134:	2303      	movs	r3, #3
 8007136:	e006      	b.n	8007146 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	691b      	ldr	r3, [r3, #16]
 800713c:	f003 0320 	and.w	r3, r3, #32
 8007140:	2b20      	cmp	r3, #32
 8007142:	d0f0      	beq.n	8007126 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007144:	2300      	movs	r3, #0
}
 8007146:	4618      	mov	r0, r3
 8007148:	3714      	adds	r7, #20
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr
 8007152:	bf00      	nop
 8007154:	00030d40 	.word	0x00030d40

08007158 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007158:	b480      	push	{r7}
 800715a:	b085      	sub	sp, #20
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007160:	2300      	movs	r3, #0
 8007162:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2210      	movs	r2, #16
 8007168:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	3301      	adds	r3, #1
 800716e:	60fb      	str	r3, [r7, #12]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	4a09      	ldr	r2, [pc, #36]	; (8007198 <USB_FlushRxFifo+0x40>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d901      	bls.n	800717c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007178:	2303      	movs	r3, #3
 800717a:	e006      	b.n	800718a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	691b      	ldr	r3, [r3, #16]
 8007180:	f003 0310 	and.w	r3, r3, #16
 8007184:	2b10      	cmp	r3, #16
 8007186:	d0f0      	beq.n	800716a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	3714      	adds	r7, #20
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr
 8007196:	bf00      	nop
 8007198:	00030d40 	.word	0x00030d40

0800719c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800719c:	b480      	push	{r7}
 800719e:	b085      	sub	sp, #20
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	460b      	mov	r3, r1
 80071a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	78fb      	ldrb	r3, [r7, #3]
 80071b6:	68f9      	ldr	r1, [r7, #12]
 80071b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071bc:	4313      	orrs	r3, r2
 80071be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3714      	adds	r7, #20
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr

080071ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80071ce:	b580      	push	{r7, lr}
 80071d0:	b084      	sub	sp, #16
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	68fa      	ldr	r2, [r7, #12]
 80071e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071e8:	f043 0302 	orr.w	r3, r3, #2
 80071ec:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80071ee:	2003      	movs	r0, #3
 80071f0:	f7fb fd1a 	bl	8002c28 <HAL_Delay>

  return HAL_OK;
 80071f4:	2300      	movs	r3, #0
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3710      	adds	r7, #16
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
	...

08007200 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007200:	b480      	push	{r7}
 8007202:	b085      	sub	sp, #20
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007208:	2300      	movs	r3, #0
 800720a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	3301      	adds	r3, #1
 8007210:	60fb      	str	r3, [r7, #12]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	4a13      	ldr	r2, [pc, #76]	; (8007264 <USB_CoreReset+0x64>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d901      	bls.n	800721e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800721a:	2303      	movs	r3, #3
 800721c:	e01b      	b.n	8007256 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	691b      	ldr	r3, [r3, #16]
 8007222:	2b00      	cmp	r3, #0
 8007224:	daf2      	bge.n	800720c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007226:	2300      	movs	r3, #0
 8007228:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	691b      	ldr	r3, [r3, #16]
 800722e:	f043 0201 	orr.w	r2, r3, #1
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	3301      	adds	r3, #1
 800723a:	60fb      	str	r3, [r7, #12]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	4a09      	ldr	r2, [pc, #36]	; (8007264 <USB_CoreReset+0x64>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d901      	bls.n	8007248 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007244:	2303      	movs	r3, #3
 8007246:	e006      	b.n	8007256 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	691b      	ldr	r3, [r3, #16]
 800724c:	f003 0301 	and.w	r3, r3, #1
 8007250:	2b01      	cmp	r3, #1
 8007252:	d0f0      	beq.n	8007236 <USB_CoreReset+0x36>

  return HAL_OK;
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	3714      	adds	r7, #20
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr
 8007262:	bf00      	nop
 8007264:	00030d40 	.word	0x00030d40

08007268 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007268:	b480      	push	{r7}
 800726a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800726c:	bf00      	nop
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr
	...

08007278 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007278:	b480      	push	{r7}
 800727a:	b085      	sub	sp, #20
 800727c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800727e:	f3ef 8305 	mrs	r3, IPSR
 8007282:	60bb      	str	r3, [r7, #8]
  return(result);
 8007284:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007286:	2b00      	cmp	r3, #0
 8007288:	d10f      	bne.n	80072aa <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800728a:	f3ef 8310 	mrs	r3, PRIMASK
 800728e:	607b      	str	r3, [r7, #4]
  return(result);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d105      	bne.n	80072a2 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007296:	f3ef 8311 	mrs	r3, BASEPRI
 800729a:	603b      	str	r3, [r7, #0]
  return(result);
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d007      	beq.n	80072b2 <osKernelInitialize+0x3a>
 80072a2:	4b0e      	ldr	r3, [pc, #56]	; (80072dc <osKernelInitialize+0x64>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	2b02      	cmp	r3, #2
 80072a8:	d103      	bne.n	80072b2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80072aa:	f06f 0305 	mvn.w	r3, #5
 80072ae:	60fb      	str	r3, [r7, #12]
 80072b0:	e00c      	b.n	80072cc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80072b2:	4b0a      	ldr	r3, [pc, #40]	; (80072dc <osKernelInitialize+0x64>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d105      	bne.n	80072c6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80072ba:	4b08      	ldr	r3, [pc, #32]	; (80072dc <osKernelInitialize+0x64>)
 80072bc:	2201      	movs	r2, #1
 80072be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80072c0:	2300      	movs	r3, #0
 80072c2:	60fb      	str	r3, [r7, #12]
 80072c4:	e002      	b.n	80072cc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80072c6:	f04f 33ff 	mov.w	r3, #4294967295
 80072ca:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80072cc:	68fb      	ldr	r3, [r7, #12]
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3714      	adds	r7, #20
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop
 80072dc:	2000018c 	.word	0x2000018c

080072e0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b084      	sub	sp, #16
 80072e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072e6:	f3ef 8305 	mrs	r3, IPSR
 80072ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80072ec:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d10f      	bne.n	8007312 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072f2:	f3ef 8310 	mrs	r3, PRIMASK
 80072f6:	607b      	str	r3, [r7, #4]
  return(result);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d105      	bne.n	800730a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80072fe:	f3ef 8311 	mrs	r3, BASEPRI
 8007302:	603b      	str	r3, [r7, #0]
  return(result);
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d007      	beq.n	800731a <osKernelStart+0x3a>
 800730a:	4b0f      	ldr	r3, [pc, #60]	; (8007348 <osKernelStart+0x68>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	2b02      	cmp	r3, #2
 8007310:	d103      	bne.n	800731a <osKernelStart+0x3a>
    stat = osErrorISR;
 8007312:	f06f 0305 	mvn.w	r3, #5
 8007316:	60fb      	str	r3, [r7, #12]
 8007318:	e010      	b.n	800733c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800731a:	4b0b      	ldr	r3, [pc, #44]	; (8007348 <osKernelStart+0x68>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	2b01      	cmp	r3, #1
 8007320:	d109      	bne.n	8007336 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007322:	f7ff ffa1 	bl	8007268 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007326:	4b08      	ldr	r3, [pc, #32]	; (8007348 <osKernelStart+0x68>)
 8007328:	2202      	movs	r2, #2
 800732a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800732c:	f001 f870 	bl	8008410 <vTaskStartScheduler>
      stat = osOK;
 8007330:	2300      	movs	r3, #0
 8007332:	60fb      	str	r3, [r7, #12]
 8007334:	e002      	b.n	800733c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8007336:	f04f 33ff 	mov.w	r3, #4294967295
 800733a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800733c:	68fb      	ldr	r3, [r7, #12]
}
 800733e:	4618      	mov	r0, r3
 8007340:	3710      	adds	r7, #16
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
 8007346:	bf00      	nop
 8007348:	2000018c 	.word	0x2000018c

0800734c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800734c:	b580      	push	{r7, lr}
 800734e:	b090      	sub	sp, #64	; 0x40
 8007350:	af04      	add	r7, sp, #16
 8007352:	60f8      	str	r0, [r7, #12]
 8007354:	60b9      	str	r1, [r7, #8]
 8007356:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007358:	2300      	movs	r3, #0
 800735a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800735c:	f3ef 8305 	mrs	r3, IPSR
 8007360:	61fb      	str	r3, [r7, #28]
  return(result);
 8007362:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8007364:	2b00      	cmp	r3, #0
 8007366:	f040 808f 	bne.w	8007488 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800736a:	f3ef 8310 	mrs	r3, PRIMASK
 800736e:	61bb      	str	r3, [r7, #24]
  return(result);
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d105      	bne.n	8007382 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007376:	f3ef 8311 	mrs	r3, BASEPRI
 800737a:	617b      	str	r3, [r7, #20]
  return(result);
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d003      	beq.n	800738a <osThreadNew+0x3e>
 8007382:	4b44      	ldr	r3, [pc, #272]	; (8007494 <osThreadNew+0x148>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	2b02      	cmp	r3, #2
 8007388:	d07e      	beq.n	8007488 <osThreadNew+0x13c>
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d07b      	beq.n	8007488 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8007390:	2380      	movs	r3, #128	; 0x80
 8007392:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8007394:	2318      	movs	r3, #24
 8007396:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8007398:	2300      	movs	r3, #0
 800739a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800739c:	f04f 33ff 	mov.w	r3, #4294967295
 80073a0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d045      	beq.n	8007434 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d002      	beq.n	80073b6 <osThreadNew+0x6a>
        name = attr->name;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	699b      	ldr	r3, [r3, #24]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d002      	beq.n	80073c4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	699b      	ldr	r3, [r3, #24]
 80073c2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80073c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d008      	beq.n	80073dc <osThreadNew+0x90>
 80073ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073cc:	2b38      	cmp	r3, #56	; 0x38
 80073ce:	d805      	bhi.n	80073dc <osThreadNew+0x90>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	f003 0301 	and.w	r3, r3, #1
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d001      	beq.n	80073e0 <osThreadNew+0x94>
        return (NULL);
 80073dc:	2300      	movs	r3, #0
 80073de:	e054      	b.n	800748a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	695b      	ldr	r3, [r3, #20]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d003      	beq.n	80073f0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	695b      	ldr	r3, [r3, #20]
 80073ec:	089b      	lsrs	r3, r3, #2
 80073ee:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d00e      	beq.n	8007416 <osThreadNew+0xca>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	2b5b      	cmp	r3, #91	; 0x5b
 80073fe:	d90a      	bls.n	8007416 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007404:	2b00      	cmp	r3, #0
 8007406:	d006      	beq.n	8007416 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	695b      	ldr	r3, [r3, #20]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d002      	beq.n	8007416 <osThreadNew+0xca>
        mem = 1;
 8007410:	2301      	movs	r3, #1
 8007412:	623b      	str	r3, [r7, #32]
 8007414:	e010      	b.n	8007438 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d10c      	bne.n	8007438 <osThreadNew+0xec>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	68db      	ldr	r3, [r3, #12]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d108      	bne.n	8007438 <osThreadNew+0xec>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	691b      	ldr	r3, [r3, #16]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d104      	bne.n	8007438 <osThreadNew+0xec>
          mem = 0;
 800742e:	2300      	movs	r3, #0
 8007430:	623b      	str	r3, [r7, #32]
 8007432:	e001      	b.n	8007438 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8007434:	2300      	movs	r3, #0
 8007436:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007438:	6a3b      	ldr	r3, [r7, #32]
 800743a:	2b01      	cmp	r3, #1
 800743c:	d110      	bne.n	8007460 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007446:	9202      	str	r2, [sp, #8]
 8007448:	9301      	str	r3, [sp, #4]
 800744a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744c:	9300      	str	r3, [sp, #0]
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007452:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007454:	68f8      	ldr	r0, [r7, #12]
 8007456:	f000 fe09 	bl	800806c <xTaskCreateStatic>
 800745a:	4603      	mov	r3, r0
 800745c:	613b      	str	r3, [r7, #16]
 800745e:	e013      	b.n	8007488 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8007460:	6a3b      	ldr	r3, [r7, #32]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d110      	bne.n	8007488 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007468:	b29a      	uxth	r2, r3
 800746a:	f107 0310 	add.w	r3, r7, #16
 800746e:	9301      	str	r3, [sp, #4]
 8007470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007472:	9300      	str	r3, [sp, #0]
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007478:	68f8      	ldr	r0, [r7, #12]
 800747a:	f000 fe51 	bl	8008120 <xTaskCreate>
 800747e:	4603      	mov	r3, r0
 8007480:	2b01      	cmp	r3, #1
 8007482:	d001      	beq.n	8007488 <osThreadNew+0x13c>
          hTask = NULL;
 8007484:	2300      	movs	r3, #0
 8007486:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007488:	693b      	ldr	r3, [r7, #16]
}
 800748a:	4618      	mov	r0, r3
 800748c:	3730      	adds	r7, #48	; 0x30
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
 8007492:	bf00      	nop
 8007494:	2000018c 	.word	0x2000018c

08007498 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007498:	b580      	push	{r7, lr}
 800749a:	b086      	sub	sp, #24
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074a0:	f3ef 8305 	mrs	r3, IPSR
 80074a4:	613b      	str	r3, [r7, #16]
  return(result);
 80074a6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d10f      	bne.n	80074cc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074ac:	f3ef 8310 	mrs	r3, PRIMASK
 80074b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d105      	bne.n	80074c4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80074b8:	f3ef 8311 	mrs	r3, BASEPRI
 80074bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d007      	beq.n	80074d4 <osDelay+0x3c>
 80074c4:	4b0a      	ldr	r3, [pc, #40]	; (80074f0 <osDelay+0x58>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	2b02      	cmp	r3, #2
 80074ca:	d103      	bne.n	80074d4 <osDelay+0x3c>
    stat = osErrorISR;
 80074cc:	f06f 0305 	mvn.w	r3, #5
 80074d0:	617b      	str	r3, [r7, #20]
 80074d2:	e007      	b.n	80074e4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80074d4:	2300      	movs	r3, #0
 80074d6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d002      	beq.n	80074e4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 ff62 	bl	80083a8 <vTaskDelay>
    }
  }

  return (stat);
 80074e4:	697b      	ldr	r3, [r7, #20]
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3718      	adds	r7, #24
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	2000018c 	.word	0x2000018c

080074f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80074f4:	b480      	push	{r7}
 80074f6:	b085      	sub	sp, #20
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	4a07      	ldr	r2, [pc, #28]	; (8007520 <vApplicationGetIdleTaskMemory+0x2c>)
 8007504:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	4a06      	ldr	r2, [pc, #24]	; (8007524 <vApplicationGetIdleTaskMemory+0x30>)
 800750a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2280      	movs	r2, #128	; 0x80
 8007510:	601a      	str	r2, [r3, #0]
}
 8007512:	bf00      	nop
 8007514:	3714      	adds	r7, #20
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr
 800751e:	bf00      	nop
 8007520:	20000190 	.word	0x20000190
 8007524:	200001ec 	.word	0x200001ec

08007528 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007528:	b480      	push	{r7}
 800752a:	b085      	sub	sp, #20
 800752c:	af00      	add	r7, sp, #0
 800752e:	60f8      	str	r0, [r7, #12]
 8007530:	60b9      	str	r1, [r7, #8]
 8007532:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	4a07      	ldr	r2, [pc, #28]	; (8007554 <vApplicationGetTimerTaskMemory+0x2c>)
 8007538:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	4a06      	ldr	r2, [pc, #24]	; (8007558 <vApplicationGetTimerTaskMemory+0x30>)
 800753e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007546:	601a      	str	r2, [r3, #0]
}
 8007548:	bf00      	nop
 800754a:	3714      	adds	r7, #20
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr
 8007554:	200003ec 	.word	0x200003ec
 8007558:	20000448 	.word	0x20000448

0800755c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800755c:	b480      	push	{r7}
 800755e:	b083      	sub	sp, #12
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f103 0208 	add.w	r2, r3, #8
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f04f 32ff 	mov.w	r2, #4294967295
 8007574:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f103 0208 	add.w	r2, r3, #8
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f103 0208 	add.w	r2, r3, #8
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2200      	movs	r2, #0
 800758e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007590:	bf00      	nop
 8007592:	370c      	adds	r7, #12
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800759c:	b480      	push	{r7}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80075aa:	bf00      	nop
 80075ac:	370c      	adds	r7, #12
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr

080075b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80075b6:	b480      	push	{r7}
 80075b8:	b085      	sub	sp, #20
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
 80075be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	68fa      	ldr	r2, [r7, #12]
 80075ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	689a      	ldr	r2, [r3, #8]
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	683a      	ldr	r2, [r7, #0]
 80075da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	683a      	ldr	r2, [r7, #0]
 80075e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	1c5a      	adds	r2, r3, #1
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	601a      	str	r2, [r3, #0]
}
 80075f2:	bf00      	nop
 80075f4:	3714      	adds	r7, #20
 80075f6:	46bd      	mov	sp, r7
 80075f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fc:	4770      	bx	lr

080075fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80075fe:	b480      	push	{r7}
 8007600:	b085      	sub	sp, #20
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
 8007606:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007614:	d103      	bne.n	800761e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	691b      	ldr	r3, [r3, #16]
 800761a:	60fb      	str	r3, [r7, #12]
 800761c:	e00c      	b.n	8007638 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	3308      	adds	r3, #8
 8007622:	60fb      	str	r3, [r7, #12]
 8007624:	e002      	b.n	800762c <vListInsert+0x2e>
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	60fb      	str	r3, [r7, #12]
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	68ba      	ldr	r2, [r7, #8]
 8007634:	429a      	cmp	r2, r3
 8007636:	d2f6      	bcs.n	8007626 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	685a      	ldr	r2, [r3, #4]
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	683a      	ldr	r2, [r7, #0]
 8007646:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	68fa      	ldr	r2, [r7, #12]
 800764c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	683a      	ldr	r2, [r7, #0]
 8007652:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	1c5a      	adds	r2, r3, #1
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	601a      	str	r2, [r3, #0]
}
 8007664:	bf00      	nop
 8007666:	3714      	adds	r7, #20
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007670:	b480      	push	{r7}
 8007672:	b085      	sub	sp, #20
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	691b      	ldr	r3, [r3, #16]
 800767c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	6892      	ldr	r2, [r2, #8]
 8007686:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	6852      	ldr	r2, [r2, #4]
 8007690:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	429a      	cmp	r2, r3
 800769a:	d103      	bne.n	80076a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	689a      	ldr	r2, [r3, #8]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	1e5a      	subs	r2, r3, #1
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3714      	adds	r7, #20
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d109      	bne.n	80076ec <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80076d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076dc:	f383 8811 	msr	BASEPRI, r3
 80076e0:	f3bf 8f6f 	isb	sy
 80076e4:	f3bf 8f4f 	dsb	sy
 80076e8:	60bb      	str	r3, [r7, #8]
 80076ea:	e7fe      	b.n	80076ea <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80076ec:	f002 f80e 	bl	800970c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076f8:	68f9      	ldr	r1, [r7, #12]
 80076fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80076fc:	fb01 f303 	mul.w	r3, r1, r3
 8007700:	441a      	add	r2, r3
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2200      	movs	r2, #0
 800770a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681a      	ldr	r2, [r3, #0]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681a      	ldr	r2, [r3, #0]
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800771c:	3b01      	subs	r3, #1
 800771e:	68f9      	ldr	r1, [r7, #12]
 8007720:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007722:	fb01 f303 	mul.w	r3, r1, r3
 8007726:	441a      	add	r2, r3
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	22ff      	movs	r2, #255	; 0xff
 8007730:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	22ff      	movs	r2, #255	; 0xff
 8007738:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d114      	bne.n	800776c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	691b      	ldr	r3, [r3, #16]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d01a      	beq.n	8007780 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	3310      	adds	r3, #16
 800774e:	4618      	mov	r0, r3
 8007750:	f001 f8de 	bl	8008910 <xTaskRemoveFromEventList>
 8007754:	4603      	mov	r3, r0
 8007756:	2b00      	cmp	r3, #0
 8007758:	d012      	beq.n	8007780 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800775a:	4b0d      	ldr	r3, [pc, #52]	; (8007790 <xQueueGenericReset+0xcc>)
 800775c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007760:	601a      	str	r2, [r3, #0]
 8007762:	f3bf 8f4f 	dsb	sy
 8007766:	f3bf 8f6f 	isb	sy
 800776a:	e009      	b.n	8007780 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	3310      	adds	r3, #16
 8007770:	4618      	mov	r0, r3
 8007772:	f7ff fef3 	bl	800755c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	3324      	adds	r3, #36	; 0x24
 800777a:	4618      	mov	r0, r3
 800777c:	f7ff feee 	bl	800755c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007780:	f001 fff2 	bl	8009768 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007784:	2301      	movs	r3, #1
}
 8007786:	4618      	mov	r0, r3
 8007788:	3710      	adds	r7, #16
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}
 800778e:	bf00      	nop
 8007790:	e000ed04 	.word	0xe000ed04

08007794 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007794:	b580      	push	{r7, lr}
 8007796:	b08e      	sub	sp, #56	; 0x38
 8007798:	af02      	add	r7, sp, #8
 800779a:	60f8      	str	r0, [r7, #12]
 800779c:	60b9      	str	r1, [r7, #8]
 800779e:	607a      	str	r2, [r7, #4]
 80077a0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d109      	bne.n	80077bc <xQueueGenericCreateStatic+0x28>
 80077a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ac:	f383 8811 	msr	BASEPRI, r3
 80077b0:	f3bf 8f6f 	isb	sy
 80077b4:	f3bf 8f4f 	dsb	sy
 80077b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80077ba:	e7fe      	b.n	80077ba <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d109      	bne.n	80077d6 <xQueueGenericCreateStatic+0x42>
 80077c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c6:	f383 8811 	msr	BASEPRI, r3
 80077ca:	f3bf 8f6f 	isb	sy
 80077ce:	f3bf 8f4f 	dsb	sy
 80077d2:	627b      	str	r3, [r7, #36]	; 0x24
 80077d4:	e7fe      	b.n	80077d4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d002      	beq.n	80077e2 <xQueueGenericCreateStatic+0x4e>
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d001      	beq.n	80077e6 <xQueueGenericCreateStatic+0x52>
 80077e2:	2301      	movs	r3, #1
 80077e4:	e000      	b.n	80077e8 <xQueueGenericCreateStatic+0x54>
 80077e6:	2300      	movs	r3, #0
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d109      	bne.n	8007800 <xQueueGenericCreateStatic+0x6c>
 80077ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f0:	f383 8811 	msr	BASEPRI, r3
 80077f4:	f3bf 8f6f 	isb	sy
 80077f8:	f3bf 8f4f 	dsb	sy
 80077fc:	623b      	str	r3, [r7, #32]
 80077fe:	e7fe      	b.n	80077fe <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d102      	bne.n	800780c <xQueueGenericCreateStatic+0x78>
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d101      	bne.n	8007810 <xQueueGenericCreateStatic+0x7c>
 800780c:	2301      	movs	r3, #1
 800780e:	e000      	b.n	8007812 <xQueueGenericCreateStatic+0x7e>
 8007810:	2300      	movs	r3, #0
 8007812:	2b00      	cmp	r3, #0
 8007814:	d109      	bne.n	800782a <xQueueGenericCreateStatic+0x96>
 8007816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800781a:	f383 8811 	msr	BASEPRI, r3
 800781e:	f3bf 8f6f 	isb	sy
 8007822:	f3bf 8f4f 	dsb	sy
 8007826:	61fb      	str	r3, [r7, #28]
 8007828:	e7fe      	b.n	8007828 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800782a:	2350      	movs	r3, #80	; 0x50
 800782c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	2b50      	cmp	r3, #80	; 0x50
 8007832:	d009      	beq.n	8007848 <xQueueGenericCreateStatic+0xb4>
 8007834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007838:	f383 8811 	msr	BASEPRI, r3
 800783c:	f3bf 8f6f 	isb	sy
 8007840:	f3bf 8f4f 	dsb	sy
 8007844:	61bb      	str	r3, [r7, #24]
 8007846:	e7fe      	b.n	8007846 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007848:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800784e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007850:	2b00      	cmp	r3, #0
 8007852:	d00d      	beq.n	8007870 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007856:	2201      	movs	r2, #1
 8007858:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800785c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007862:	9300      	str	r3, [sp, #0]
 8007864:	4613      	mov	r3, r2
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	68b9      	ldr	r1, [r7, #8]
 800786a:	68f8      	ldr	r0, [r7, #12]
 800786c:	f000 f805 	bl	800787a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007872:	4618      	mov	r0, r3
 8007874:	3730      	adds	r7, #48	; 0x30
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}

0800787a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800787a:	b580      	push	{r7, lr}
 800787c:	b084      	sub	sp, #16
 800787e:	af00      	add	r7, sp, #0
 8007880:	60f8      	str	r0, [r7, #12]
 8007882:	60b9      	str	r1, [r7, #8]
 8007884:	607a      	str	r2, [r7, #4]
 8007886:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d103      	bne.n	8007896 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800788e:	69bb      	ldr	r3, [r7, #24]
 8007890:	69ba      	ldr	r2, [r7, #24]
 8007892:	601a      	str	r2, [r3, #0]
 8007894:	e002      	b.n	800789c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007896:	69bb      	ldr	r3, [r7, #24]
 8007898:	687a      	ldr	r2, [r7, #4]
 800789a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800789c:	69bb      	ldr	r3, [r7, #24]
 800789e:	68fa      	ldr	r2, [r7, #12]
 80078a0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80078a2:	69bb      	ldr	r3, [r7, #24]
 80078a4:	68ba      	ldr	r2, [r7, #8]
 80078a6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80078a8:	2101      	movs	r1, #1
 80078aa:	69b8      	ldr	r0, [r7, #24]
 80078ac:	f7ff ff0a 	bl	80076c4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80078b0:	69bb      	ldr	r3, [r7, #24]
 80078b2:	78fa      	ldrb	r2, [r7, #3]
 80078b4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80078b8:	bf00      	nop
 80078ba:	3710      	adds	r7, #16
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}

080078c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b08e      	sub	sp, #56	; 0x38
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	60f8      	str	r0, [r7, #12]
 80078c8:	60b9      	str	r1, [r7, #8]
 80078ca:	607a      	str	r2, [r7, #4]
 80078cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80078ce:	2300      	movs	r3, #0
 80078d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80078d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d109      	bne.n	80078f0 <xQueueGenericSend+0x30>
 80078dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e0:	f383 8811 	msr	BASEPRI, r3
 80078e4:	f3bf 8f6f 	isb	sy
 80078e8:	f3bf 8f4f 	dsb	sy
 80078ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80078ee:	e7fe      	b.n	80078ee <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d103      	bne.n	80078fe <xQueueGenericSend+0x3e>
 80078f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d101      	bne.n	8007902 <xQueueGenericSend+0x42>
 80078fe:	2301      	movs	r3, #1
 8007900:	e000      	b.n	8007904 <xQueueGenericSend+0x44>
 8007902:	2300      	movs	r3, #0
 8007904:	2b00      	cmp	r3, #0
 8007906:	d109      	bne.n	800791c <xQueueGenericSend+0x5c>
 8007908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800790c:	f383 8811 	msr	BASEPRI, r3
 8007910:	f3bf 8f6f 	isb	sy
 8007914:	f3bf 8f4f 	dsb	sy
 8007918:	627b      	str	r3, [r7, #36]	; 0x24
 800791a:	e7fe      	b.n	800791a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	2b02      	cmp	r3, #2
 8007920:	d103      	bne.n	800792a <xQueueGenericSend+0x6a>
 8007922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007926:	2b01      	cmp	r3, #1
 8007928:	d101      	bne.n	800792e <xQueueGenericSend+0x6e>
 800792a:	2301      	movs	r3, #1
 800792c:	e000      	b.n	8007930 <xQueueGenericSend+0x70>
 800792e:	2300      	movs	r3, #0
 8007930:	2b00      	cmp	r3, #0
 8007932:	d109      	bne.n	8007948 <xQueueGenericSend+0x88>
 8007934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007938:	f383 8811 	msr	BASEPRI, r3
 800793c:	f3bf 8f6f 	isb	sy
 8007940:	f3bf 8f4f 	dsb	sy
 8007944:	623b      	str	r3, [r7, #32]
 8007946:	e7fe      	b.n	8007946 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007948:	f001 f998 	bl	8008c7c <xTaskGetSchedulerState>
 800794c:	4603      	mov	r3, r0
 800794e:	2b00      	cmp	r3, #0
 8007950:	d102      	bne.n	8007958 <xQueueGenericSend+0x98>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d101      	bne.n	800795c <xQueueGenericSend+0x9c>
 8007958:	2301      	movs	r3, #1
 800795a:	e000      	b.n	800795e <xQueueGenericSend+0x9e>
 800795c:	2300      	movs	r3, #0
 800795e:	2b00      	cmp	r3, #0
 8007960:	d109      	bne.n	8007976 <xQueueGenericSend+0xb6>
 8007962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007966:	f383 8811 	msr	BASEPRI, r3
 800796a:	f3bf 8f6f 	isb	sy
 800796e:	f3bf 8f4f 	dsb	sy
 8007972:	61fb      	str	r3, [r7, #28]
 8007974:	e7fe      	b.n	8007974 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007976:	f001 fec9 	bl	800970c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800797a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800797c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800797e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007982:	429a      	cmp	r2, r3
 8007984:	d302      	bcc.n	800798c <xQueueGenericSend+0xcc>
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	2b02      	cmp	r3, #2
 800798a:	d129      	bne.n	80079e0 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800798c:	683a      	ldr	r2, [r7, #0]
 800798e:	68b9      	ldr	r1, [r7, #8]
 8007990:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007992:	f000 f9ff 	bl	8007d94 <prvCopyDataToQueue>
 8007996:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800799a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800799c:	2b00      	cmp	r3, #0
 800799e:	d010      	beq.n	80079c2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80079a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a2:	3324      	adds	r3, #36	; 0x24
 80079a4:	4618      	mov	r0, r3
 80079a6:	f000 ffb3 	bl	8008910 <xTaskRemoveFromEventList>
 80079aa:	4603      	mov	r3, r0
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d013      	beq.n	80079d8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80079b0:	4b3f      	ldr	r3, [pc, #252]	; (8007ab0 <xQueueGenericSend+0x1f0>)
 80079b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079b6:	601a      	str	r2, [r3, #0]
 80079b8:	f3bf 8f4f 	dsb	sy
 80079bc:	f3bf 8f6f 	isb	sy
 80079c0:	e00a      	b.n	80079d8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80079c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d007      	beq.n	80079d8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80079c8:	4b39      	ldr	r3, [pc, #228]	; (8007ab0 <xQueueGenericSend+0x1f0>)
 80079ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079ce:	601a      	str	r2, [r3, #0]
 80079d0:	f3bf 8f4f 	dsb	sy
 80079d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80079d8:	f001 fec6 	bl	8009768 <vPortExitCritical>
				return pdPASS;
 80079dc:	2301      	movs	r3, #1
 80079de:	e063      	b.n	8007aa8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d103      	bne.n	80079ee <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80079e6:	f001 febf 	bl	8009768 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80079ea:	2300      	movs	r3, #0
 80079ec:	e05c      	b.n	8007aa8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80079ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d106      	bne.n	8007a02 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80079f4:	f107 0314 	add.w	r3, r7, #20
 80079f8:	4618      	mov	r0, r3
 80079fa:	f000 ffeb 	bl	80089d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80079fe:	2301      	movs	r3, #1
 8007a00:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007a02:	f001 feb1 	bl	8009768 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007a06:	f000 fd67 	bl	80084d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a0a:	f001 fe7f 	bl	800970c <vPortEnterCritical>
 8007a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a14:	b25b      	sxtb	r3, r3
 8007a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a1a:	d103      	bne.n	8007a24 <xQueueGenericSend+0x164>
 8007a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a2a:	b25b      	sxtb	r3, r3
 8007a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a30:	d103      	bne.n	8007a3a <xQueueGenericSend+0x17a>
 8007a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a34:	2200      	movs	r2, #0
 8007a36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a3a:	f001 fe95 	bl	8009768 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007a3e:	1d3a      	adds	r2, r7, #4
 8007a40:	f107 0314 	add.w	r3, r7, #20
 8007a44:	4611      	mov	r1, r2
 8007a46:	4618      	mov	r0, r3
 8007a48:	f000 ffda 	bl	8008a00 <xTaskCheckForTimeOut>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d124      	bne.n	8007a9c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007a52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a54:	f000 fa96 	bl	8007f84 <prvIsQueueFull>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d018      	beq.n	8007a90 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a60:	3310      	adds	r3, #16
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	4611      	mov	r1, r2
 8007a66:	4618      	mov	r0, r3
 8007a68:	f000 ff04 	bl	8008874 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007a6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a6e:	f000 fa21 	bl	8007eb4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007a72:	f000 fd3f 	bl	80084f4 <xTaskResumeAll>
 8007a76:	4603      	mov	r3, r0
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	f47f af7c 	bne.w	8007976 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8007a7e:	4b0c      	ldr	r3, [pc, #48]	; (8007ab0 <xQueueGenericSend+0x1f0>)
 8007a80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a84:	601a      	str	r2, [r3, #0]
 8007a86:	f3bf 8f4f 	dsb	sy
 8007a8a:	f3bf 8f6f 	isb	sy
 8007a8e:	e772      	b.n	8007976 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007a90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a92:	f000 fa0f 	bl	8007eb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007a96:	f000 fd2d 	bl	80084f4 <xTaskResumeAll>
 8007a9a:	e76c      	b.n	8007976 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007a9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a9e:	f000 fa09 	bl	8007eb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007aa2:	f000 fd27 	bl	80084f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007aa6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3738      	adds	r7, #56	; 0x38
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}
 8007ab0:	e000ed04 	.word	0xe000ed04

08007ab4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b08e      	sub	sp, #56	; 0x38
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	60b9      	str	r1, [r7, #8]
 8007abe:	607a      	str	r2, [r7, #4]
 8007ac0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d109      	bne.n	8007ae0 <xQueueGenericSendFromISR+0x2c>
 8007acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad0:	f383 8811 	msr	BASEPRI, r3
 8007ad4:	f3bf 8f6f 	isb	sy
 8007ad8:	f3bf 8f4f 	dsb	sy
 8007adc:	627b      	str	r3, [r7, #36]	; 0x24
 8007ade:	e7fe      	b.n	8007ade <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d103      	bne.n	8007aee <xQueueGenericSendFromISR+0x3a>
 8007ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d101      	bne.n	8007af2 <xQueueGenericSendFromISR+0x3e>
 8007aee:	2301      	movs	r3, #1
 8007af0:	e000      	b.n	8007af4 <xQueueGenericSendFromISR+0x40>
 8007af2:	2300      	movs	r3, #0
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d109      	bne.n	8007b0c <xQueueGenericSendFromISR+0x58>
 8007af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007afc:	f383 8811 	msr	BASEPRI, r3
 8007b00:	f3bf 8f6f 	isb	sy
 8007b04:	f3bf 8f4f 	dsb	sy
 8007b08:	623b      	str	r3, [r7, #32]
 8007b0a:	e7fe      	b.n	8007b0a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	2b02      	cmp	r3, #2
 8007b10:	d103      	bne.n	8007b1a <xQueueGenericSendFromISR+0x66>
 8007b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	d101      	bne.n	8007b1e <xQueueGenericSendFromISR+0x6a>
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	e000      	b.n	8007b20 <xQueueGenericSendFromISR+0x6c>
 8007b1e:	2300      	movs	r3, #0
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d109      	bne.n	8007b38 <xQueueGenericSendFromISR+0x84>
 8007b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b28:	f383 8811 	msr	BASEPRI, r3
 8007b2c:	f3bf 8f6f 	isb	sy
 8007b30:	f3bf 8f4f 	dsb	sy
 8007b34:	61fb      	str	r3, [r7, #28]
 8007b36:	e7fe      	b.n	8007b36 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007b38:	f001 fec4 	bl	80098c4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007b3c:	f3ef 8211 	mrs	r2, BASEPRI
 8007b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b44:	f383 8811 	msr	BASEPRI, r3
 8007b48:	f3bf 8f6f 	isb	sy
 8007b4c:	f3bf 8f4f 	dsb	sy
 8007b50:	61ba      	str	r2, [r7, #24]
 8007b52:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007b54:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007b56:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d302      	bcc.n	8007b6a <xQueueGenericSendFromISR+0xb6>
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	2b02      	cmp	r3, #2
 8007b68:	d12c      	bne.n	8007bc4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007b74:	683a      	ldr	r2, [r7, #0]
 8007b76:	68b9      	ldr	r1, [r7, #8]
 8007b78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b7a:	f000 f90b 	bl	8007d94 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007b7e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b86:	d112      	bne.n	8007bae <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d016      	beq.n	8007bbe <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b92:	3324      	adds	r3, #36	; 0x24
 8007b94:	4618      	mov	r0, r3
 8007b96:	f000 febb 	bl	8008910 <xTaskRemoveFromEventList>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d00e      	beq.n	8007bbe <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d00b      	beq.n	8007bbe <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2201      	movs	r2, #1
 8007baa:	601a      	str	r2, [r3, #0]
 8007bac:	e007      	b.n	8007bbe <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007bae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	b2db      	uxtb	r3, r3
 8007bb6:	b25a      	sxtb	r2, r3
 8007bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007bc2:	e001      	b.n	8007bc8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	637b      	str	r3, [r7, #52]	; 0x34
 8007bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bca:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3738      	adds	r7, #56	; 0x38
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b08c      	sub	sp, #48	; 0x30
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	60f8      	str	r0, [r7, #12]
 8007be4:	60b9      	str	r1, [r7, #8]
 8007be6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007be8:	2300      	movs	r3, #0
 8007bea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d109      	bne.n	8007c0a <xQueueReceive+0x2e>
	__asm volatile
 8007bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bfa:	f383 8811 	msr	BASEPRI, r3
 8007bfe:	f3bf 8f6f 	isb	sy
 8007c02:	f3bf 8f4f 	dsb	sy
 8007c06:	623b      	str	r3, [r7, #32]
 8007c08:	e7fe      	b.n	8007c08 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d103      	bne.n	8007c18 <xQueueReceive+0x3c>
 8007c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d101      	bne.n	8007c1c <xQueueReceive+0x40>
 8007c18:	2301      	movs	r3, #1
 8007c1a:	e000      	b.n	8007c1e <xQueueReceive+0x42>
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d109      	bne.n	8007c36 <xQueueReceive+0x5a>
 8007c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c26:	f383 8811 	msr	BASEPRI, r3
 8007c2a:	f3bf 8f6f 	isb	sy
 8007c2e:	f3bf 8f4f 	dsb	sy
 8007c32:	61fb      	str	r3, [r7, #28]
 8007c34:	e7fe      	b.n	8007c34 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007c36:	f001 f821 	bl	8008c7c <xTaskGetSchedulerState>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d102      	bne.n	8007c46 <xQueueReceive+0x6a>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d101      	bne.n	8007c4a <xQueueReceive+0x6e>
 8007c46:	2301      	movs	r3, #1
 8007c48:	e000      	b.n	8007c4c <xQueueReceive+0x70>
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d109      	bne.n	8007c64 <xQueueReceive+0x88>
 8007c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c54:	f383 8811 	msr	BASEPRI, r3
 8007c58:	f3bf 8f6f 	isb	sy
 8007c5c:	f3bf 8f4f 	dsb	sy
 8007c60:	61bb      	str	r3, [r7, #24]
 8007c62:	e7fe      	b.n	8007c62 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007c64:	f001 fd52 	bl	800970c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c6c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d01f      	beq.n	8007cb4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007c74:	68b9      	ldr	r1, [r7, #8]
 8007c76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c78:	f000 f8f6 	bl	8007e68 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7e:	1e5a      	subs	r2, r3, #1
 8007c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c82:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c86:	691b      	ldr	r3, [r3, #16]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d00f      	beq.n	8007cac <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c8e:	3310      	adds	r3, #16
 8007c90:	4618      	mov	r0, r3
 8007c92:	f000 fe3d 	bl	8008910 <xTaskRemoveFromEventList>
 8007c96:	4603      	mov	r3, r0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d007      	beq.n	8007cac <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007c9c:	4b3c      	ldr	r3, [pc, #240]	; (8007d90 <xQueueReceive+0x1b4>)
 8007c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ca2:	601a      	str	r2, [r3, #0]
 8007ca4:	f3bf 8f4f 	dsb	sy
 8007ca8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007cac:	f001 fd5c 	bl	8009768 <vPortExitCritical>
				return pdPASS;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	e069      	b.n	8007d88 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d103      	bne.n	8007cc2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007cba:	f001 fd55 	bl	8009768 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	e062      	b.n	8007d88 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d106      	bne.n	8007cd6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007cc8:	f107 0310 	add.w	r3, r7, #16
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f000 fe81 	bl	80089d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007cd6:	f001 fd47 	bl	8009768 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007cda:	f000 fbfd 	bl	80084d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007cde:	f001 fd15 	bl	800970c <vPortEnterCritical>
 8007ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ce8:	b25b      	sxtb	r3, r3
 8007cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cee:	d103      	bne.n	8007cf8 <xQueueReceive+0x11c>
 8007cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cfa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007cfe:	b25b      	sxtb	r3, r3
 8007d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d04:	d103      	bne.n	8007d0e <xQueueReceive+0x132>
 8007d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d0e:	f001 fd2b 	bl	8009768 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007d12:	1d3a      	adds	r2, r7, #4
 8007d14:	f107 0310 	add.w	r3, r7, #16
 8007d18:	4611      	mov	r1, r2
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f000 fe70 	bl	8008a00 <xTaskCheckForTimeOut>
 8007d20:	4603      	mov	r3, r0
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d123      	bne.n	8007d6e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d28:	f000 f916 	bl	8007f58 <prvIsQueueEmpty>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d017      	beq.n	8007d62 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d34:	3324      	adds	r3, #36	; 0x24
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	4611      	mov	r1, r2
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f000 fd9a 	bl	8008874 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007d40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d42:	f000 f8b7 	bl	8007eb4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007d46:	f000 fbd5 	bl	80084f4 <xTaskResumeAll>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d189      	bne.n	8007c64 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8007d50:	4b0f      	ldr	r3, [pc, #60]	; (8007d90 <xQueueReceive+0x1b4>)
 8007d52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d56:	601a      	str	r2, [r3, #0]
 8007d58:	f3bf 8f4f 	dsb	sy
 8007d5c:	f3bf 8f6f 	isb	sy
 8007d60:	e780      	b.n	8007c64 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007d62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d64:	f000 f8a6 	bl	8007eb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007d68:	f000 fbc4 	bl	80084f4 <xTaskResumeAll>
 8007d6c:	e77a      	b.n	8007c64 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007d6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d70:	f000 f8a0 	bl	8007eb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007d74:	f000 fbbe 	bl	80084f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d7a:	f000 f8ed 	bl	8007f58 <prvIsQueueEmpty>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	f43f af6f 	beq.w	8007c64 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007d86:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3730      	adds	r7, #48	; 0x30
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}
 8007d90:	e000ed04 	.word	0xe000ed04

08007d94 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b086      	sub	sp, #24
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	60f8      	str	r0, [r7, #12]
 8007d9c:	60b9      	str	r1, [r7, #8]
 8007d9e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007da0:	2300      	movs	r3, #0
 8007da2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d10d      	bne.n	8007dce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d14d      	bne.n	8007e56 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f000 ff7a 	bl	8008cb8 <xTaskPriorityDisinherit>
 8007dc4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	609a      	str	r2, [r3, #8]
 8007dcc:	e043      	b.n	8007e56 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d119      	bne.n	8007e08 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	6858      	ldr	r0, [r3, #4]
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ddc:	461a      	mov	r2, r3
 8007dde:	68b9      	ldr	r1, [r7, #8]
 8007de0:	f001 ffae 	bl	8009d40 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	685a      	ldr	r2, [r3, #4]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dec:	441a      	add	r2, r3
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	685a      	ldr	r2, [r3, #4]
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	689b      	ldr	r3, [r3, #8]
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d32b      	bcc.n	8007e56 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681a      	ldr	r2, [r3, #0]
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	605a      	str	r2, [r3, #4]
 8007e06:	e026      	b.n	8007e56 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	68d8      	ldr	r0, [r3, #12]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e10:	461a      	mov	r2, r3
 8007e12:	68b9      	ldr	r1, [r7, #8]
 8007e14:	f001 ff94 	bl	8009d40 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	68da      	ldr	r2, [r3, #12]
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e20:	425b      	negs	r3, r3
 8007e22:	441a      	add	r2, r3
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	68da      	ldr	r2, [r3, #12]
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d207      	bcs.n	8007e44 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	689a      	ldr	r2, [r3, #8]
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e3c:	425b      	negs	r3, r3
 8007e3e:	441a      	add	r2, r3
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2b02      	cmp	r3, #2
 8007e48:	d105      	bne.n	8007e56 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d002      	beq.n	8007e56 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	3b01      	subs	r3, #1
 8007e54:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	1c5a      	adds	r2, r3, #1
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007e5e:	697b      	ldr	r3, [r7, #20]
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3718      	adds	r7, #24
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d018      	beq.n	8007eac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	68da      	ldr	r2, [r3, #12]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e82:	441a      	add	r2, r3
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	68da      	ldr	r2, [r3, #12]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d303      	bcc.n	8007e9c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681a      	ldr	r2, [r3, #0]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	68d9      	ldr	r1, [r3, #12]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea4:	461a      	mov	r2, r3
 8007ea6:	6838      	ldr	r0, [r7, #0]
 8007ea8:	f001 ff4a 	bl	8009d40 <memcpy>
	}
}
 8007eac:	bf00      	nop
 8007eae:	3708      	adds	r7, #8
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007ebc:	f001 fc26 	bl	800970c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ec6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007ec8:	e011      	b.n	8007eee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d012      	beq.n	8007ef8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	3324      	adds	r3, #36	; 0x24
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f000 fd1a 	bl	8008910 <xTaskRemoveFromEventList>
 8007edc:	4603      	mov	r3, r0
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d001      	beq.n	8007ee6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007ee2:	f000 fded 	bl	8008ac0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007ee6:	7bfb      	ldrb	r3, [r7, #15]
 8007ee8:	3b01      	subs	r3, #1
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	dce9      	bgt.n	8007eca <prvUnlockQueue+0x16>
 8007ef6:	e000      	b.n	8007efa <prvUnlockQueue+0x46>
					break;
 8007ef8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	22ff      	movs	r2, #255	; 0xff
 8007efe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007f02:	f001 fc31 	bl	8009768 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007f06:	f001 fc01 	bl	800970c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f10:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f12:	e011      	b.n	8007f38 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	691b      	ldr	r3, [r3, #16]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d012      	beq.n	8007f42 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	3310      	adds	r3, #16
 8007f20:	4618      	mov	r0, r3
 8007f22:	f000 fcf5 	bl	8008910 <xTaskRemoveFromEventList>
 8007f26:	4603      	mov	r3, r0
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d001      	beq.n	8007f30 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007f2c:	f000 fdc8 	bl	8008ac0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007f30:	7bbb      	ldrb	r3, [r7, #14]
 8007f32:	3b01      	subs	r3, #1
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	dce9      	bgt.n	8007f14 <prvUnlockQueue+0x60>
 8007f40:	e000      	b.n	8007f44 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007f42:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	22ff      	movs	r2, #255	; 0xff
 8007f48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007f4c:	f001 fc0c 	bl	8009768 <vPortExitCritical>
}
 8007f50:	bf00      	nop
 8007f52:	3710      	adds	r7, #16
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b084      	sub	sp, #16
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007f60:	f001 fbd4 	bl	800970c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d102      	bne.n	8007f72 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	60fb      	str	r3, [r7, #12]
 8007f70:	e001      	b.n	8007f76 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007f72:	2300      	movs	r3, #0
 8007f74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007f76:	f001 fbf7 	bl	8009768 <vPortExitCritical>

	return xReturn;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3710      	adds	r7, #16
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b084      	sub	sp, #16
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007f8c:	f001 fbbe 	bl	800970c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d102      	bne.n	8007fa2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	60fb      	str	r3, [r7, #12]
 8007fa0:	e001      	b.n	8007fa6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007fa6:	f001 fbdf 	bl	8009768 <vPortExitCritical>

	return xReturn;
 8007faa:	68fb      	ldr	r3, [r7, #12]
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3710      	adds	r7, #16
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b085      	sub	sp, #20
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	60fb      	str	r3, [r7, #12]
 8007fc2:	e014      	b.n	8007fee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007fc4:	4a0e      	ldr	r2, [pc, #56]	; (8008000 <vQueueAddToRegistry+0x4c>)
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d10b      	bne.n	8007fe8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007fd0:	490b      	ldr	r1, [pc, #44]	; (8008000 <vQueueAddToRegistry+0x4c>)
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	683a      	ldr	r2, [r7, #0]
 8007fd6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007fda:	4a09      	ldr	r2, [pc, #36]	; (8008000 <vQueueAddToRegistry+0x4c>)
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	00db      	lsls	r3, r3, #3
 8007fe0:	4413      	add	r3, r2
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007fe6:	e005      	b.n	8007ff4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	3301      	adds	r3, #1
 8007fec:	60fb      	str	r3, [r7, #12]
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2b07      	cmp	r3, #7
 8007ff2:	d9e7      	bls.n	8007fc4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007ff4:	bf00      	nop
 8007ff6:	3714      	adds	r7, #20
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr
 8008000:	2000391c 	.word	0x2000391c

08008004 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008004:	b580      	push	{r7, lr}
 8008006:	b086      	sub	sp, #24
 8008008:	af00      	add	r7, sp, #0
 800800a:	60f8      	str	r0, [r7, #12]
 800800c:	60b9      	str	r1, [r7, #8]
 800800e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008014:	f001 fb7a 	bl	800970c <vPortEnterCritical>
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800801e:	b25b      	sxtb	r3, r3
 8008020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008024:	d103      	bne.n	800802e <vQueueWaitForMessageRestricted+0x2a>
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	2200      	movs	r2, #0
 800802a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008034:	b25b      	sxtb	r3, r3
 8008036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800803a:	d103      	bne.n	8008044 <vQueueWaitForMessageRestricted+0x40>
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	2200      	movs	r2, #0
 8008040:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008044:	f001 fb90 	bl	8009768 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800804c:	2b00      	cmp	r3, #0
 800804e:	d106      	bne.n	800805e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	3324      	adds	r3, #36	; 0x24
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	68b9      	ldr	r1, [r7, #8]
 8008058:	4618      	mov	r0, r3
 800805a:	f000 fc2f 	bl	80088bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800805e:	6978      	ldr	r0, [r7, #20]
 8008060:	f7ff ff28 	bl	8007eb4 <prvUnlockQueue>
	}
 8008064:	bf00      	nop
 8008066:	3718      	adds	r7, #24
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800806c:	b580      	push	{r7, lr}
 800806e:	b08e      	sub	sp, #56	; 0x38
 8008070:	af04      	add	r7, sp, #16
 8008072:	60f8      	str	r0, [r7, #12]
 8008074:	60b9      	str	r1, [r7, #8]
 8008076:	607a      	str	r2, [r7, #4]
 8008078:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800807a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800807c:	2b00      	cmp	r3, #0
 800807e:	d109      	bne.n	8008094 <xTaskCreateStatic+0x28>
 8008080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008084:	f383 8811 	msr	BASEPRI, r3
 8008088:	f3bf 8f6f 	isb	sy
 800808c:	f3bf 8f4f 	dsb	sy
 8008090:	623b      	str	r3, [r7, #32]
 8008092:	e7fe      	b.n	8008092 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8008094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008096:	2b00      	cmp	r3, #0
 8008098:	d109      	bne.n	80080ae <xTaskCreateStatic+0x42>
 800809a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800809e:	f383 8811 	msr	BASEPRI, r3
 80080a2:	f3bf 8f6f 	isb	sy
 80080a6:	f3bf 8f4f 	dsb	sy
 80080aa:	61fb      	str	r3, [r7, #28]
 80080ac:	e7fe      	b.n	80080ac <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80080ae:	235c      	movs	r3, #92	; 0x5c
 80080b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	2b5c      	cmp	r3, #92	; 0x5c
 80080b6:	d009      	beq.n	80080cc <xTaskCreateStatic+0x60>
 80080b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080bc:	f383 8811 	msr	BASEPRI, r3
 80080c0:	f3bf 8f6f 	isb	sy
 80080c4:	f3bf 8f4f 	dsb	sy
 80080c8:	61bb      	str	r3, [r7, #24]
 80080ca:	e7fe      	b.n	80080ca <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80080cc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80080ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d01e      	beq.n	8008112 <xTaskCreateStatic+0xa6>
 80080d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d01b      	beq.n	8008112 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80080da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080dc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80080de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80080e2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80080e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e6:	2202      	movs	r2, #2
 80080e8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80080ec:	2300      	movs	r3, #0
 80080ee:	9303      	str	r3, [sp, #12]
 80080f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f2:	9302      	str	r3, [sp, #8]
 80080f4:	f107 0314 	add.w	r3, r7, #20
 80080f8:	9301      	str	r3, [sp, #4]
 80080fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080fc:	9300      	str	r3, [sp, #0]
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	68b9      	ldr	r1, [r7, #8]
 8008104:	68f8      	ldr	r0, [r7, #12]
 8008106:	f000 f850 	bl	80081aa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800810a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800810c:	f000 f8dc 	bl	80082c8 <prvAddNewTaskToReadyList>
 8008110:	e001      	b.n	8008116 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8008112:	2300      	movs	r3, #0
 8008114:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008116:	697b      	ldr	r3, [r7, #20]
	}
 8008118:	4618      	mov	r0, r3
 800811a:	3728      	adds	r7, #40	; 0x28
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008120:	b580      	push	{r7, lr}
 8008122:	b08c      	sub	sp, #48	; 0x30
 8008124:	af04      	add	r7, sp, #16
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	60b9      	str	r1, [r7, #8]
 800812a:	603b      	str	r3, [r7, #0]
 800812c:	4613      	mov	r3, r2
 800812e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008130:	88fb      	ldrh	r3, [r7, #6]
 8008132:	009b      	lsls	r3, r3, #2
 8008134:	4618      	mov	r0, r3
 8008136:	f001 fc03 	bl	8009940 <pvPortMalloc>
 800813a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d00e      	beq.n	8008160 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008142:	205c      	movs	r0, #92	; 0x5c
 8008144:	f001 fbfc 	bl	8009940 <pvPortMalloc>
 8008148:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800814a:	69fb      	ldr	r3, [r7, #28]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d003      	beq.n	8008158 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008150:	69fb      	ldr	r3, [r7, #28]
 8008152:	697a      	ldr	r2, [r7, #20]
 8008154:	631a      	str	r2, [r3, #48]	; 0x30
 8008156:	e005      	b.n	8008164 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008158:	6978      	ldr	r0, [r7, #20]
 800815a:	f001 fcb3 	bl	8009ac4 <vPortFree>
 800815e:	e001      	b.n	8008164 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008160:	2300      	movs	r3, #0
 8008162:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008164:	69fb      	ldr	r3, [r7, #28]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d017      	beq.n	800819a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800816a:	69fb      	ldr	r3, [r7, #28]
 800816c:	2200      	movs	r2, #0
 800816e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008172:	88fa      	ldrh	r2, [r7, #6]
 8008174:	2300      	movs	r3, #0
 8008176:	9303      	str	r3, [sp, #12]
 8008178:	69fb      	ldr	r3, [r7, #28]
 800817a:	9302      	str	r3, [sp, #8]
 800817c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800817e:	9301      	str	r3, [sp, #4]
 8008180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008182:	9300      	str	r3, [sp, #0]
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	68b9      	ldr	r1, [r7, #8]
 8008188:	68f8      	ldr	r0, [r7, #12]
 800818a:	f000 f80e 	bl	80081aa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800818e:	69f8      	ldr	r0, [r7, #28]
 8008190:	f000 f89a 	bl	80082c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008194:	2301      	movs	r3, #1
 8008196:	61bb      	str	r3, [r7, #24]
 8008198:	e002      	b.n	80081a0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800819a:	f04f 33ff 	mov.w	r3, #4294967295
 800819e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80081a0:	69bb      	ldr	r3, [r7, #24]
	}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3720      	adds	r7, #32
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}

080081aa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80081aa:	b580      	push	{r7, lr}
 80081ac:	b088      	sub	sp, #32
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	60f8      	str	r0, [r7, #12]
 80081b2:	60b9      	str	r1, [r7, #8]
 80081b4:	607a      	str	r2, [r7, #4]
 80081b6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80081b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ba:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	009b      	lsls	r3, r3, #2
 80081c0:	461a      	mov	r2, r3
 80081c2:	21a5      	movs	r1, #165	; 0xa5
 80081c4:	f001 fdc7 	bl	8009d56 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80081c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80081d2:	3b01      	subs	r3, #1
 80081d4:	009b      	lsls	r3, r3, #2
 80081d6:	4413      	add	r3, r2
 80081d8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80081da:	69bb      	ldr	r3, [r7, #24]
 80081dc:	f023 0307 	bic.w	r3, r3, #7
 80081e0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80081e2:	69bb      	ldr	r3, [r7, #24]
 80081e4:	f003 0307 	and.w	r3, r3, #7
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d009      	beq.n	8008200 <prvInitialiseNewTask+0x56>
 80081ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f0:	f383 8811 	msr	BASEPRI, r3
 80081f4:	f3bf 8f6f 	isb	sy
 80081f8:	f3bf 8f4f 	dsb	sy
 80081fc:	617b      	str	r3, [r7, #20]
 80081fe:	e7fe      	b.n	80081fe <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d01f      	beq.n	8008246 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008206:	2300      	movs	r3, #0
 8008208:	61fb      	str	r3, [r7, #28]
 800820a:	e012      	b.n	8008232 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800820c:	68ba      	ldr	r2, [r7, #8]
 800820e:	69fb      	ldr	r3, [r7, #28]
 8008210:	4413      	add	r3, r2
 8008212:	7819      	ldrb	r1, [r3, #0]
 8008214:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008216:	69fb      	ldr	r3, [r7, #28]
 8008218:	4413      	add	r3, r2
 800821a:	3334      	adds	r3, #52	; 0x34
 800821c:	460a      	mov	r2, r1
 800821e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008220:	68ba      	ldr	r2, [r7, #8]
 8008222:	69fb      	ldr	r3, [r7, #28]
 8008224:	4413      	add	r3, r2
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d006      	beq.n	800823a <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800822c:	69fb      	ldr	r3, [r7, #28]
 800822e:	3301      	adds	r3, #1
 8008230:	61fb      	str	r3, [r7, #28]
 8008232:	69fb      	ldr	r3, [r7, #28]
 8008234:	2b0f      	cmp	r3, #15
 8008236:	d9e9      	bls.n	800820c <prvInitialiseNewTask+0x62>
 8008238:	e000      	b.n	800823c <prvInitialiseNewTask+0x92>
			{
				break;
 800823a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800823c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800823e:	2200      	movs	r2, #0
 8008240:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008244:	e003      	b.n	800824e <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008248:	2200      	movs	r2, #0
 800824a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800824e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008250:	2b37      	cmp	r3, #55	; 0x37
 8008252:	d901      	bls.n	8008258 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008254:	2337      	movs	r3, #55	; 0x37
 8008256:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800825a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800825c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800825e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008260:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008262:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008266:	2200      	movs	r2, #0
 8008268:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800826a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800826c:	3304      	adds	r3, #4
 800826e:	4618      	mov	r0, r3
 8008270:	f7ff f994 	bl	800759c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008276:	3318      	adds	r3, #24
 8008278:	4618      	mov	r0, r3
 800827a:	f7ff f98f 	bl	800759c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800827e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008282:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008286:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800828a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800828c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800828e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008290:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008292:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008296:	2200      	movs	r2, #0
 8008298:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800829a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800829c:	2200      	movs	r2, #0
 800829e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80082a2:	683a      	ldr	r2, [r7, #0]
 80082a4:	68f9      	ldr	r1, [r7, #12]
 80082a6:	69b8      	ldr	r0, [r7, #24]
 80082a8:	f001 f90c 	bl	80094c4 <pxPortInitialiseStack>
 80082ac:	4602      	mov	r2, r0
 80082ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80082b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d002      	beq.n	80082be <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80082b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80082be:	bf00      	nop
 80082c0:	3720      	adds	r7, #32
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
	...

080082c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80082d0:	f001 fa1c 	bl	800970c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80082d4:	4b2d      	ldr	r3, [pc, #180]	; (800838c <prvAddNewTaskToReadyList+0xc4>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	3301      	adds	r3, #1
 80082da:	4a2c      	ldr	r2, [pc, #176]	; (800838c <prvAddNewTaskToReadyList+0xc4>)
 80082dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80082de:	4b2c      	ldr	r3, [pc, #176]	; (8008390 <prvAddNewTaskToReadyList+0xc8>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d109      	bne.n	80082fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80082e6:	4a2a      	ldr	r2, [pc, #168]	; (8008390 <prvAddNewTaskToReadyList+0xc8>)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80082ec:	4b27      	ldr	r3, [pc, #156]	; (800838c <prvAddNewTaskToReadyList+0xc4>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d110      	bne.n	8008316 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80082f4:	f000 fc08 	bl	8008b08 <prvInitialiseTaskLists>
 80082f8:	e00d      	b.n	8008316 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80082fa:	4b26      	ldr	r3, [pc, #152]	; (8008394 <prvAddNewTaskToReadyList+0xcc>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d109      	bne.n	8008316 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008302:	4b23      	ldr	r3, [pc, #140]	; (8008390 <prvAddNewTaskToReadyList+0xc8>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800830c:	429a      	cmp	r2, r3
 800830e:	d802      	bhi.n	8008316 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008310:	4a1f      	ldr	r2, [pc, #124]	; (8008390 <prvAddNewTaskToReadyList+0xc8>)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008316:	4b20      	ldr	r3, [pc, #128]	; (8008398 <prvAddNewTaskToReadyList+0xd0>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	3301      	adds	r3, #1
 800831c:	4a1e      	ldr	r2, [pc, #120]	; (8008398 <prvAddNewTaskToReadyList+0xd0>)
 800831e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008320:	4b1d      	ldr	r3, [pc, #116]	; (8008398 <prvAddNewTaskToReadyList+0xd0>)
 8008322:	681a      	ldr	r2, [r3, #0]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800832c:	4b1b      	ldr	r3, [pc, #108]	; (800839c <prvAddNewTaskToReadyList+0xd4>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	429a      	cmp	r2, r3
 8008332:	d903      	bls.n	800833c <prvAddNewTaskToReadyList+0x74>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008338:	4a18      	ldr	r2, [pc, #96]	; (800839c <prvAddNewTaskToReadyList+0xd4>)
 800833a:	6013      	str	r3, [r2, #0]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008340:	4613      	mov	r3, r2
 8008342:	009b      	lsls	r3, r3, #2
 8008344:	4413      	add	r3, r2
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	4a15      	ldr	r2, [pc, #84]	; (80083a0 <prvAddNewTaskToReadyList+0xd8>)
 800834a:	441a      	add	r2, r3
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	3304      	adds	r3, #4
 8008350:	4619      	mov	r1, r3
 8008352:	4610      	mov	r0, r2
 8008354:	f7ff f92f 	bl	80075b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008358:	f001 fa06 	bl	8009768 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800835c:	4b0d      	ldr	r3, [pc, #52]	; (8008394 <prvAddNewTaskToReadyList+0xcc>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d00e      	beq.n	8008382 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008364:	4b0a      	ldr	r3, [pc, #40]	; (8008390 <prvAddNewTaskToReadyList+0xc8>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800836e:	429a      	cmp	r2, r3
 8008370:	d207      	bcs.n	8008382 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008372:	4b0c      	ldr	r3, [pc, #48]	; (80083a4 <prvAddNewTaskToReadyList+0xdc>)
 8008374:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008378:	601a      	str	r2, [r3, #0]
 800837a:	f3bf 8f4f 	dsb	sy
 800837e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008382:	bf00      	nop
 8008384:	3708      	adds	r7, #8
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}
 800838a:	bf00      	nop
 800838c:	20000d1c 	.word	0x20000d1c
 8008390:	20000848 	.word	0x20000848
 8008394:	20000d28 	.word	0x20000d28
 8008398:	20000d38 	.word	0x20000d38
 800839c:	20000d24 	.word	0x20000d24
 80083a0:	2000084c 	.word	0x2000084c
 80083a4:	e000ed04 	.word	0xe000ed04

080083a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b084      	sub	sp, #16
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80083b0:	2300      	movs	r3, #0
 80083b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d016      	beq.n	80083e8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80083ba:	4b13      	ldr	r3, [pc, #76]	; (8008408 <vTaskDelay+0x60>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d009      	beq.n	80083d6 <vTaskDelay+0x2e>
 80083c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c6:	f383 8811 	msr	BASEPRI, r3
 80083ca:	f3bf 8f6f 	isb	sy
 80083ce:	f3bf 8f4f 	dsb	sy
 80083d2:	60bb      	str	r3, [r7, #8]
 80083d4:	e7fe      	b.n	80083d4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80083d6:	f000 f87f 	bl	80084d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80083da:	2100      	movs	r1, #0
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f000 fcd7 	bl	8008d90 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80083e2:	f000 f887 	bl	80084f4 <xTaskResumeAll>
 80083e6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d107      	bne.n	80083fe <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80083ee:	4b07      	ldr	r3, [pc, #28]	; (800840c <vTaskDelay+0x64>)
 80083f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083f4:	601a      	str	r2, [r3, #0]
 80083f6:	f3bf 8f4f 	dsb	sy
 80083fa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80083fe:	bf00      	nop
 8008400:	3710      	adds	r7, #16
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
 8008406:	bf00      	nop
 8008408:	20000d44 	.word	0x20000d44
 800840c:	e000ed04 	.word	0xe000ed04

08008410 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b08a      	sub	sp, #40	; 0x28
 8008414:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008416:	2300      	movs	r3, #0
 8008418:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800841a:	2300      	movs	r3, #0
 800841c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800841e:	463a      	mov	r2, r7
 8008420:	1d39      	adds	r1, r7, #4
 8008422:	f107 0308 	add.w	r3, r7, #8
 8008426:	4618      	mov	r0, r3
 8008428:	f7ff f864 	bl	80074f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800842c:	6839      	ldr	r1, [r7, #0]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	68ba      	ldr	r2, [r7, #8]
 8008432:	9202      	str	r2, [sp, #8]
 8008434:	9301      	str	r3, [sp, #4]
 8008436:	2300      	movs	r3, #0
 8008438:	9300      	str	r3, [sp, #0]
 800843a:	2300      	movs	r3, #0
 800843c:	460a      	mov	r2, r1
 800843e:	4920      	ldr	r1, [pc, #128]	; (80084c0 <vTaskStartScheduler+0xb0>)
 8008440:	4820      	ldr	r0, [pc, #128]	; (80084c4 <vTaskStartScheduler+0xb4>)
 8008442:	f7ff fe13 	bl	800806c <xTaskCreateStatic>
 8008446:	4602      	mov	r2, r0
 8008448:	4b1f      	ldr	r3, [pc, #124]	; (80084c8 <vTaskStartScheduler+0xb8>)
 800844a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800844c:	4b1e      	ldr	r3, [pc, #120]	; (80084c8 <vTaskStartScheduler+0xb8>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d002      	beq.n	800845a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008454:	2301      	movs	r3, #1
 8008456:	617b      	str	r3, [r7, #20]
 8008458:	e001      	b.n	800845e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800845a:	2300      	movs	r3, #0
 800845c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	2b01      	cmp	r3, #1
 8008462:	d102      	bne.n	800846a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008464:	f000 fce8 	bl	8008e38 <xTimerCreateTimerTask>
 8008468:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	2b01      	cmp	r3, #1
 800846e:	d115      	bne.n	800849c <vTaskStartScheduler+0x8c>
 8008470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008474:	f383 8811 	msr	BASEPRI, r3
 8008478:	f3bf 8f6f 	isb	sy
 800847c:	f3bf 8f4f 	dsb	sy
 8008480:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008482:	4b12      	ldr	r3, [pc, #72]	; (80084cc <vTaskStartScheduler+0xbc>)
 8008484:	f04f 32ff 	mov.w	r2, #4294967295
 8008488:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800848a:	4b11      	ldr	r3, [pc, #68]	; (80084d0 <vTaskStartScheduler+0xc0>)
 800848c:	2201      	movs	r2, #1
 800848e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008490:	4b10      	ldr	r3, [pc, #64]	; (80084d4 <vTaskStartScheduler+0xc4>)
 8008492:	2200      	movs	r2, #0
 8008494:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008496:	f001 f89b 	bl	80095d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800849a:	e00d      	b.n	80084b8 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084a2:	d109      	bne.n	80084b8 <vTaskStartScheduler+0xa8>
 80084a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a8:	f383 8811 	msr	BASEPRI, r3
 80084ac:	f3bf 8f6f 	isb	sy
 80084b0:	f3bf 8f4f 	dsb	sy
 80084b4:	60fb      	str	r3, [r7, #12]
 80084b6:	e7fe      	b.n	80084b6 <vTaskStartScheduler+0xa6>
}
 80084b8:	bf00      	nop
 80084ba:	3718      	adds	r7, #24
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}
 80084c0:	0800a6bc 	.word	0x0800a6bc
 80084c4:	08008ad9 	.word	0x08008ad9
 80084c8:	20000d40 	.word	0x20000d40
 80084cc:	20000d3c 	.word	0x20000d3c
 80084d0:	20000d28 	.word	0x20000d28
 80084d4:	20000d20 	.word	0x20000d20

080084d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80084d8:	b480      	push	{r7}
 80084da:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80084dc:	4b04      	ldr	r3, [pc, #16]	; (80084f0 <vTaskSuspendAll+0x18>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	3301      	adds	r3, #1
 80084e2:	4a03      	ldr	r2, [pc, #12]	; (80084f0 <vTaskSuspendAll+0x18>)
 80084e4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80084e6:	bf00      	nop
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr
 80084f0:	20000d44 	.word	0x20000d44

080084f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b084      	sub	sp, #16
 80084f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80084fa:	2300      	movs	r3, #0
 80084fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80084fe:	2300      	movs	r3, #0
 8008500:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008502:	4b41      	ldr	r3, [pc, #260]	; (8008608 <xTaskResumeAll+0x114>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d109      	bne.n	800851e <xTaskResumeAll+0x2a>
 800850a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800850e:	f383 8811 	msr	BASEPRI, r3
 8008512:	f3bf 8f6f 	isb	sy
 8008516:	f3bf 8f4f 	dsb	sy
 800851a:	603b      	str	r3, [r7, #0]
 800851c:	e7fe      	b.n	800851c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800851e:	f001 f8f5 	bl	800970c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008522:	4b39      	ldr	r3, [pc, #228]	; (8008608 <xTaskResumeAll+0x114>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	3b01      	subs	r3, #1
 8008528:	4a37      	ldr	r2, [pc, #220]	; (8008608 <xTaskResumeAll+0x114>)
 800852a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800852c:	4b36      	ldr	r3, [pc, #216]	; (8008608 <xTaskResumeAll+0x114>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d162      	bne.n	80085fa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008534:	4b35      	ldr	r3, [pc, #212]	; (800860c <xTaskResumeAll+0x118>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d05e      	beq.n	80085fa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800853c:	e02f      	b.n	800859e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800853e:	4b34      	ldr	r3, [pc, #208]	; (8008610 <xTaskResumeAll+0x11c>)
 8008540:	68db      	ldr	r3, [r3, #12]
 8008542:	68db      	ldr	r3, [r3, #12]
 8008544:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	3318      	adds	r3, #24
 800854a:	4618      	mov	r0, r3
 800854c:	f7ff f890 	bl	8007670 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	3304      	adds	r3, #4
 8008554:	4618      	mov	r0, r3
 8008556:	f7ff f88b 	bl	8007670 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800855e:	4b2d      	ldr	r3, [pc, #180]	; (8008614 <xTaskResumeAll+0x120>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	429a      	cmp	r2, r3
 8008564:	d903      	bls.n	800856e <xTaskResumeAll+0x7a>
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800856a:	4a2a      	ldr	r2, [pc, #168]	; (8008614 <xTaskResumeAll+0x120>)
 800856c:	6013      	str	r3, [r2, #0]
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008572:	4613      	mov	r3, r2
 8008574:	009b      	lsls	r3, r3, #2
 8008576:	4413      	add	r3, r2
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	4a27      	ldr	r2, [pc, #156]	; (8008618 <xTaskResumeAll+0x124>)
 800857c:	441a      	add	r2, r3
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	3304      	adds	r3, #4
 8008582:	4619      	mov	r1, r3
 8008584:	4610      	mov	r0, r2
 8008586:	f7ff f816 	bl	80075b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800858e:	4b23      	ldr	r3, [pc, #140]	; (800861c <xTaskResumeAll+0x128>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008594:	429a      	cmp	r2, r3
 8008596:	d302      	bcc.n	800859e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008598:	4b21      	ldr	r3, [pc, #132]	; (8008620 <xTaskResumeAll+0x12c>)
 800859a:	2201      	movs	r2, #1
 800859c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800859e:	4b1c      	ldr	r3, [pc, #112]	; (8008610 <xTaskResumeAll+0x11c>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d1cb      	bne.n	800853e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d001      	beq.n	80085b0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80085ac:	f000 fb46 	bl	8008c3c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80085b0:	4b1c      	ldr	r3, [pc, #112]	; (8008624 <xTaskResumeAll+0x130>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d010      	beq.n	80085de <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80085bc:	f000 f846 	bl	800864c <xTaskIncrementTick>
 80085c0:	4603      	mov	r3, r0
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d002      	beq.n	80085cc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80085c6:	4b16      	ldr	r3, [pc, #88]	; (8008620 <xTaskResumeAll+0x12c>)
 80085c8:	2201      	movs	r2, #1
 80085ca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	3b01      	subs	r3, #1
 80085d0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d1f1      	bne.n	80085bc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80085d8:	4b12      	ldr	r3, [pc, #72]	; (8008624 <xTaskResumeAll+0x130>)
 80085da:	2200      	movs	r2, #0
 80085dc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80085de:	4b10      	ldr	r3, [pc, #64]	; (8008620 <xTaskResumeAll+0x12c>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d009      	beq.n	80085fa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80085e6:	2301      	movs	r3, #1
 80085e8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80085ea:	4b0f      	ldr	r3, [pc, #60]	; (8008628 <xTaskResumeAll+0x134>)
 80085ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085f0:	601a      	str	r2, [r3, #0]
 80085f2:	f3bf 8f4f 	dsb	sy
 80085f6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80085fa:	f001 f8b5 	bl	8009768 <vPortExitCritical>

	return xAlreadyYielded;
 80085fe:	68bb      	ldr	r3, [r7, #8]
}
 8008600:	4618      	mov	r0, r3
 8008602:	3710      	adds	r7, #16
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}
 8008608:	20000d44 	.word	0x20000d44
 800860c:	20000d1c 	.word	0x20000d1c
 8008610:	20000cdc 	.word	0x20000cdc
 8008614:	20000d24 	.word	0x20000d24
 8008618:	2000084c 	.word	0x2000084c
 800861c:	20000848 	.word	0x20000848
 8008620:	20000d30 	.word	0x20000d30
 8008624:	20000d2c 	.word	0x20000d2c
 8008628:	e000ed04 	.word	0xe000ed04

0800862c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800862c:	b480      	push	{r7}
 800862e:	b083      	sub	sp, #12
 8008630:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008632:	4b05      	ldr	r3, [pc, #20]	; (8008648 <xTaskGetTickCount+0x1c>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008638:	687b      	ldr	r3, [r7, #4]
}
 800863a:	4618      	mov	r0, r3
 800863c:	370c      	adds	r7, #12
 800863e:	46bd      	mov	sp, r7
 8008640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008644:	4770      	bx	lr
 8008646:	bf00      	nop
 8008648:	20000d20 	.word	0x20000d20

0800864c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b086      	sub	sp, #24
 8008650:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008652:	2300      	movs	r3, #0
 8008654:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008656:	4b4e      	ldr	r3, [pc, #312]	; (8008790 <xTaskIncrementTick+0x144>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	2b00      	cmp	r3, #0
 800865c:	f040 8088 	bne.w	8008770 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008660:	4b4c      	ldr	r3, [pc, #304]	; (8008794 <xTaskIncrementTick+0x148>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	3301      	adds	r3, #1
 8008666:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008668:	4a4a      	ldr	r2, [pc, #296]	; (8008794 <xTaskIncrementTick+0x148>)
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d11f      	bne.n	80086b4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8008674:	4b48      	ldr	r3, [pc, #288]	; (8008798 <xTaskIncrementTick+0x14c>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d009      	beq.n	8008692 <xTaskIncrementTick+0x46>
 800867e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008682:	f383 8811 	msr	BASEPRI, r3
 8008686:	f3bf 8f6f 	isb	sy
 800868a:	f3bf 8f4f 	dsb	sy
 800868e:	603b      	str	r3, [r7, #0]
 8008690:	e7fe      	b.n	8008690 <xTaskIncrementTick+0x44>
 8008692:	4b41      	ldr	r3, [pc, #260]	; (8008798 <xTaskIncrementTick+0x14c>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	60fb      	str	r3, [r7, #12]
 8008698:	4b40      	ldr	r3, [pc, #256]	; (800879c <xTaskIncrementTick+0x150>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4a3e      	ldr	r2, [pc, #248]	; (8008798 <xTaskIncrementTick+0x14c>)
 800869e:	6013      	str	r3, [r2, #0]
 80086a0:	4a3e      	ldr	r2, [pc, #248]	; (800879c <xTaskIncrementTick+0x150>)
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	6013      	str	r3, [r2, #0]
 80086a6:	4b3e      	ldr	r3, [pc, #248]	; (80087a0 <xTaskIncrementTick+0x154>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	3301      	adds	r3, #1
 80086ac:	4a3c      	ldr	r2, [pc, #240]	; (80087a0 <xTaskIncrementTick+0x154>)
 80086ae:	6013      	str	r3, [r2, #0]
 80086b0:	f000 fac4 	bl	8008c3c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80086b4:	4b3b      	ldr	r3, [pc, #236]	; (80087a4 <xTaskIncrementTick+0x158>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	693a      	ldr	r2, [r7, #16]
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d349      	bcc.n	8008752 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086be:	4b36      	ldr	r3, [pc, #216]	; (8008798 <xTaskIncrementTick+0x14c>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d104      	bne.n	80086d2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086c8:	4b36      	ldr	r3, [pc, #216]	; (80087a4 <xTaskIncrementTick+0x158>)
 80086ca:	f04f 32ff 	mov.w	r2, #4294967295
 80086ce:	601a      	str	r2, [r3, #0]
					break;
 80086d0:	e03f      	b.n	8008752 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086d2:	4b31      	ldr	r3, [pc, #196]	; (8008798 <xTaskIncrementTick+0x14c>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	68db      	ldr	r3, [r3, #12]
 80086d8:	68db      	ldr	r3, [r3, #12]
 80086da:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80086e2:	693a      	ldr	r2, [r7, #16]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	429a      	cmp	r2, r3
 80086e8:	d203      	bcs.n	80086f2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80086ea:	4a2e      	ldr	r2, [pc, #184]	; (80087a4 <xTaskIncrementTick+0x158>)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80086f0:	e02f      	b.n	8008752 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	3304      	adds	r3, #4
 80086f6:	4618      	mov	r0, r3
 80086f8:	f7fe ffba 	bl	8007670 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008700:	2b00      	cmp	r3, #0
 8008702:	d004      	beq.n	800870e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	3318      	adds	r3, #24
 8008708:	4618      	mov	r0, r3
 800870a:	f7fe ffb1 	bl	8007670 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008712:	4b25      	ldr	r3, [pc, #148]	; (80087a8 <xTaskIncrementTick+0x15c>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	429a      	cmp	r2, r3
 8008718:	d903      	bls.n	8008722 <xTaskIncrementTick+0xd6>
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800871e:	4a22      	ldr	r2, [pc, #136]	; (80087a8 <xTaskIncrementTick+0x15c>)
 8008720:	6013      	str	r3, [r2, #0]
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008726:	4613      	mov	r3, r2
 8008728:	009b      	lsls	r3, r3, #2
 800872a:	4413      	add	r3, r2
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	4a1f      	ldr	r2, [pc, #124]	; (80087ac <xTaskIncrementTick+0x160>)
 8008730:	441a      	add	r2, r3
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	3304      	adds	r3, #4
 8008736:	4619      	mov	r1, r3
 8008738:	4610      	mov	r0, r2
 800873a:	f7fe ff3c 	bl	80075b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008742:	4b1b      	ldr	r3, [pc, #108]	; (80087b0 <xTaskIncrementTick+0x164>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008748:	429a      	cmp	r2, r3
 800874a:	d3b8      	bcc.n	80086be <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800874c:	2301      	movs	r3, #1
 800874e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008750:	e7b5      	b.n	80086be <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008752:	4b17      	ldr	r3, [pc, #92]	; (80087b0 <xTaskIncrementTick+0x164>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008758:	4914      	ldr	r1, [pc, #80]	; (80087ac <xTaskIncrementTick+0x160>)
 800875a:	4613      	mov	r3, r2
 800875c:	009b      	lsls	r3, r3, #2
 800875e:	4413      	add	r3, r2
 8008760:	009b      	lsls	r3, r3, #2
 8008762:	440b      	add	r3, r1
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	2b01      	cmp	r3, #1
 8008768:	d907      	bls.n	800877a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800876a:	2301      	movs	r3, #1
 800876c:	617b      	str	r3, [r7, #20]
 800876e:	e004      	b.n	800877a <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008770:	4b10      	ldr	r3, [pc, #64]	; (80087b4 <xTaskIncrementTick+0x168>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	3301      	adds	r3, #1
 8008776:	4a0f      	ldr	r2, [pc, #60]	; (80087b4 <xTaskIncrementTick+0x168>)
 8008778:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800877a:	4b0f      	ldr	r3, [pc, #60]	; (80087b8 <xTaskIncrementTick+0x16c>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d001      	beq.n	8008786 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8008782:	2301      	movs	r3, #1
 8008784:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008786:	697b      	ldr	r3, [r7, #20]
}
 8008788:	4618      	mov	r0, r3
 800878a:	3718      	adds	r7, #24
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}
 8008790:	20000d44 	.word	0x20000d44
 8008794:	20000d20 	.word	0x20000d20
 8008798:	20000cd4 	.word	0x20000cd4
 800879c:	20000cd8 	.word	0x20000cd8
 80087a0:	20000d34 	.word	0x20000d34
 80087a4:	20000d3c 	.word	0x20000d3c
 80087a8:	20000d24 	.word	0x20000d24
 80087ac:	2000084c 	.word	0x2000084c
 80087b0:	20000848 	.word	0x20000848
 80087b4:	20000d2c 	.word	0x20000d2c
 80087b8:	20000d30 	.word	0x20000d30

080087bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80087bc:	b480      	push	{r7}
 80087be:	b085      	sub	sp, #20
 80087c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80087c2:	4b27      	ldr	r3, [pc, #156]	; (8008860 <vTaskSwitchContext+0xa4>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d003      	beq.n	80087d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80087ca:	4b26      	ldr	r3, [pc, #152]	; (8008864 <vTaskSwitchContext+0xa8>)
 80087cc:	2201      	movs	r2, #1
 80087ce:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80087d0:	e040      	b.n	8008854 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80087d2:	4b24      	ldr	r3, [pc, #144]	; (8008864 <vTaskSwitchContext+0xa8>)
 80087d4:	2200      	movs	r2, #0
 80087d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087d8:	4b23      	ldr	r3, [pc, #140]	; (8008868 <vTaskSwitchContext+0xac>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	60fb      	str	r3, [r7, #12]
 80087de:	e00f      	b.n	8008800 <vTaskSwitchContext+0x44>
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d109      	bne.n	80087fa <vTaskSwitchContext+0x3e>
 80087e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ea:	f383 8811 	msr	BASEPRI, r3
 80087ee:	f3bf 8f6f 	isb	sy
 80087f2:	f3bf 8f4f 	dsb	sy
 80087f6:	607b      	str	r3, [r7, #4]
 80087f8:	e7fe      	b.n	80087f8 <vTaskSwitchContext+0x3c>
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	3b01      	subs	r3, #1
 80087fe:	60fb      	str	r3, [r7, #12]
 8008800:	491a      	ldr	r1, [pc, #104]	; (800886c <vTaskSwitchContext+0xb0>)
 8008802:	68fa      	ldr	r2, [r7, #12]
 8008804:	4613      	mov	r3, r2
 8008806:	009b      	lsls	r3, r3, #2
 8008808:	4413      	add	r3, r2
 800880a:	009b      	lsls	r3, r3, #2
 800880c:	440b      	add	r3, r1
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d0e5      	beq.n	80087e0 <vTaskSwitchContext+0x24>
 8008814:	68fa      	ldr	r2, [r7, #12]
 8008816:	4613      	mov	r3, r2
 8008818:	009b      	lsls	r3, r3, #2
 800881a:	4413      	add	r3, r2
 800881c:	009b      	lsls	r3, r3, #2
 800881e:	4a13      	ldr	r2, [pc, #76]	; (800886c <vTaskSwitchContext+0xb0>)
 8008820:	4413      	add	r3, r2
 8008822:	60bb      	str	r3, [r7, #8]
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	685a      	ldr	r2, [r3, #4]
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	605a      	str	r2, [r3, #4]
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	685a      	ldr	r2, [r3, #4]
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	3308      	adds	r3, #8
 8008836:	429a      	cmp	r2, r3
 8008838:	d104      	bne.n	8008844 <vTaskSwitchContext+0x88>
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	685a      	ldr	r2, [r3, #4]
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	605a      	str	r2, [r3, #4]
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	68db      	ldr	r3, [r3, #12]
 800884a:	4a09      	ldr	r2, [pc, #36]	; (8008870 <vTaskSwitchContext+0xb4>)
 800884c:	6013      	str	r3, [r2, #0]
 800884e:	4a06      	ldr	r2, [pc, #24]	; (8008868 <vTaskSwitchContext+0xac>)
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	6013      	str	r3, [r2, #0]
}
 8008854:	bf00      	nop
 8008856:	3714      	adds	r7, #20
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr
 8008860:	20000d44 	.word	0x20000d44
 8008864:	20000d30 	.word	0x20000d30
 8008868:	20000d24 	.word	0x20000d24
 800886c:	2000084c 	.word	0x2000084c
 8008870:	20000848 	.word	0x20000848

08008874 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b084      	sub	sp, #16
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d109      	bne.n	8008898 <vTaskPlaceOnEventList+0x24>
 8008884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008888:	f383 8811 	msr	BASEPRI, r3
 800888c:	f3bf 8f6f 	isb	sy
 8008890:	f3bf 8f4f 	dsb	sy
 8008894:	60fb      	str	r3, [r7, #12]
 8008896:	e7fe      	b.n	8008896 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008898:	4b07      	ldr	r3, [pc, #28]	; (80088b8 <vTaskPlaceOnEventList+0x44>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	3318      	adds	r3, #24
 800889e:	4619      	mov	r1, r3
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f7fe feac 	bl	80075fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80088a6:	2101      	movs	r1, #1
 80088a8:	6838      	ldr	r0, [r7, #0]
 80088aa:	f000 fa71 	bl	8008d90 <prvAddCurrentTaskToDelayedList>
}
 80088ae:	bf00      	nop
 80088b0:	3710      	adds	r7, #16
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}
 80088b6:	bf00      	nop
 80088b8:	20000848 	.word	0x20000848

080088bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b086      	sub	sp, #24
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	60f8      	str	r0, [r7, #12]
 80088c4:	60b9      	str	r1, [r7, #8]
 80088c6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d109      	bne.n	80088e2 <vTaskPlaceOnEventListRestricted+0x26>
 80088ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d2:	f383 8811 	msr	BASEPRI, r3
 80088d6:	f3bf 8f6f 	isb	sy
 80088da:	f3bf 8f4f 	dsb	sy
 80088de:	617b      	str	r3, [r7, #20]
 80088e0:	e7fe      	b.n	80088e0 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80088e2:	4b0a      	ldr	r3, [pc, #40]	; (800890c <vTaskPlaceOnEventListRestricted+0x50>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	3318      	adds	r3, #24
 80088e8:	4619      	mov	r1, r3
 80088ea:	68f8      	ldr	r0, [r7, #12]
 80088ec:	f7fe fe63 	bl	80075b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d002      	beq.n	80088fc <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80088f6:	f04f 33ff 	mov.w	r3, #4294967295
 80088fa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80088fc:	6879      	ldr	r1, [r7, #4]
 80088fe:	68b8      	ldr	r0, [r7, #8]
 8008900:	f000 fa46 	bl	8008d90 <prvAddCurrentTaskToDelayedList>
	}
 8008904:	bf00      	nop
 8008906:	3718      	adds	r7, #24
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}
 800890c:	20000848 	.word	0x20000848

08008910 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b086      	sub	sp, #24
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	68db      	ldr	r3, [r3, #12]
 800891c:	68db      	ldr	r3, [r3, #12]
 800891e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d109      	bne.n	800893a <xTaskRemoveFromEventList+0x2a>
 8008926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800892a:	f383 8811 	msr	BASEPRI, r3
 800892e:	f3bf 8f6f 	isb	sy
 8008932:	f3bf 8f4f 	dsb	sy
 8008936:	60fb      	str	r3, [r7, #12]
 8008938:	e7fe      	b.n	8008938 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	3318      	adds	r3, #24
 800893e:	4618      	mov	r0, r3
 8008940:	f7fe fe96 	bl	8007670 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008944:	4b1d      	ldr	r3, [pc, #116]	; (80089bc <xTaskRemoveFromEventList+0xac>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d11d      	bne.n	8008988 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	3304      	adds	r3, #4
 8008950:	4618      	mov	r0, r3
 8008952:	f7fe fe8d 	bl	8007670 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800895a:	4b19      	ldr	r3, [pc, #100]	; (80089c0 <xTaskRemoveFromEventList+0xb0>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	429a      	cmp	r2, r3
 8008960:	d903      	bls.n	800896a <xTaskRemoveFromEventList+0x5a>
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008966:	4a16      	ldr	r2, [pc, #88]	; (80089c0 <xTaskRemoveFromEventList+0xb0>)
 8008968:	6013      	str	r3, [r2, #0]
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800896e:	4613      	mov	r3, r2
 8008970:	009b      	lsls	r3, r3, #2
 8008972:	4413      	add	r3, r2
 8008974:	009b      	lsls	r3, r3, #2
 8008976:	4a13      	ldr	r2, [pc, #76]	; (80089c4 <xTaskRemoveFromEventList+0xb4>)
 8008978:	441a      	add	r2, r3
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	3304      	adds	r3, #4
 800897e:	4619      	mov	r1, r3
 8008980:	4610      	mov	r0, r2
 8008982:	f7fe fe18 	bl	80075b6 <vListInsertEnd>
 8008986:	e005      	b.n	8008994 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	3318      	adds	r3, #24
 800898c:	4619      	mov	r1, r3
 800898e:	480e      	ldr	r0, [pc, #56]	; (80089c8 <xTaskRemoveFromEventList+0xb8>)
 8008990:	f7fe fe11 	bl	80075b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008998:	4b0c      	ldr	r3, [pc, #48]	; (80089cc <xTaskRemoveFromEventList+0xbc>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800899e:	429a      	cmp	r2, r3
 80089a0:	d905      	bls.n	80089ae <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80089a2:	2301      	movs	r3, #1
 80089a4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80089a6:	4b0a      	ldr	r3, [pc, #40]	; (80089d0 <xTaskRemoveFromEventList+0xc0>)
 80089a8:	2201      	movs	r2, #1
 80089aa:	601a      	str	r2, [r3, #0]
 80089ac:	e001      	b.n	80089b2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80089ae:	2300      	movs	r3, #0
 80089b0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80089b2:	697b      	ldr	r3, [r7, #20]
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3718      	adds	r7, #24
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}
 80089bc:	20000d44 	.word	0x20000d44
 80089c0:	20000d24 	.word	0x20000d24
 80089c4:	2000084c 	.word	0x2000084c
 80089c8:	20000cdc 	.word	0x20000cdc
 80089cc:	20000848 	.word	0x20000848
 80089d0:	20000d30 	.word	0x20000d30

080089d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80089d4:	b480      	push	{r7}
 80089d6:	b083      	sub	sp, #12
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80089dc:	4b06      	ldr	r3, [pc, #24]	; (80089f8 <vTaskInternalSetTimeOutState+0x24>)
 80089de:	681a      	ldr	r2, [r3, #0]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80089e4:	4b05      	ldr	r3, [pc, #20]	; (80089fc <vTaskInternalSetTimeOutState+0x28>)
 80089e6:	681a      	ldr	r2, [r3, #0]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	605a      	str	r2, [r3, #4]
}
 80089ec:	bf00      	nop
 80089ee:	370c      	adds	r7, #12
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr
 80089f8:	20000d34 	.word	0x20000d34
 80089fc:	20000d20 	.word	0x20000d20

08008a00 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b088      	sub	sp, #32
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d109      	bne.n	8008a24 <xTaskCheckForTimeOut+0x24>
 8008a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a14:	f383 8811 	msr	BASEPRI, r3
 8008a18:	f3bf 8f6f 	isb	sy
 8008a1c:	f3bf 8f4f 	dsb	sy
 8008a20:	613b      	str	r3, [r7, #16]
 8008a22:	e7fe      	b.n	8008a22 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d109      	bne.n	8008a3e <xTaskCheckForTimeOut+0x3e>
 8008a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a2e:	f383 8811 	msr	BASEPRI, r3
 8008a32:	f3bf 8f6f 	isb	sy
 8008a36:	f3bf 8f4f 	dsb	sy
 8008a3a:	60fb      	str	r3, [r7, #12]
 8008a3c:	e7fe      	b.n	8008a3c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8008a3e:	f000 fe65 	bl	800970c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008a42:	4b1d      	ldr	r3, [pc, #116]	; (8008ab8 <xTaskCheckForTimeOut+0xb8>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	69ba      	ldr	r2, [r7, #24]
 8008a4e:	1ad3      	subs	r3, r2, r3
 8008a50:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a5a:	d102      	bne.n	8008a62 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	61fb      	str	r3, [r7, #28]
 8008a60:	e023      	b.n	8008aaa <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681a      	ldr	r2, [r3, #0]
 8008a66:	4b15      	ldr	r3, [pc, #84]	; (8008abc <xTaskCheckForTimeOut+0xbc>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d007      	beq.n	8008a7e <xTaskCheckForTimeOut+0x7e>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	69ba      	ldr	r2, [r7, #24]
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d302      	bcc.n	8008a7e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008a78:	2301      	movs	r3, #1
 8008a7a:	61fb      	str	r3, [r7, #28]
 8008a7c:	e015      	b.n	8008aaa <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	697a      	ldr	r2, [r7, #20]
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d20b      	bcs.n	8008aa0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	681a      	ldr	r2, [r3, #0]
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	1ad2      	subs	r2, r2, r3
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f7ff ff9d 	bl	80089d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	61fb      	str	r3, [r7, #28]
 8008a9e:	e004      	b.n	8008aaa <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008aaa:	f000 fe5d 	bl	8009768 <vPortExitCritical>

	return xReturn;
 8008aae:	69fb      	ldr	r3, [r7, #28]
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3720      	adds	r7, #32
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}
 8008ab8:	20000d20 	.word	0x20000d20
 8008abc:	20000d34 	.word	0x20000d34

08008ac0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008ac4:	4b03      	ldr	r3, [pc, #12]	; (8008ad4 <vTaskMissedYield+0x14>)
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	601a      	str	r2, [r3, #0]
}
 8008aca:	bf00      	nop
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr
 8008ad4:	20000d30 	.word	0x20000d30

08008ad8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008ae0:	f000 f852 	bl	8008b88 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008ae4:	4b06      	ldr	r3, [pc, #24]	; (8008b00 <prvIdleTask+0x28>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d9f9      	bls.n	8008ae0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008aec:	4b05      	ldr	r3, [pc, #20]	; (8008b04 <prvIdleTask+0x2c>)
 8008aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008af2:	601a      	str	r2, [r3, #0]
 8008af4:	f3bf 8f4f 	dsb	sy
 8008af8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008afc:	e7f0      	b.n	8008ae0 <prvIdleTask+0x8>
 8008afe:	bf00      	nop
 8008b00:	2000084c 	.word	0x2000084c
 8008b04:	e000ed04 	.word	0xe000ed04

08008b08 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b082      	sub	sp, #8
 8008b0c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008b0e:	2300      	movs	r3, #0
 8008b10:	607b      	str	r3, [r7, #4]
 8008b12:	e00c      	b.n	8008b2e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008b14:	687a      	ldr	r2, [r7, #4]
 8008b16:	4613      	mov	r3, r2
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	4413      	add	r3, r2
 8008b1c:	009b      	lsls	r3, r3, #2
 8008b1e:	4a12      	ldr	r2, [pc, #72]	; (8008b68 <prvInitialiseTaskLists+0x60>)
 8008b20:	4413      	add	r3, r2
 8008b22:	4618      	mov	r0, r3
 8008b24:	f7fe fd1a 	bl	800755c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	3301      	adds	r3, #1
 8008b2c:	607b      	str	r3, [r7, #4]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2b37      	cmp	r3, #55	; 0x37
 8008b32:	d9ef      	bls.n	8008b14 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008b34:	480d      	ldr	r0, [pc, #52]	; (8008b6c <prvInitialiseTaskLists+0x64>)
 8008b36:	f7fe fd11 	bl	800755c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008b3a:	480d      	ldr	r0, [pc, #52]	; (8008b70 <prvInitialiseTaskLists+0x68>)
 8008b3c:	f7fe fd0e 	bl	800755c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008b40:	480c      	ldr	r0, [pc, #48]	; (8008b74 <prvInitialiseTaskLists+0x6c>)
 8008b42:	f7fe fd0b 	bl	800755c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008b46:	480c      	ldr	r0, [pc, #48]	; (8008b78 <prvInitialiseTaskLists+0x70>)
 8008b48:	f7fe fd08 	bl	800755c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008b4c:	480b      	ldr	r0, [pc, #44]	; (8008b7c <prvInitialiseTaskLists+0x74>)
 8008b4e:	f7fe fd05 	bl	800755c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008b52:	4b0b      	ldr	r3, [pc, #44]	; (8008b80 <prvInitialiseTaskLists+0x78>)
 8008b54:	4a05      	ldr	r2, [pc, #20]	; (8008b6c <prvInitialiseTaskLists+0x64>)
 8008b56:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008b58:	4b0a      	ldr	r3, [pc, #40]	; (8008b84 <prvInitialiseTaskLists+0x7c>)
 8008b5a:	4a05      	ldr	r2, [pc, #20]	; (8008b70 <prvInitialiseTaskLists+0x68>)
 8008b5c:	601a      	str	r2, [r3, #0]
}
 8008b5e:	bf00      	nop
 8008b60:	3708      	adds	r7, #8
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
 8008b66:	bf00      	nop
 8008b68:	2000084c 	.word	0x2000084c
 8008b6c:	20000cac 	.word	0x20000cac
 8008b70:	20000cc0 	.word	0x20000cc0
 8008b74:	20000cdc 	.word	0x20000cdc
 8008b78:	20000cf0 	.word	0x20000cf0
 8008b7c:	20000d08 	.word	0x20000d08
 8008b80:	20000cd4 	.word	0x20000cd4
 8008b84:	20000cd8 	.word	0x20000cd8

08008b88 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b082      	sub	sp, #8
 8008b8c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b8e:	e019      	b.n	8008bc4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008b90:	f000 fdbc 	bl	800970c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b94:	4b0f      	ldr	r3, [pc, #60]	; (8008bd4 <prvCheckTasksWaitingTermination+0x4c>)
 8008b96:	68db      	ldr	r3, [r3, #12]
 8008b98:	68db      	ldr	r3, [r3, #12]
 8008b9a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	3304      	adds	r3, #4
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f7fe fd65 	bl	8007670 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008ba6:	4b0c      	ldr	r3, [pc, #48]	; (8008bd8 <prvCheckTasksWaitingTermination+0x50>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	3b01      	subs	r3, #1
 8008bac:	4a0a      	ldr	r2, [pc, #40]	; (8008bd8 <prvCheckTasksWaitingTermination+0x50>)
 8008bae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008bb0:	4b0a      	ldr	r3, [pc, #40]	; (8008bdc <prvCheckTasksWaitingTermination+0x54>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	3b01      	subs	r3, #1
 8008bb6:	4a09      	ldr	r2, [pc, #36]	; (8008bdc <prvCheckTasksWaitingTermination+0x54>)
 8008bb8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008bba:	f000 fdd5 	bl	8009768 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f000 f80e 	bl	8008be0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008bc4:	4b05      	ldr	r3, [pc, #20]	; (8008bdc <prvCheckTasksWaitingTermination+0x54>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d1e1      	bne.n	8008b90 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008bcc:	bf00      	nop
 8008bce:	3708      	adds	r7, #8
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}
 8008bd4:	20000cf0 	.word	0x20000cf0
 8008bd8:	20000d1c 	.word	0x20000d1c
 8008bdc:	20000d04 	.word	0x20000d04

08008be0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b084      	sub	sp, #16
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d108      	bne.n	8008c04 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f000 ff64 	bl	8009ac4 <vPortFree>
				vPortFree( pxTCB );
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f000 ff61 	bl	8009ac4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008c02:	e017      	b.n	8008c34 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008c0a:	2b01      	cmp	r3, #1
 8008c0c:	d103      	bne.n	8008c16 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 ff58 	bl	8009ac4 <vPortFree>
	}
 8008c14:	e00e      	b.n	8008c34 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008c1c:	2b02      	cmp	r3, #2
 8008c1e:	d009      	beq.n	8008c34 <prvDeleteTCB+0x54>
 8008c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c24:	f383 8811 	msr	BASEPRI, r3
 8008c28:	f3bf 8f6f 	isb	sy
 8008c2c:	f3bf 8f4f 	dsb	sy
 8008c30:	60fb      	str	r3, [r7, #12]
 8008c32:	e7fe      	b.n	8008c32 <prvDeleteTCB+0x52>
	}
 8008c34:	bf00      	nop
 8008c36:	3710      	adds	r7, #16
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b083      	sub	sp, #12
 8008c40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c42:	4b0c      	ldr	r3, [pc, #48]	; (8008c74 <prvResetNextTaskUnblockTime+0x38>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d104      	bne.n	8008c56 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008c4c:	4b0a      	ldr	r3, [pc, #40]	; (8008c78 <prvResetNextTaskUnblockTime+0x3c>)
 8008c4e:	f04f 32ff 	mov.w	r2, #4294967295
 8008c52:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008c54:	e008      	b.n	8008c68 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c56:	4b07      	ldr	r3, [pc, #28]	; (8008c74 <prvResetNextTaskUnblockTime+0x38>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	68db      	ldr	r3, [r3, #12]
 8008c5c:	68db      	ldr	r3, [r3, #12]
 8008c5e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	4a04      	ldr	r2, [pc, #16]	; (8008c78 <prvResetNextTaskUnblockTime+0x3c>)
 8008c66:	6013      	str	r3, [r2, #0]
}
 8008c68:	bf00      	nop
 8008c6a:	370c      	adds	r7, #12
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr
 8008c74:	20000cd4 	.word	0x20000cd4
 8008c78:	20000d3c 	.word	0x20000d3c

08008c7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b083      	sub	sp, #12
 8008c80:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008c82:	4b0b      	ldr	r3, [pc, #44]	; (8008cb0 <xTaskGetSchedulerState+0x34>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d102      	bne.n	8008c90 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	607b      	str	r3, [r7, #4]
 8008c8e:	e008      	b.n	8008ca2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c90:	4b08      	ldr	r3, [pc, #32]	; (8008cb4 <xTaskGetSchedulerState+0x38>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d102      	bne.n	8008c9e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008c98:	2302      	movs	r3, #2
 8008c9a:	607b      	str	r3, [r7, #4]
 8008c9c:	e001      	b.n	8008ca2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008ca2:	687b      	ldr	r3, [r7, #4]
	}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	370c      	adds	r7, #12
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr
 8008cb0:	20000d28 	.word	0x20000d28
 8008cb4:	20000d44 	.word	0x20000d44

08008cb8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b086      	sub	sp, #24
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d054      	beq.n	8008d78 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008cce:	4b2d      	ldr	r3, [pc, #180]	; (8008d84 <xTaskPriorityDisinherit+0xcc>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	693a      	ldr	r2, [r7, #16]
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	d009      	beq.n	8008cec <xTaskPriorityDisinherit+0x34>
 8008cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cdc:	f383 8811 	msr	BASEPRI, r3
 8008ce0:	f3bf 8f6f 	isb	sy
 8008ce4:	f3bf 8f4f 	dsb	sy
 8008ce8:	60fb      	str	r3, [r7, #12]
 8008cea:	e7fe      	b.n	8008cea <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d109      	bne.n	8008d08 <xTaskPriorityDisinherit+0x50>
 8008cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf8:	f383 8811 	msr	BASEPRI, r3
 8008cfc:	f3bf 8f6f 	isb	sy
 8008d00:	f3bf 8f4f 	dsb	sy
 8008d04:	60bb      	str	r3, [r7, #8]
 8008d06:	e7fe      	b.n	8008d06 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d0c:	1e5a      	subs	r2, r3, #1
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d02c      	beq.n	8008d78 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d128      	bne.n	8008d78 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	3304      	adds	r3, #4
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f7fe fca0 	bl	8007670 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d3c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008d44:	693b      	ldr	r3, [r7, #16]
 8008d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d48:	4b0f      	ldr	r3, [pc, #60]	; (8008d88 <xTaskPriorityDisinherit+0xd0>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	d903      	bls.n	8008d58 <xTaskPriorityDisinherit+0xa0>
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d54:	4a0c      	ldr	r2, [pc, #48]	; (8008d88 <xTaskPriorityDisinherit+0xd0>)
 8008d56:	6013      	str	r3, [r2, #0]
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d5c:	4613      	mov	r3, r2
 8008d5e:	009b      	lsls	r3, r3, #2
 8008d60:	4413      	add	r3, r2
 8008d62:	009b      	lsls	r3, r3, #2
 8008d64:	4a09      	ldr	r2, [pc, #36]	; (8008d8c <xTaskPriorityDisinherit+0xd4>)
 8008d66:	441a      	add	r2, r3
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	3304      	adds	r3, #4
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	4610      	mov	r0, r2
 8008d70:	f7fe fc21 	bl	80075b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008d74:	2301      	movs	r3, #1
 8008d76:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008d78:	697b      	ldr	r3, [r7, #20]
	}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3718      	adds	r7, #24
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}
 8008d82:	bf00      	nop
 8008d84:	20000848 	.word	0x20000848
 8008d88:	20000d24 	.word	0x20000d24
 8008d8c:	2000084c 	.word	0x2000084c

08008d90 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b084      	sub	sp, #16
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008d9a:	4b21      	ldr	r3, [pc, #132]	; (8008e20 <prvAddCurrentTaskToDelayedList+0x90>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008da0:	4b20      	ldr	r3, [pc, #128]	; (8008e24 <prvAddCurrentTaskToDelayedList+0x94>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	3304      	adds	r3, #4
 8008da6:	4618      	mov	r0, r3
 8008da8:	f7fe fc62 	bl	8007670 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008db2:	d10a      	bne.n	8008dca <prvAddCurrentTaskToDelayedList+0x3a>
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d007      	beq.n	8008dca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008dba:	4b1a      	ldr	r3, [pc, #104]	; (8008e24 <prvAddCurrentTaskToDelayedList+0x94>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	3304      	adds	r3, #4
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	4819      	ldr	r0, [pc, #100]	; (8008e28 <prvAddCurrentTaskToDelayedList+0x98>)
 8008dc4:	f7fe fbf7 	bl	80075b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008dc8:	e026      	b.n	8008e18 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008dca:	68fa      	ldr	r2, [r7, #12]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	4413      	add	r3, r2
 8008dd0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008dd2:	4b14      	ldr	r3, [pc, #80]	; (8008e24 <prvAddCurrentTaskToDelayedList+0x94>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	68ba      	ldr	r2, [r7, #8]
 8008dd8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008dda:	68ba      	ldr	r2, [r7, #8]
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d209      	bcs.n	8008df6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008de2:	4b12      	ldr	r3, [pc, #72]	; (8008e2c <prvAddCurrentTaskToDelayedList+0x9c>)
 8008de4:	681a      	ldr	r2, [r3, #0]
 8008de6:	4b0f      	ldr	r3, [pc, #60]	; (8008e24 <prvAddCurrentTaskToDelayedList+0x94>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	3304      	adds	r3, #4
 8008dec:	4619      	mov	r1, r3
 8008dee:	4610      	mov	r0, r2
 8008df0:	f7fe fc05 	bl	80075fe <vListInsert>
}
 8008df4:	e010      	b.n	8008e18 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008df6:	4b0e      	ldr	r3, [pc, #56]	; (8008e30 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008df8:	681a      	ldr	r2, [r3, #0]
 8008dfa:	4b0a      	ldr	r3, [pc, #40]	; (8008e24 <prvAddCurrentTaskToDelayedList+0x94>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	3304      	adds	r3, #4
 8008e00:	4619      	mov	r1, r3
 8008e02:	4610      	mov	r0, r2
 8008e04:	f7fe fbfb 	bl	80075fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008e08:	4b0a      	ldr	r3, [pc, #40]	; (8008e34 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	68ba      	ldr	r2, [r7, #8]
 8008e0e:	429a      	cmp	r2, r3
 8008e10:	d202      	bcs.n	8008e18 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008e12:	4a08      	ldr	r2, [pc, #32]	; (8008e34 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	6013      	str	r3, [r2, #0]
}
 8008e18:	bf00      	nop
 8008e1a:	3710      	adds	r7, #16
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}
 8008e20:	20000d20 	.word	0x20000d20
 8008e24:	20000848 	.word	0x20000848
 8008e28:	20000d08 	.word	0x20000d08
 8008e2c:	20000cd8 	.word	0x20000cd8
 8008e30:	20000cd4 	.word	0x20000cd4
 8008e34:	20000d3c 	.word	0x20000d3c

08008e38 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b08a      	sub	sp, #40	; 0x28
 8008e3c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008e42:	f000 faff 	bl	8009444 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008e46:	4b1c      	ldr	r3, [pc, #112]	; (8008eb8 <xTimerCreateTimerTask+0x80>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d021      	beq.n	8008e92 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008e52:	2300      	movs	r3, #0
 8008e54:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008e56:	1d3a      	adds	r2, r7, #4
 8008e58:	f107 0108 	add.w	r1, r7, #8
 8008e5c:	f107 030c 	add.w	r3, r7, #12
 8008e60:	4618      	mov	r0, r3
 8008e62:	f7fe fb61 	bl	8007528 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008e66:	6879      	ldr	r1, [r7, #4]
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	68fa      	ldr	r2, [r7, #12]
 8008e6c:	9202      	str	r2, [sp, #8]
 8008e6e:	9301      	str	r3, [sp, #4]
 8008e70:	2302      	movs	r3, #2
 8008e72:	9300      	str	r3, [sp, #0]
 8008e74:	2300      	movs	r3, #0
 8008e76:	460a      	mov	r2, r1
 8008e78:	4910      	ldr	r1, [pc, #64]	; (8008ebc <xTimerCreateTimerTask+0x84>)
 8008e7a:	4811      	ldr	r0, [pc, #68]	; (8008ec0 <xTimerCreateTimerTask+0x88>)
 8008e7c:	f7ff f8f6 	bl	800806c <xTaskCreateStatic>
 8008e80:	4602      	mov	r2, r0
 8008e82:	4b10      	ldr	r3, [pc, #64]	; (8008ec4 <xTimerCreateTimerTask+0x8c>)
 8008e84:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008e86:	4b0f      	ldr	r3, [pc, #60]	; (8008ec4 <xTimerCreateTimerTask+0x8c>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d001      	beq.n	8008e92 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008e8e:	2301      	movs	r3, #1
 8008e90:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d109      	bne.n	8008eac <xTimerCreateTimerTask+0x74>
 8008e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e9c:	f383 8811 	msr	BASEPRI, r3
 8008ea0:	f3bf 8f6f 	isb	sy
 8008ea4:	f3bf 8f4f 	dsb	sy
 8008ea8:	613b      	str	r3, [r7, #16]
 8008eaa:	e7fe      	b.n	8008eaa <xTimerCreateTimerTask+0x72>
	return xReturn;
 8008eac:	697b      	ldr	r3, [r7, #20]
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3718      	adds	r7, #24
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}
 8008eb6:	bf00      	nop
 8008eb8:	20000d78 	.word	0x20000d78
 8008ebc:	0800a6c4 	.word	0x0800a6c4
 8008ec0:	08008ff9 	.word	0x08008ff9
 8008ec4:	20000d7c 	.word	0x20000d7c

08008ec8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b08a      	sub	sp, #40	; 0x28
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	60f8      	str	r0, [r7, #12]
 8008ed0:	60b9      	str	r1, [r7, #8]
 8008ed2:	607a      	str	r2, [r7, #4]
 8008ed4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d109      	bne.n	8008ef4 <xTimerGenericCommand+0x2c>
 8008ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee4:	f383 8811 	msr	BASEPRI, r3
 8008ee8:	f3bf 8f6f 	isb	sy
 8008eec:	f3bf 8f4f 	dsb	sy
 8008ef0:	623b      	str	r3, [r7, #32]
 8008ef2:	e7fe      	b.n	8008ef2 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008ef4:	4b19      	ldr	r3, [pc, #100]	; (8008f5c <xTimerGenericCommand+0x94>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d02a      	beq.n	8008f52 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	2b05      	cmp	r3, #5
 8008f0c:	dc18      	bgt.n	8008f40 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008f0e:	f7ff feb5 	bl	8008c7c <xTaskGetSchedulerState>
 8008f12:	4603      	mov	r3, r0
 8008f14:	2b02      	cmp	r3, #2
 8008f16:	d109      	bne.n	8008f2c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008f18:	4b10      	ldr	r3, [pc, #64]	; (8008f5c <xTimerGenericCommand+0x94>)
 8008f1a:	6818      	ldr	r0, [r3, #0]
 8008f1c:	f107 0110 	add.w	r1, r7, #16
 8008f20:	2300      	movs	r3, #0
 8008f22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f24:	f7fe fccc 	bl	80078c0 <xQueueGenericSend>
 8008f28:	6278      	str	r0, [r7, #36]	; 0x24
 8008f2a:	e012      	b.n	8008f52 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008f2c:	4b0b      	ldr	r3, [pc, #44]	; (8008f5c <xTimerGenericCommand+0x94>)
 8008f2e:	6818      	ldr	r0, [r3, #0]
 8008f30:	f107 0110 	add.w	r1, r7, #16
 8008f34:	2300      	movs	r3, #0
 8008f36:	2200      	movs	r2, #0
 8008f38:	f7fe fcc2 	bl	80078c0 <xQueueGenericSend>
 8008f3c:	6278      	str	r0, [r7, #36]	; 0x24
 8008f3e:	e008      	b.n	8008f52 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008f40:	4b06      	ldr	r3, [pc, #24]	; (8008f5c <xTimerGenericCommand+0x94>)
 8008f42:	6818      	ldr	r0, [r3, #0]
 8008f44:	f107 0110 	add.w	r1, r7, #16
 8008f48:	2300      	movs	r3, #0
 8008f4a:	683a      	ldr	r2, [r7, #0]
 8008f4c:	f7fe fdb2 	bl	8007ab4 <xQueueGenericSendFromISR>
 8008f50:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3728      	adds	r7, #40	; 0x28
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}
 8008f5c:	20000d78 	.word	0x20000d78

08008f60 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b088      	sub	sp, #32
 8008f64:	af02      	add	r7, sp, #8
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f6a:	4b22      	ldr	r3, [pc, #136]	; (8008ff4 <prvProcessExpiredTimer+0x94>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	68db      	ldr	r3, [r3, #12]
 8008f70:	68db      	ldr	r3, [r3, #12]
 8008f72:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	3304      	adds	r3, #4
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f7fe fb79 	bl	8007670 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f84:	f003 0304 	and.w	r3, r3, #4
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d021      	beq.n	8008fd0 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	699a      	ldr	r2, [r3, #24]
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	18d1      	adds	r1, r2, r3
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	683a      	ldr	r2, [r7, #0]
 8008f98:	6978      	ldr	r0, [r7, #20]
 8008f9a:	f000 f8d1 	bl	8009140 <prvInsertTimerInActiveList>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d01e      	beq.n	8008fe2 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	9300      	str	r3, [sp, #0]
 8008fa8:	2300      	movs	r3, #0
 8008faa:	687a      	ldr	r2, [r7, #4]
 8008fac:	2100      	movs	r1, #0
 8008fae:	6978      	ldr	r0, [r7, #20]
 8008fb0:	f7ff ff8a 	bl	8008ec8 <xTimerGenericCommand>
 8008fb4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d112      	bne.n	8008fe2 <prvProcessExpiredTimer+0x82>
 8008fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc0:	f383 8811 	msr	BASEPRI, r3
 8008fc4:	f3bf 8f6f 	isb	sy
 8008fc8:	f3bf 8f4f 	dsb	sy
 8008fcc:	60fb      	str	r3, [r7, #12]
 8008fce:	e7fe      	b.n	8008fce <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008fd6:	f023 0301 	bic.w	r3, r3, #1
 8008fda:	b2da      	uxtb	r2, r3
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	6a1b      	ldr	r3, [r3, #32]
 8008fe6:	6978      	ldr	r0, [r7, #20]
 8008fe8:	4798      	blx	r3
}
 8008fea:	bf00      	nop
 8008fec:	3718      	adds	r7, #24
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}
 8008ff2:	bf00      	nop
 8008ff4:	20000d70 	.word	0x20000d70

08008ff8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b084      	sub	sp, #16
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009000:	f107 0308 	add.w	r3, r7, #8
 8009004:	4618      	mov	r0, r3
 8009006:	f000 f857 	bl	80090b8 <prvGetNextExpireTime>
 800900a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	4619      	mov	r1, r3
 8009010:	68f8      	ldr	r0, [r7, #12]
 8009012:	f000 f803 	bl	800901c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009016:	f000 f8d5 	bl	80091c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800901a:	e7f1      	b.n	8009000 <prvTimerTask+0x8>

0800901c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b084      	sub	sp, #16
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
 8009024:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009026:	f7ff fa57 	bl	80084d8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800902a:	f107 0308 	add.w	r3, r7, #8
 800902e:	4618      	mov	r0, r3
 8009030:	f000 f866 	bl	8009100 <prvSampleTimeNow>
 8009034:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d130      	bne.n	800909e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d10a      	bne.n	8009058 <prvProcessTimerOrBlockTask+0x3c>
 8009042:	687a      	ldr	r2, [r7, #4]
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	429a      	cmp	r2, r3
 8009048:	d806      	bhi.n	8009058 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800904a:	f7ff fa53 	bl	80084f4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800904e:	68f9      	ldr	r1, [r7, #12]
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f7ff ff85 	bl	8008f60 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009056:	e024      	b.n	80090a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d008      	beq.n	8009070 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800905e:	4b13      	ldr	r3, [pc, #76]	; (80090ac <prvProcessTimerOrBlockTask+0x90>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d101      	bne.n	800906c <prvProcessTimerOrBlockTask+0x50>
 8009068:	2301      	movs	r3, #1
 800906a:	e000      	b.n	800906e <prvProcessTimerOrBlockTask+0x52>
 800906c:	2300      	movs	r3, #0
 800906e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009070:	4b0f      	ldr	r3, [pc, #60]	; (80090b0 <prvProcessTimerOrBlockTask+0x94>)
 8009072:	6818      	ldr	r0, [r3, #0]
 8009074:	687a      	ldr	r2, [r7, #4]
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	1ad3      	subs	r3, r2, r3
 800907a:	683a      	ldr	r2, [r7, #0]
 800907c:	4619      	mov	r1, r3
 800907e:	f7fe ffc1 	bl	8008004 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009082:	f7ff fa37 	bl	80084f4 <xTaskResumeAll>
 8009086:	4603      	mov	r3, r0
 8009088:	2b00      	cmp	r3, #0
 800908a:	d10a      	bne.n	80090a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800908c:	4b09      	ldr	r3, [pc, #36]	; (80090b4 <prvProcessTimerOrBlockTask+0x98>)
 800908e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009092:	601a      	str	r2, [r3, #0]
 8009094:	f3bf 8f4f 	dsb	sy
 8009098:	f3bf 8f6f 	isb	sy
}
 800909c:	e001      	b.n	80090a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800909e:	f7ff fa29 	bl	80084f4 <xTaskResumeAll>
}
 80090a2:	bf00      	nop
 80090a4:	3710      	adds	r7, #16
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}
 80090aa:	bf00      	nop
 80090ac:	20000d74 	.word	0x20000d74
 80090b0:	20000d78 	.word	0x20000d78
 80090b4:	e000ed04 	.word	0xe000ed04

080090b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80090b8:	b480      	push	{r7}
 80090ba:	b085      	sub	sp, #20
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80090c0:	4b0e      	ldr	r3, [pc, #56]	; (80090fc <prvGetNextExpireTime+0x44>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d101      	bne.n	80090ce <prvGetNextExpireTime+0x16>
 80090ca:	2201      	movs	r2, #1
 80090cc:	e000      	b.n	80090d0 <prvGetNextExpireTime+0x18>
 80090ce:	2200      	movs	r2, #0
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d105      	bne.n	80090e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80090dc:	4b07      	ldr	r3, [pc, #28]	; (80090fc <prvGetNextExpireTime+0x44>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	68db      	ldr	r3, [r3, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	60fb      	str	r3, [r7, #12]
 80090e6:	e001      	b.n	80090ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80090e8:	2300      	movs	r3, #0
 80090ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80090ec:	68fb      	ldr	r3, [r7, #12]
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3714      	adds	r7, #20
 80090f2:	46bd      	mov	sp, r7
 80090f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f8:	4770      	bx	lr
 80090fa:	bf00      	nop
 80090fc:	20000d70 	.word	0x20000d70

08009100 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b084      	sub	sp, #16
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009108:	f7ff fa90 	bl	800862c <xTaskGetTickCount>
 800910c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800910e:	4b0b      	ldr	r3, [pc, #44]	; (800913c <prvSampleTimeNow+0x3c>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	68fa      	ldr	r2, [r7, #12]
 8009114:	429a      	cmp	r2, r3
 8009116:	d205      	bcs.n	8009124 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009118:	f000 f930 	bl	800937c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2201      	movs	r2, #1
 8009120:	601a      	str	r2, [r3, #0]
 8009122:	e002      	b.n	800912a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2200      	movs	r2, #0
 8009128:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800912a:	4a04      	ldr	r2, [pc, #16]	; (800913c <prvSampleTimeNow+0x3c>)
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009130:	68fb      	ldr	r3, [r7, #12]
}
 8009132:	4618      	mov	r0, r3
 8009134:	3710      	adds	r7, #16
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}
 800913a:	bf00      	nop
 800913c:	20000d80 	.word	0x20000d80

08009140 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b086      	sub	sp, #24
 8009144:	af00      	add	r7, sp, #0
 8009146:	60f8      	str	r0, [r7, #12]
 8009148:	60b9      	str	r1, [r7, #8]
 800914a:	607a      	str	r2, [r7, #4]
 800914c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800914e:	2300      	movs	r3, #0
 8009150:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	68ba      	ldr	r2, [r7, #8]
 8009156:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	68fa      	ldr	r2, [r7, #12]
 800915c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800915e:	68ba      	ldr	r2, [r7, #8]
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	429a      	cmp	r2, r3
 8009164:	d812      	bhi.n	800918c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009166:	687a      	ldr	r2, [r7, #4]
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	1ad2      	subs	r2, r2, r3
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	699b      	ldr	r3, [r3, #24]
 8009170:	429a      	cmp	r2, r3
 8009172:	d302      	bcc.n	800917a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009174:	2301      	movs	r3, #1
 8009176:	617b      	str	r3, [r7, #20]
 8009178:	e01b      	b.n	80091b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800917a:	4b10      	ldr	r3, [pc, #64]	; (80091bc <prvInsertTimerInActiveList+0x7c>)
 800917c:	681a      	ldr	r2, [r3, #0]
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	3304      	adds	r3, #4
 8009182:	4619      	mov	r1, r3
 8009184:	4610      	mov	r0, r2
 8009186:	f7fe fa3a 	bl	80075fe <vListInsert>
 800918a:	e012      	b.n	80091b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800918c:	687a      	ldr	r2, [r7, #4]
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	429a      	cmp	r2, r3
 8009192:	d206      	bcs.n	80091a2 <prvInsertTimerInActiveList+0x62>
 8009194:	68ba      	ldr	r2, [r7, #8]
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	429a      	cmp	r2, r3
 800919a:	d302      	bcc.n	80091a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800919c:	2301      	movs	r3, #1
 800919e:	617b      	str	r3, [r7, #20]
 80091a0:	e007      	b.n	80091b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80091a2:	4b07      	ldr	r3, [pc, #28]	; (80091c0 <prvInsertTimerInActiveList+0x80>)
 80091a4:	681a      	ldr	r2, [r3, #0]
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	3304      	adds	r3, #4
 80091aa:	4619      	mov	r1, r3
 80091ac:	4610      	mov	r0, r2
 80091ae:	f7fe fa26 	bl	80075fe <vListInsert>
		}
	}

	return xProcessTimerNow;
 80091b2:	697b      	ldr	r3, [r7, #20]
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	3718      	adds	r7, #24
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}
 80091bc:	20000d74 	.word	0x20000d74
 80091c0:	20000d70 	.word	0x20000d70

080091c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b08e      	sub	sp, #56	; 0x38
 80091c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80091ca:	e0c6      	b.n	800935a <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	da17      	bge.n	8009202 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80091d2:	1d3b      	adds	r3, r7, #4
 80091d4:	3304      	adds	r3, #4
 80091d6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80091d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d109      	bne.n	80091f2 <prvProcessReceivedCommands+0x2e>
 80091de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e2:	f383 8811 	msr	BASEPRI, r3
 80091e6:	f3bf 8f6f 	isb	sy
 80091ea:	f3bf 8f4f 	dsb	sy
 80091ee:	61fb      	str	r3, [r7, #28]
 80091f0:	e7fe      	b.n	80091f0 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80091f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091f8:	6850      	ldr	r0, [r2, #4]
 80091fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091fc:	6892      	ldr	r2, [r2, #8]
 80091fe:	4611      	mov	r1, r2
 8009200:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2b00      	cmp	r3, #0
 8009206:	f2c0 80a7 	blt.w	8009358 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800920e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009210:	695b      	ldr	r3, [r3, #20]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d004      	beq.n	8009220 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009218:	3304      	adds	r3, #4
 800921a:	4618      	mov	r0, r3
 800921c:	f7fe fa28 	bl	8007670 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009220:	463b      	mov	r3, r7
 8009222:	4618      	mov	r0, r3
 8009224:	f7ff ff6c 	bl	8009100 <prvSampleTimeNow>
 8009228:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2b09      	cmp	r3, #9
 800922e:	f200 8094 	bhi.w	800935a <prvProcessReceivedCommands+0x196>
 8009232:	a201      	add	r2, pc, #4	; (adr r2, 8009238 <prvProcessReceivedCommands+0x74>)
 8009234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009238:	08009261 	.word	0x08009261
 800923c:	08009261 	.word	0x08009261
 8009240:	08009261 	.word	0x08009261
 8009244:	080092d3 	.word	0x080092d3
 8009248:	080092e7 	.word	0x080092e7
 800924c:	0800932f 	.word	0x0800932f
 8009250:	08009261 	.word	0x08009261
 8009254:	08009261 	.word	0x08009261
 8009258:	080092d3 	.word	0x080092d3
 800925c:	080092e7 	.word	0x080092e7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009262:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009266:	f043 0301 	orr.w	r3, r3, #1
 800926a:	b2da      	uxtb	r2, r3
 800926c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800926e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009272:	68ba      	ldr	r2, [r7, #8]
 8009274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009276:	699b      	ldr	r3, [r3, #24]
 8009278:	18d1      	adds	r1, r2, r3
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800927e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009280:	f7ff ff5e 	bl	8009140 <prvInsertTimerInActiveList>
 8009284:	4603      	mov	r3, r0
 8009286:	2b00      	cmp	r3, #0
 8009288:	d067      	beq.n	800935a <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800928a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800928c:	6a1b      	ldr	r3, [r3, #32]
 800928e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009290:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009294:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009298:	f003 0304 	and.w	r3, r3, #4
 800929c:	2b00      	cmp	r3, #0
 800929e:	d05c      	beq.n	800935a <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80092a0:	68ba      	ldr	r2, [r7, #8]
 80092a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092a4:	699b      	ldr	r3, [r3, #24]
 80092a6:	441a      	add	r2, r3
 80092a8:	2300      	movs	r3, #0
 80092aa:	9300      	str	r3, [sp, #0]
 80092ac:	2300      	movs	r3, #0
 80092ae:	2100      	movs	r1, #0
 80092b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092b2:	f7ff fe09 	bl	8008ec8 <xTimerGenericCommand>
 80092b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80092b8:	6a3b      	ldr	r3, [r7, #32]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d14d      	bne.n	800935a <prvProcessReceivedCommands+0x196>
 80092be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c2:	f383 8811 	msr	BASEPRI, r3
 80092c6:	f3bf 8f6f 	isb	sy
 80092ca:	f3bf 8f4f 	dsb	sy
 80092ce:	61bb      	str	r3, [r7, #24]
 80092d0:	e7fe      	b.n	80092d0 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80092d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092d8:	f023 0301 	bic.w	r3, r3, #1
 80092dc:	b2da      	uxtb	r2, r3
 80092de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80092e4:	e039      	b.n	800935a <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80092e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092ec:	f043 0301 	orr.w	r3, r3, #1
 80092f0:	b2da      	uxtb	r2, r3
 80092f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80092f8:	68ba      	ldr	r2, [r7, #8]
 80092fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092fc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80092fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009300:	699b      	ldr	r3, [r3, #24]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d109      	bne.n	800931a <prvProcessReceivedCommands+0x156>
 8009306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800930a:	f383 8811 	msr	BASEPRI, r3
 800930e:	f3bf 8f6f 	isb	sy
 8009312:	f3bf 8f4f 	dsb	sy
 8009316:	617b      	str	r3, [r7, #20]
 8009318:	e7fe      	b.n	8009318 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800931a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800931c:	699a      	ldr	r2, [r3, #24]
 800931e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009320:	18d1      	adds	r1, r2, r3
 8009322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009326:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009328:	f7ff ff0a 	bl	8009140 <prvInsertTimerInActiveList>
					break;
 800932c:	e015      	b.n	800935a <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800932e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009330:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009334:	f003 0302 	and.w	r3, r3, #2
 8009338:	2b00      	cmp	r3, #0
 800933a:	d103      	bne.n	8009344 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800933c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800933e:	f000 fbc1 	bl	8009ac4 <vPortFree>
 8009342:	e00a      	b.n	800935a <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009346:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800934a:	f023 0301 	bic.w	r3, r3, #1
 800934e:	b2da      	uxtb	r2, r3
 8009350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009352:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009356:	e000      	b.n	800935a <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009358:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800935a:	4b07      	ldr	r3, [pc, #28]	; (8009378 <prvProcessReceivedCommands+0x1b4>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	1d39      	adds	r1, r7, #4
 8009360:	2200      	movs	r2, #0
 8009362:	4618      	mov	r0, r3
 8009364:	f7fe fc3a 	bl	8007bdc <xQueueReceive>
 8009368:	4603      	mov	r3, r0
 800936a:	2b00      	cmp	r3, #0
 800936c:	f47f af2e 	bne.w	80091cc <prvProcessReceivedCommands+0x8>
	}
}
 8009370:	bf00      	nop
 8009372:	3730      	adds	r7, #48	; 0x30
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}
 8009378:	20000d78 	.word	0x20000d78

0800937c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b088      	sub	sp, #32
 8009380:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009382:	e047      	b.n	8009414 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009384:	4b2d      	ldr	r3, [pc, #180]	; (800943c <prvSwitchTimerLists+0xc0>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	68db      	ldr	r3, [r3, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800938e:	4b2b      	ldr	r3, [pc, #172]	; (800943c <prvSwitchTimerLists+0xc0>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	68db      	ldr	r3, [r3, #12]
 8009394:	68db      	ldr	r3, [r3, #12]
 8009396:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	3304      	adds	r3, #4
 800939c:	4618      	mov	r0, r3
 800939e:	f7fe f967 	bl	8007670 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	6a1b      	ldr	r3, [r3, #32]
 80093a6:	68f8      	ldr	r0, [r7, #12]
 80093a8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093b0:	f003 0304 	and.w	r3, r3, #4
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d02d      	beq.n	8009414 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	699b      	ldr	r3, [r3, #24]
 80093bc:	693a      	ldr	r2, [r7, #16]
 80093be:	4413      	add	r3, r2
 80093c0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80093c2:	68ba      	ldr	r2, [r7, #8]
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	429a      	cmp	r2, r3
 80093c8:	d90e      	bls.n	80093e8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	68ba      	ldr	r2, [r7, #8]
 80093ce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	68fa      	ldr	r2, [r7, #12]
 80093d4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80093d6:	4b19      	ldr	r3, [pc, #100]	; (800943c <prvSwitchTimerLists+0xc0>)
 80093d8:	681a      	ldr	r2, [r3, #0]
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	3304      	adds	r3, #4
 80093de:	4619      	mov	r1, r3
 80093e0:	4610      	mov	r0, r2
 80093e2:	f7fe f90c 	bl	80075fe <vListInsert>
 80093e6:	e015      	b.n	8009414 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80093e8:	2300      	movs	r3, #0
 80093ea:	9300      	str	r3, [sp, #0]
 80093ec:	2300      	movs	r3, #0
 80093ee:	693a      	ldr	r2, [r7, #16]
 80093f0:	2100      	movs	r1, #0
 80093f2:	68f8      	ldr	r0, [r7, #12]
 80093f4:	f7ff fd68 	bl	8008ec8 <xTimerGenericCommand>
 80093f8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d109      	bne.n	8009414 <prvSwitchTimerLists+0x98>
 8009400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009404:	f383 8811 	msr	BASEPRI, r3
 8009408:	f3bf 8f6f 	isb	sy
 800940c:	f3bf 8f4f 	dsb	sy
 8009410:	603b      	str	r3, [r7, #0]
 8009412:	e7fe      	b.n	8009412 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009414:	4b09      	ldr	r3, [pc, #36]	; (800943c <prvSwitchTimerLists+0xc0>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d1b2      	bne.n	8009384 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800941e:	4b07      	ldr	r3, [pc, #28]	; (800943c <prvSwitchTimerLists+0xc0>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009424:	4b06      	ldr	r3, [pc, #24]	; (8009440 <prvSwitchTimerLists+0xc4>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4a04      	ldr	r2, [pc, #16]	; (800943c <prvSwitchTimerLists+0xc0>)
 800942a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800942c:	4a04      	ldr	r2, [pc, #16]	; (8009440 <prvSwitchTimerLists+0xc4>)
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	6013      	str	r3, [r2, #0]
}
 8009432:	bf00      	nop
 8009434:	3718      	adds	r7, #24
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}
 800943a:	bf00      	nop
 800943c:	20000d70 	.word	0x20000d70
 8009440:	20000d74 	.word	0x20000d74

08009444 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b082      	sub	sp, #8
 8009448:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800944a:	f000 f95f 	bl	800970c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800944e:	4b15      	ldr	r3, [pc, #84]	; (80094a4 <prvCheckForValidListAndQueue+0x60>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d120      	bne.n	8009498 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009456:	4814      	ldr	r0, [pc, #80]	; (80094a8 <prvCheckForValidListAndQueue+0x64>)
 8009458:	f7fe f880 	bl	800755c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800945c:	4813      	ldr	r0, [pc, #76]	; (80094ac <prvCheckForValidListAndQueue+0x68>)
 800945e:	f7fe f87d 	bl	800755c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009462:	4b13      	ldr	r3, [pc, #76]	; (80094b0 <prvCheckForValidListAndQueue+0x6c>)
 8009464:	4a10      	ldr	r2, [pc, #64]	; (80094a8 <prvCheckForValidListAndQueue+0x64>)
 8009466:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009468:	4b12      	ldr	r3, [pc, #72]	; (80094b4 <prvCheckForValidListAndQueue+0x70>)
 800946a:	4a10      	ldr	r2, [pc, #64]	; (80094ac <prvCheckForValidListAndQueue+0x68>)
 800946c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800946e:	2300      	movs	r3, #0
 8009470:	9300      	str	r3, [sp, #0]
 8009472:	4b11      	ldr	r3, [pc, #68]	; (80094b8 <prvCheckForValidListAndQueue+0x74>)
 8009474:	4a11      	ldr	r2, [pc, #68]	; (80094bc <prvCheckForValidListAndQueue+0x78>)
 8009476:	2110      	movs	r1, #16
 8009478:	200a      	movs	r0, #10
 800947a:	f7fe f98b 	bl	8007794 <xQueueGenericCreateStatic>
 800947e:	4602      	mov	r2, r0
 8009480:	4b08      	ldr	r3, [pc, #32]	; (80094a4 <prvCheckForValidListAndQueue+0x60>)
 8009482:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009484:	4b07      	ldr	r3, [pc, #28]	; (80094a4 <prvCheckForValidListAndQueue+0x60>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d005      	beq.n	8009498 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800948c:	4b05      	ldr	r3, [pc, #20]	; (80094a4 <prvCheckForValidListAndQueue+0x60>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	490b      	ldr	r1, [pc, #44]	; (80094c0 <prvCheckForValidListAndQueue+0x7c>)
 8009492:	4618      	mov	r0, r3
 8009494:	f7fe fd8e 	bl	8007fb4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009498:	f000 f966 	bl	8009768 <vPortExitCritical>
}
 800949c:	bf00      	nop
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}
 80094a2:	bf00      	nop
 80094a4:	20000d78 	.word	0x20000d78
 80094a8:	20000d48 	.word	0x20000d48
 80094ac:	20000d5c 	.word	0x20000d5c
 80094b0:	20000d70 	.word	0x20000d70
 80094b4:	20000d74 	.word	0x20000d74
 80094b8:	20000e24 	.word	0x20000e24
 80094bc:	20000d84 	.word	0x20000d84
 80094c0:	0800a6cc 	.word	0x0800a6cc

080094c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80094c4:	b480      	push	{r7}
 80094c6:	b085      	sub	sp, #20
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	60f8      	str	r0, [r7, #12]
 80094cc:	60b9      	str	r1, [r7, #8]
 80094ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	3b04      	subs	r3, #4
 80094d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80094dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	3b04      	subs	r3, #4
 80094e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	f023 0201 	bic.w	r2, r3, #1
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	3b04      	subs	r3, #4
 80094f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80094f4:	4a0c      	ldr	r2, [pc, #48]	; (8009528 <pxPortInitialiseStack+0x64>)
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	3b14      	subs	r3, #20
 80094fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009500:	687a      	ldr	r2, [r7, #4]
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	3b04      	subs	r3, #4
 800950a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f06f 0202 	mvn.w	r2, #2
 8009512:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	3b20      	subs	r3, #32
 8009518:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800951a:	68fb      	ldr	r3, [r7, #12]
}
 800951c:	4618      	mov	r0, r3
 800951e:	3714      	adds	r7, #20
 8009520:	46bd      	mov	sp, r7
 8009522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009526:	4770      	bx	lr
 8009528:	0800952d 	.word	0x0800952d

0800952c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800952c:	b480      	push	{r7}
 800952e:	b085      	sub	sp, #20
 8009530:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009532:	2300      	movs	r3, #0
 8009534:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009536:	4b11      	ldr	r3, [pc, #68]	; (800957c <prvTaskExitError+0x50>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800953e:	d009      	beq.n	8009554 <prvTaskExitError+0x28>
 8009540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009544:	f383 8811 	msr	BASEPRI, r3
 8009548:	f3bf 8f6f 	isb	sy
 800954c:	f3bf 8f4f 	dsb	sy
 8009550:	60fb      	str	r3, [r7, #12]
 8009552:	e7fe      	b.n	8009552 <prvTaskExitError+0x26>
 8009554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009558:	f383 8811 	msr	BASEPRI, r3
 800955c:	f3bf 8f6f 	isb	sy
 8009560:	f3bf 8f4f 	dsb	sy
 8009564:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009566:	bf00      	nop
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d0fc      	beq.n	8009568 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800956e:	bf00      	nop
 8009570:	3714      	adds	r7, #20
 8009572:	46bd      	mov	sp, r7
 8009574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009578:	4770      	bx	lr
 800957a:	bf00      	nop
 800957c:	20000034 	.word	0x20000034

08009580 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009580:	4b07      	ldr	r3, [pc, #28]	; (80095a0 <pxCurrentTCBConst2>)
 8009582:	6819      	ldr	r1, [r3, #0]
 8009584:	6808      	ldr	r0, [r1, #0]
 8009586:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800958a:	f380 8809 	msr	PSP, r0
 800958e:	f3bf 8f6f 	isb	sy
 8009592:	f04f 0000 	mov.w	r0, #0
 8009596:	f380 8811 	msr	BASEPRI, r0
 800959a:	4770      	bx	lr
 800959c:	f3af 8000 	nop.w

080095a0 <pxCurrentTCBConst2>:
 80095a0:	20000848 	.word	0x20000848
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80095a4:	bf00      	nop
 80095a6:	bf00      	nop

080095a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80095a8:	4808      	ldr	r0, [pc, #32]	; (80095cc <prvPortStartFirstTask+0x24>)
 80095aa:	6800      	ldr	r0, [r0, #0]
 80095ac:	6800      	ldr	r0, [r0, #0]
 80095ae:	f380 8808 	msr	MSP, r0
 80095b2:	f04f 0000 	mov.w	r0, #0
 80095b6:	f380 8814 	msr	CONTROL, r0
 80095ba:	b662      	cpsie	i
 80095bc:	b661      	cpsie	f
 80095be:	f3bf 8f4f 	dsb	sy
 80095c2:	f3bf 8f6f 	isb	sy
 80095c6:	df00      	svc	0
 80095c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80095ca:	bf00      	nop
 80095cc:	e000ed08 	.word	0xe000ed08

080095d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b086      	sub	sp, #24
 80095d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80095d6:	4b44      	ldr	r3, [pc, #272]	; (80096e8 <xPortStartScheduler+0x118>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4a44      	ldr	r2, [pc, #272]	; (80096ec <xPortStartScheduler+0x11c>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d109      	bne.n	80095f4 <xPortStartScheduler+0x24>
 80095e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e4:	f383 8811 	msr	BASEPRI, r3
 80095e8:	f3bf 8f6f 	isb	sy
 80095ec:	f3bf 8f4f 	dsb	sy
 80095f0:	613b      	str	r3, [r7, #16]
 80095f2:	e7fe      	b.n	80095f2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80095f4:	4b3c      	ldr	r3, [pc, #240]	; (80096e8 <xPortStartScheduler+0x118>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	4a3d      	ldr	r2, [pc, #244]	; (80096f0 <xPortStartScheduler+0x120>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d109      	bne.n	8009612 <xPortStartScheduler+0x42>
 80095fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009602:	f383 8811 	msr	BASEPRI, r3
 8009606:	f3bf 8f6f 	isb	sy
 800960a:	f3bf 8f4f 	dsb	sy
 800960e:	60fb      	str	r3, [r7, #12]
 8009610:	e7fe      	b.n	8009610 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009612:	4b38      	ldr	r3, [pc, #224]	; (80096f4 <xPortStartScheduler+0x124>)
 8009614:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	781b      	ldrb	r3, [r3, #0]
 800961a:	b2db      	uxtb	r3, r3
 800961c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	22ff      	movs	r2, #255	; 0xff
 8009622:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009624:	697b      	ldr	r3, [r7, #20]
 8009626:	781b      	ldrb	r3, [r3, #0]
 8009628:	b2db      	uxtb	r3, r3
 800962a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800962c:	78fb      	ldrb	r3, [r7, #3]
 800962e:	b2db      	uxtb	r3, r3
 8009630:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009634:	b2da      	uxtb	r2, r3
 8009636:	4b30      	ldr	r3, [pc, #192]	; (80096f8 <xPortStartScheduler+0x128>)
 8009638:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800963a:	4b30      	ldr	r3, [pc, #192]	; (80096fc <xPortStartScheduler+0x12c>)
 800963c:	2207      	movs	r2, #7
 800963e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009640:	e009      	b.n	8009656 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8009642:	4b2e      	ldr	r3, [pc, #184]	; (80096fc <xPortStartScheduler+0x12c>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	3b01      	subs	r3, #1
 8009648:	4a2c      	ldr	r2, [pc, #176]	; (80096fc <xPortStartScheduler+0x12c>)
 800964a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800964c:	78fb      	ldrb	r3, [r7, #3]
 800964e:	b2db      	uxtb	r3, r3
 8009650:	005b      	lsls	r3, r3, #1
 8009652:	b2db      	uxtb	r3, r3
 8009654:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009656:	78fb      	ldrb	r3, [r7, #3]
 8009658:	b2db      	uxtb	r3, r3
 800965a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800965e:	2b80      	cmp	r3, #128	; 0x80
 8009660:	d0ef      	beq.n	8009642 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009662:	4b26      	ldr	r3, [pc, #152]	; (80096fc <xPortStartScheduler+0x12c>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f1c3 0307 	rsb	r3, r3, #7
 800966a:	2b04      	cmp	r3, #4
 800966c:	d009      	beq.n	8009682 <xPortStartScheduler+0xb2>
 800966e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009672:	f383 8811 	msr	BASEPRI, r3
 8009676:	f3bf 8f6f 	isb	sy
 800967a:	f3bf 8f4f 	dsb	sy
 800967e:	60bb      	str	r3, [r7, #8]
 8009680:	e7fe      	b.n	8009680 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009682:	4b1e      	ldr	r3, [pc, #120]	; (80096fc <xPortStartScheduler+0x12c>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	021b      	lsls	r3, r3, #8
 8009688:	4a1c      	ldr	r2, [pc, #112]	; (80096fc <xPortStartScheduler+0x12c>)
 800968a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800968c:	4b1b      	ldr	r3, [pc, #108]	; (80096fc <xPortStartScheduler+0x12c>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009694:	4a19      	ldr	r2, [pc, #100]	; (80096fc <xPortStartScheduler+0x12c>)
 8009696:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	b2da      	uxtb	r2, r3
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80096a0:	4b17      	ldr	r3, [pc, #92]	; (8009700 <xPortStartScheduler+0x130>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	4a16      	ldr	r2, [pc, #88]	; (8009700 <xPortStartScheduler+0x130>)
 80096a6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80096aa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80096ac:	4b14      	ldr	r3, [pc, #80]	; (8009700 <xPortStartScheduler+0x130>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	4a13      	ldr	r2, [pc, #76]	; (8009700 <xPortStartScheduler+0x130>)
 80096b2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80096b6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80096b8:	f000 f8d6 	bl	8009868 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80096bc:	4b11      	ldr	r3, [pc, #68]	; (8009704 <xPortStartScheduler+0x134>)
 80096be:	2200      	movs	r2, #0
 80096c0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80096c2:	f000 f8f5 	bl	80098b0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80096c6:	4b10      	ldr	r3, [pc, #64]	; (8009708 <xPortStartScheduler+0x138>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	4a0f      	ldr	r2, [pc, #60]	; (8009708 <xPortStartScheduler+0x138>)
 80096cc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80096d0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80096d2:	f7ff ff69 	bl	80095a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80096d6:	f7ff f871 	bl	80087bc <vTaskSwitchContext>
	prvTaskExitError();
 80096da:	f7ff ff27 	bl	800952c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80096de:	2300      	movs	r3, #0
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	3718      	adds	r7, #24
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}
 80096e8:	e000ed00 	.word	0xe000ed00
 80096ec:	410fc271 	.word	0x410fc271
 80096f0:	410fc270 	.word	0x410fc270
 80096f4:	e000e400 	.word	0xe000e400
 80096f8:	20000e74 	.word	0x20000e74
 80096fc:	20000e78 	.word	0x20000e78
 8009700:	e000ed20 	.word	0xe000ed20
 8009704:	20000034 	.word	0x20000034
 8009708:	e000ef34 	.word	0xe000ef34

0800970c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800970c:	b480      	push	{r7}
 800970e:	b083      	sub	sp, #12
 8009710:	af00      	add	r7, sp, #0
 8009712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009716:	f383 8811 	msr	BASEPRI, r3
 800971a:	f3bf 8f6f 	isb	sy
 800971e:	f3bf 8f4f 	dsb	sy
 8009722:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009724:	4b0e      	ldr	r3, [pc, #56]	; (8009760 <vPortEnterCritical+0x54>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	3301      	adds	r3, #1
 800972a:	4a0d      	ldr	r2, [pc, #52]	; (8009760 <vPortEnterCritical+0x54>)
 800972c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800972e:	4b0c      	ldr	r3, [pc, #48]	; (8009760 <vPortEnterCritical+0x54>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	2b01      	cmp	r3, #1
 8009734:	d10e      	bne.n	8009754 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009736:	4b0b      	ldr	r3, [pc, #44]	; (8009764 <vPortEnterCritical+0x58>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	b2db      	uxtb	r3, r3
 800973c:	2b00      	cmp	r3, #0
 800973e:	d009      	beq.n	8009754 <vPortEnterCritical+0x48>
 8009740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009744:	f383 8811 	msr	BASEPRI, r3
 8009748:	f3bf 8f6f 	isb	sy
 800974c:	f3bf 8f4f 	dsb	sy
 8009750:	603b      	str	r3, [r7, #0]
 8009752:	e7fe      	b.n	8009752 <vPortEnterCritical+0x46>
	}
}
 8009754:	bf00      	nop
 8009756:	370c      	adds	r7, #12
 8009758:	46bd      	mov	sp, r7
 800975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975e:	4770      	bx	lr
 8009760:	20000034 	.word	0x20000034
 8009764:	e000ed04 	.word	0xe000ed04

08009768 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009768:	b480      	push	{r7}
 800976a:	b083      	sub	sp, #12
 800976c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800976e:	4b11      	ldr	r3, [pc, #68]	; (80097b4 <vPortExitCritical+0x4c>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d109      	bne.n	800978a <vPortExitCritical+0x22>
 8009776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800977a:	f383 8811 	msr	BASEPRI, r3
 800977e:	f3bf 8f6f 	isb	sy
 8009782:	f3bf 8f4f 	dsb	sy
 8009786:	607b      	str	r3, [r7, #4]
 8009788:	e7fe      	b.n	8009788 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800978a:	4b0a      	ldr	r3, [pc, #40]	; (80097b4 <vPortExitCritical+0x4c>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	3b01      	subs	r3, #1
 8009790:	4a08      	ldr	r2, [pc, #32]	; (80097b4 <vPortExitCritical+0x4c>)
 8009792:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009794:	4b07      	ldr	r3, [pc, #28]	; (80097b4 <vPortExitCritical+0x4c>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d104      	bne.n	80097a6 <vPortExitCritical+0x3e>
 800979c:	2300      	movs	r3, #0
 800979e:	603b      	str	r3, [r7, #0]
	__asm volatile
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80097a6:	bf00      	nop
 80097a8:	370c      	adds	r7, #12
 80097aa:	46bd      	mov	sp, r7
 80097ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b0:	4770      	bx	lr
 80097b2:	bf00      	nop
 80097b4:	20000034 	.word	0x20000034
	...

080097c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80097c0:	f3ef 8009 	mrs	r0, PSP
 80097c4:	f3bf 8f6f 	isb	sy
 80097c8:	4b15      	ldr	r3, [pc, #84]	; (8009820 <pxCurrentTCBConst>)
 80097ca:	681a      	ldr	r2, [r3, #0]
 80097cc:	f01e 0f10 	tst.w	lr, #16
 80097d0:	bf08      	it	eq
 80097d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80097d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097da:	6010      	str	r0, [r2, #0]
 80097dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80097e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80097e4:	f380 8811 	msr	BASEPRI, r0
 80097e8:	f3bf 8f4f 	dsb	sy
 80097ec:	f3bf 8f6f 	isb	sy
 80097f0:	f7fe ffe4 	bl	80087bc <vTaskSwitchContext>
 80097f4:	f04f 0000 	mov.w	r0, #0
 80097f8:	f380 8811 	msr	BASEPRI, r0
 80097fc:	bc09      	pop	{r0, r3}
 80097fe:	6819      	ldr	r1, [r3, #0]
 8009800:	6808      	ldr	r0, [r1, #0]
 8009802:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009806:	f01e 0f10 	tst.w	lr, #16
 800980a:	bf08      	it	eq
 800980c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009810:	f380 8809 	msr	PSP, r0
 8009814:	f3bf 8f6f 	isb	sy
 8009818:	4770      	bx	lr
 800981a:	bf00      	nop
 800981c:	f3af 8000 	nop.w

08009820 <pxCurrentTCBConst>:
 8009820:	20000848 	.word	0x20000848
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009824:	bf00      	nop
 8009826:	bf00      	nop

08009828 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b082      	sub	sp, #8
 800982c:	af00      	add	r7, sp, #0
	__asm volatile
 800982e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009832:	f383 8811 	msr	BASEPRI, r3
 8009836:	f3bf 8f6f 	isb	sy
 800983a:	f3bf 8f4f 	dsb	sy
 800983e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009840:	f7fe ff04 	bl	800864c <xTaskIncrementTick>
 8009844:	4603      	mov	r3, r0
 8009846:	2b00      	cmp	r3, #0
 8009848:	d003      	beq.n	8009852 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800984a:	4b06      	ldr	r3, [pc, #24]	; (8009864 <SysTick_Handler+0x3c>)
 800984c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009850:	601a      	str	r2, [r3, #0]
 8009852:	2300      	movs	r3, #0
 8009854:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800985c:	bf00      	nop
 800985e:	3708      	adds	r7, #8
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}
 8009864:	e000ed04 	.word	0xe000ed04

08009868 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009868:	b480      	push	{r7}
 800986a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800986c:	4b0b      	ldr	r3, [pc, #44]	; (800989c <vPortSetupTimerInterrupt+0x34>)
 800986e:	2200      	movs	r2, #0
 8009870:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009872:	4b0b      	ldr	r3, [pc, #44]	; (80098a0 <vPortSetupTimerInterrupt+0x38>)
 8009874:	2200      	movs	r2, #0
 8009876:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009878:	4b0a      	ldr	r3, [pc, #40]	; (80098a4 <vPortSetupTimerInterrupt+0x3c>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	4a0a      	ldr	r2, [pc, #40]	; (80098a8 <vPortSetupTimerInterrupt+0x40>)
 800987e:	fba2 2303 	umull	r2, r3, r2, r3
 8009882:	099b      	lsrs	r3, r3, #6
 8009884:	4a09      	ldr	r2, [pc, #36]	; (80098ac <vPortSetupTimerInterrupt+0x44>)
 8009886:	3b01      	subs	r3, #1
 8009888:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800988a:	4b04      	ldr	r3, [pc, #16]	; (800989c <vPortSetupTimerInterrupt+0x34>)
 800988c:	2207      	movs	r2, #7
 800988e:	601a      	str	r2, [r3, #0]
}
 8009890:	bf00      	nop
 8009892:	46bd      	mov	sp, r7
 8009894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009898:	4770      	bx	lr
 800989a:	bf00      	nop
 800989c:	e000e010 	.word	0xe000e010
 80098a0:	e000e018 	.word	0xe000e018
 80098a4:	20000000 	.word	0x20000000
 80098a8:	10624dd3 	.word	0x10624dd3
 80098ac:	e000e014 	.word	0xe000e014

080098b0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80098b0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80098c0 <vPortEnableVFP+0x10>
 80098b4:	6801      	ldr	r1, [r0, #0]
 80098b6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80098ba:	6001      	str	r1, [r0, #0]
 80098bc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80098be:	bf00      	nop
 80098c0:	e000ed88 	.word	0xe000ed88

080098c4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80098c4:	b480      	push	{r7}
 80098c6:	b085      	sub	sp, #20
 80098c8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80098ca:	f3ef 8305 	mrs	r3, IPSR
 80098ce:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	2b0f      	cmp	r3, #15
 80098d4:	d913      	bls.n	80098fe <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80098d6:	4a16      	ldr	r2, [pc, #88]	; (8009930 <vPortValidateInterruptPriority+0x6c>)
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	4413      	add	r3, r2
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80098e0:	4b14      	ldr	r3, [pc, #80]	; (8009934 <vPortValidateInterruptPriority+0x70>)
 80098e2:	781b      	ldrb	r3, [r3, #0]
 80098e4:	7afa      	ldrb	r2, [r7, #11]
 80098e6:	429a      	cmp	r2, r3
 80098e8:	d209      	bcs.n	80098fe <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80098ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ee:	f383 8811 	msr	BASEPRI, r3
 80098f2:	f3bf 8f6f 	isb	sy
 80098f6:	f3bf 8f4f 	dsb	sy
 80098fa:	607b      	str	r3, [r7, #4]
 80098fc:	e7fe      	b.n	80098fc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80098fe:	4b0e      	ldr	r3, [pc, #56]	; (8009938 <vPortValidateInterruptPriority+0x74>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009906:	4b0d      	ldr	r3, [pc, #52]	; (800993c <vPortValidateInterruptPriority+0x78>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	429a      	cmp	r2, r3
 800990c:	d909      	bls.n	8009922 <vPortValidateInterruptPriority+0x5e>
 800990e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009912:	f383 8811 	msr	BASEPRI, r3
 8009916:	f3bf 8f6f 	isb	sy
 800991a:	f3bf 8f4f 	dsb	sy
 800991e:	603b      	str	r3, [r7, #0]
 8009920:	e7fe      	b.n	8009920 <vPortValidateInterruptPriority+0x5c>
	}
 8009922:	bf00      	nop
 8009924:	3714      	adds	r7, #20
 8009926:	46bd      	mov	sp, r7
 8009928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992c:	4770      	bx	lr
 800992e:	bf00      	nop
 8009930:	e000e3f0 	.word	0xe000e3f0
 8009934:	20000e74 	.word	0x20000e74
 8009938:	e000ed0c 	.word	0xe000ed0c
 800993c:	20000e78 	.word	0x20000e78

08009940 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b08a      	sub	sp, #40	; 0x28
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009948:	2300      	movs	r3, #0
 800994a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800994c:	f7fe fdc4 	bl	80084d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009950:	4b57      	ldr	r3, [pc, #348]	; (8009ab0 <pvPortMalloc+0x170>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d101      	bne.n	800995c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009958:	f000 f90c 	bl	8009b74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800995c:	4b55      	ldr	r3, [pc, #340]	; (8009ab4 <pvPortMalloc+0x174>)
 800995e:	681a      	ldr	r2, [r3, #0]
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	4013      	ands	r3, r2
 8009964:	2b00      	cmp	r3, #0
 8009966:	f040 808c 	bne.w	8009a82 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d01c      	beq.n	80099aa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009970:	2208      	movs	r2, #8
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	4413      	add	r3, r2
 8009976:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f003 0307 	and.w	r3, r3, #7
 800997e:	2b00      	cmp	r3, #0
 8009980:	d013      	beq.n	80099aa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f023 0307 	bic.w	r3, r3, #7
 8009988:	3308      	adds	r3, #8
 800998a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f003 0307 	and.w	r3, r3, #7
 8009992:	2b00      	cmp	r3, #0
 8009994:	d009      	beq.n	80099aa <pvPortMalloc+0x6a>
 8009996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800999a:	f383 8811 	msr	BASEPRI, r3
 800999e:	f3bf 8f6f 	isb	sy
 80099a2:	f3bf 8f4f 	dsb	sy
 80099a6:	617b      	str	r3, [r7, #20]
 80099a8:	e7fe      	b.n	80099a8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d068      	beq.n	8009a82 <pvPortMalloc+0x142>
 80099b0:	4b41      	ldr	r3, [pc, #260]	; (8009ab8 <pvPortMalloc+0x178>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	687a      	ldr	r2, [r7, #4]
 80099b6:	429a      	cmp	r2, r3
 80099b8:	d863      	bhi.n	8009a82 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80099ba:	4b40      	ldr	r3, [pc, #256]	; (8009abc <pvPortMalloc+0x17c>)
 80099bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80099be:	4b3f      	ldr	r3, [pc, #252]	; (8009abc <pvPortMalloc+0x17c>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80099c4:	e004      	b.n	80099d0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80099c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80099ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80099d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d2:	685b      	ldr	r3, [r3, #4]
 80099d4:	687a      	ldr	r2, [r7, #4]
 80099d6:	429a      	cmp	r2, r3
 80099d8:	d903      	bls.n	80099e2 <pvPortMalloc+0xa2>
 80099da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d1f1      	bne.n	80099c6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80099e2:	4b33      	ldr	r3, [pc, #204]	; (8009ab0 <pvPortMalloc+0x170>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099e8:	429a      	cmp	r2, r3
 80099ea:	d04a      	beq.n	8009a82 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80099ec:	6a3b      	ldr	r3, [r7, #32]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	2208      	movs	r2, #8
 80099f2:	4413      	add	r3, r2
 80099f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80099f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f8:	681a      	ldr	r2, [r3, #0]
 80099fa:	6a3b      	ldr	r3, [r7, #32]
 80099fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80099fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a00:	685a      	ldr	r2, [r3, #4]
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	1ad2      	subs	r2, r2, r3
 8009a06:	2308      	movs	r3, #8
 8009a08:	005b      	lsls	r3, r3, #1
 8009a0a:	429a      	cmp	r2, r3
 8009a0c:	d91e      	bls.n	8009a4c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	4413      	add	r3, r2
 8009a14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a16:	69bb      	ldr	r3, [r7, #24]
 8009a18:	f003 0307 	and.w	r3, r3, #7
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d009      	beq.n	8009a34 <pvPortMalloc+0xf4>
 8009a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a24:	f383 8811 	msr	BASEPRI, r3
 8009a28:	f3bf 8f6f 	isb	sy
 8009a2c:	f3bf 8f4f 	dsb	sy
 8009a30:	613b      	str	r3, [r7, #16]
 8009a32:	e7fe      	b.n	8009a32 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a36:	685a      	ldr	r2, [r3, #4]
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	1ad2      	subs	r2, r2, r3
 8009a3c:	69bb      	ldr	r3, [r7, #24]
 8009a3e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a42:	687a      	ldr	r2, [r7, #4]
 8009a44:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009a46:	69b8      	ldr	r0, [r7, #24]
 8009a48:	f000 f8f6 	bl	8009c38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009a4c:	4b1a      	ldr	r3, [pc, #104]	; (8009ab8 <pvPortMalloc+0x178>)
 8009a4e:	681a      	ldr	r2, [r3, #0]
 8009a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a52:	685b      	ldr	r3, [r3, #4]
 8009a54:	1ad3      	subs	r3, r2, r3
 8009a56:	4a18      	ldr	r2, [pc, #96]	; (8009ab8 <pvPortMalloc+0x178>)
 8009a58:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009a5a:	4b17      	ldr	r3, [pc, #92]	; (8009ab8 <pvPortMalloc+0x178>)
 8009a5c:	681a      	ldr	r2, [r3, #0]
 8009a5e:	4b18      	ldr	r3, [pc, #96]	; (8009ac0 <pvPortMalloc+0x180>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	429a      	cmp	r2, r3
 8009a64:	d203      	bcs.n	8009a6e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009a66:	4b14      	ldr	r3, [pc, #80]	; (8009ab8 <pvPortMalloc+0x178>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4a15      	ldr	r2, [pc, #84]	; (8009ac0 <pvPortMalloc+0x180>)
 8009a6c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a70:	685a      	ldr	r2, [r3, #4]
 8009a72:	4b10      	ldr	r3, [pc, #64]	; (8009ab4 <pvPortMalloc+0x174>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	431a      	orrs	r2, r3
 8009a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a7a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a7e:	2200      	movs	r2, #0
 8009a80:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009a82:	f7fe fd37 	bl	80084f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a86:	69fb      	ldr	r3, [r7, #28]
 8009a88:	f003 0307 	and.w	r3, r3, #7
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d009      	beq.n	8009aa4 <pvPortMalloc+0x164>
 8009a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a94:	f383 8811 	msr	BASEPRI, r3
 8009a98:	f3bf 8f6f 	isb	sy
 8009a9c:	f3bf 8f4f 	dsb	sy
 8009aa0:	60fb      	str	r3, [r7, #12]
 8009aa2:	e7fe      	b.n	8009aa2 <pvPortMalloc+0x162>
	return pvReturn;
 8009aa4:	69fb      	ldr	r3, [r7, #28]
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3728      	adds	r7, #40	; 0x28
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}
 8009aae:	bf00      	nop
 8009ab0:	200031ac 	.word	0x200031ac
 8009ab4:	200031b8 	.word	0x200031b8
 8009ab8:	200031b0 	.word	0x200031b0
 8009abc:	200031a4 	.word	0x200031a4
 8009ac0:	200031b4 	.word	0x200031b4

08009ac4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b086      	sub	sp, #24
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d046      	beq.n	8009b64 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009ad6:	2308      	movs	r3, #8
 8009ad8:	425b      	negs	r3, r3
 8009ada:	697a      	ldr	r2, [r7, #20]
 8009adc:	4413      	add	r3, r2
 8009ade:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009ae4:	693b      	ldr	r3, [r7, #16]
 8009ae6:	685a      	ldr	r2, [r3, #4]
 8009ae8:	4b20      	ldr	r3, [pc, #128]	; (8009b6c <vPortFree+0xa8>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	4013      	ands	r3, r2
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d109      	bne.n	8009b06 <vPortFree+0x42>
 8009af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af6:	f383 8811 	msr	BASEPRI, r3
 8009afa:	f3bf 8f6f 	isb	sy
 8009afe:	f3bf 8f4f 	dsb	sy
 8009b02:	60fb      	str	r3, [r7, #12]
 8009b04:	e7fe      	b.n	8009b04 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d009      	beq.n	8009b22 <vPortFree+0x5e>
 8009b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b12:	f383 8811 	msr	BASEPRI, r3
 8009b16:	f3bf 8f6f 	isb	sy
 8009b1a:	f3bf 8f4f 	dsb	sy
 8009b1e:	60bb      	str	r3, [r7, #8]
 8009b20:	e7fe      	b.n	8009b20 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009b22:	693b      	ldr	r3, [r7, #16]
 8009b24:	685a      	ldr	r2, [r3, #4]
 8009b26:	4b11      	ldr	r3, [pc, #68]	; (8009b6c <vPortFree+0xa8>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	4013      	ands	r3, r2
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d019      	beq.n	8009b64 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d115      	bne.n	8009b64 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	685a      	ldr	r2, [r3, #4]
 8009b3c:	4b0b      	ldr	r3, [pc, #44]	; (8009b6c <vPortFree+0xa8>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	43db      	mvns	r3, r3
 8009b42:	401a      	ands	r2, r3
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009b48:	f7fe fcc6 	bl	80084d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	685a      	ldr	r2, [r3, #4]
 8009b50:	4b07      	ldr	r3, [pc, #28]	; (8009b70 <vPortFree+0xac>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	4413      	add	r3, r2
 8009b56:	4a06      	ldr	r2, [pc, #24]	; (8009b70 <vPortFree+0xac>)
 8009b58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009b5a:	6938      	ldr	r0, [r7, #16]
 8009b5c:	f000 f86c 	bl	8009c38 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009b60:	f7fe fcc8 	bl	80084f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009b64:	bf00      	nop
 8009b66:	3718      	adds	r7, #24
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}
 8009b6c:	200031b8 	.word	0x200031b8
 8009b70:	200031b0 	.word	0x200031b0

08009b74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009b74:	b480      	push	{r7}
 8009b76:	b085      	sub	sp, #20
 8009b78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009b7a:	f242 3328 	movw	r3, #9000	; 0x2328
 8009b7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009b80:	4b27      	ldr	r3, [pc, #156]	; (8009c20 <prvHeapInit+0xac>)
 8009b82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	f003 0307 	and.w	r3, r3, #7
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d00c      	beq.n	8009ba8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	3307      	adds	r3, #7
 8009b92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f023 0307 	bic.w	r3, r3, #7
 8009b9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009b9c:	68ba      	ldr	r2, [r7, #8]
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	1ad3      	subs	r3, r2, r3
 8009ba2:	4a1f      	ldr	r2, [pc, #124]	; (8009c20 <prvHeapInit+0xac>)
 8009ba4:	4413      	add	r3, r2
 8009ba6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009bac:	4a1d      	ldr	r2, [pc, #116]	; (8009c24 <prvHeapInit+0xb0>)
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009bb2:	4b1c      	ldr	r3, [pc, #112]	; (8009c24 <prvHeapInit+0xb0>)
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	68ba      	ldr	r2, [r7, #8]
 8009bbc:	4413      	add	r3, r2
 8009bbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009bc0:	2208      	movs	r2, #8
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	1a9b      	subs	r3, r3, r2
 8009bc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	f023 0307 	bic.w	r3, r3, #7
 8009bce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	4a15      	ldr	r2, [pc, #84]	; (8009c28 <prvHeapInit+0xb4>)
 8009bd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009bd6:	4b14      	ldr	r3, [pc, #80]	; (8009c28 <prvHeapInit+0xb4>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009bde:	4b12      	ldr	r3, [pc, #72]	; (8009c28 <prvHeapInit+0xb4>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	2200      	movs	r2, #0
 8009be4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	68fa      	ldr	r2, [r7, #12]
 8009bee:	1ad2      	subs	r2, r2, r3
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009bf4:	4b0c      	ldr	r3, [pc, #48]	; (8009c28 <prvHeapInit+0xb4>)
 8009bf6:	681a      	ldr	r2, [r3, #0]
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	4a0a      	ldr	r2, [pc, #40]	; (8009c2c <prvHeapInit+0xb8>)
 8009c02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	685b      	ldr	r3, [r3, #4]
 8009c08:	4a09      	ldr	r2, [pc, #36]	; (8009c30 <prvHeapInit+0xbc>)
 8009c0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009c0c:	4b09      	ldr	r3, [pc, #36]	; (8009c34 <prvHeapInit+0xc0>)
 8009c0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009c12:	601a      	str	r2, [r3, #0]
}
 8009c14:	bf00      	nop
 8009c16:	3714      	adds	r7, #20
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr
 8009c20:	20000e7c 	.word	0x20000e7c
 8009c24:	200031a4 	.word	0x200031a4
 8009c28:	200031ac 	.word	0x200031ac
 8009c2c:	200031b4 	.word	0x200031b4
 8009c30:	200031b0 	.word	0x200031b0
 8009c34:	200031b8 	.word	0x200031b8

08009c38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b085      	sub	sp, #20
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009c40:	4b28      	ldr	r3, [pc, #160]	; (8009ce4 <prvInsertBlockIntoFreeList+0xac>)
 8009c42:	60fb      	str	r3, [r7, #12]
 8009c44:	e002      	b.n	8009c4c <prvInsertBlockIntoFreeList+0x14>
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	60fb      	str	r3, [r7, #12]
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	687a      	ldr	r2, [r7, #4]
 8009c52:	429a      	cmp	r2, r3
 8009c54:	d8f7      	bhi.n	8009c46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	685b      	ldr	r3, [r3, #4]
 8009c5e:	68ba      	ldr	r2, [r7, #8]
 8009c60:	4413      	add	r3, r2
 8009c62:	687a      	ldr	r2, [r7, #4]
 8009c64:	429a      	cmp	r2, r3
 8009c66:	d108      	bne.n	8009c7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	685a      	ldr	r2, [r3, #4]
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	685b      	ldr	r3, [r3, #4]
 8009c70:	441a      	add	r2, r3
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	685b      	ldr	r3, [r3, #4]
 8009c82:	68ba      	ldr	r2, [r7, #8]
 8009c84:	441a      	add	r2, r3
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	429a      	cmp	r2, r3
 8009c8c:	d118      	bne.n	8009cc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	681a      	ldr	r2, [r3, #0]
 8009c92:	4b15      	ldr	r3, [pc, #84]	; (8009ce8 <prvInsertBlockIntoFreeList+0xb0>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	429a      	cmp	r2, r3
 8009c98:	d00d      	beq.n	8009cb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	685a      	ldr	r2, [r3, #4]
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	441a      	add	r2, r3
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	681a      	ldr	r2, [r3, #0]
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	601a      	str	r2, [r3, #0]
 8009cb4:	e008      	b.n	8009cc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009cb6:	4b0c      	ldr	r3, [pc, #48]	; (8009ce8 <prvInsertBlockIntoFreeList+0xb0>)
 8009cb8:	681a      	ldr	r2, [r3, #0]
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	601a      	str	r2, [r3, #0]
 8009cbe:	e003      	b.n	8009cc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	681a      	ldr	r2, [r3, #0]
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009cc8:	68fa      	ldr	r2, [r7, #12]
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	429a      	cmp	r2, r3
 8009cce:	d002      	beq.n	8009cd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	687a      	ldr	r2, [r7, #4]
 8009cd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009cd6:	bf00      	nop
 8009cd8:	3714      	adds	r7, #20
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce0:	4770      	bx	lr
 8009ce2:	bf00      	nop
 8009ce4:	200031a4 	.word	0x200031a4
 8009ce8:	200031ac 	.word	0x200031ac

08009cec <__errno>:
 8009cec:	4b01      	ldr	r3, [pc, #4]	; (8009cf4 <__errno+0x8>)
 8009cee:	6818      	ldr	r0, [r3, #0]
 8009cf0:	4770      	bx	lr
 8009cf2:	bf00      	nop
 8009cf4:	20000038 	.word	0x20000038

08009cf8 <__libc_init_array>:
 8009cf8:	b570      	push	{r4, r5, r6, lr}
 8009cfa:	4e0d      	ldr	r6, [pc, #52]	; (8009d30 <__libc_init_array+0x38>)
 8009cfc:	4c0d      	ldr	r4, [pc, #52]	; (8009d34 <__libc_init_array+0x3c>)
 8009cfe:	1ba4      	subs	r4, r4, r6
 8009d00:	10a4      	asrs	r4, r4, #2
 8009d02:	2500      	movs	r5, #0
 8009d04:	42a5      	cmp	r5, r4
 8009d06:	d109      	bne.n	8009d1c <__libc_init_array+0x24>
 8009d08:	4e0b      	ldr	r6, [pc, #44]	; (8009d38 <__libc_init_array+0x40>)
 8009d0a:	4c0c      	ldr	r4, [pc, #48]	; (8009d3c <__libc_init_array+0x44>)
 8009d0c:	f000 fc76 	bl	800a5fc <_init>
 8009d10:	1ba4      	subs	r4, r4, r6
 8009d12:	10a4      	asrs	r4, r4, #2
 8009d14:	2500      	movs	r5, #0
 8009d16:	42a5      	cmp	r5, r4
 8009d18:	d105      	bne.n	8009d26 <__libc_init_array+0x2e>
 8009d1a:	bd70      	pop	{r4, r5, r6, pc}
 8009d1c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009d20:	4798      	blx	r3
 8009d22:	3501      	adds	r5, #1
 8009d24:	e7ee      	b.n	8009d04 <__libc_init_array+0xc>
 8009d26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009d2a:	4798      	blx	r3
 8009d2c:	3501      	adds	r5, #1
 8009d2e:	e7f2      	b.n	8009d16 <__libc_init_array+0x1e>
 8009d30:	0800a80c 	.word	0x0800a80c
 8009d34:	0800a80c 	.word	0x0800a80c
 8009d38:	0800a80c 	.word	0x0800a80c
 8009d3c:	0800a810 	.word	0x0800a810

08009d40 <memcpy>:
 8009d40:	b510      	push	{r4, lr}
 8009d42:	1e43      	subs	r3, r0, #1
 8009d44:	440a      	add	r2, r1
 8009d46:	4291      	cmp	r1, r2
 8009d48:	d100      	bne.n	8009d4c <memcpy+0xc>
 8009d4a:	bd10      	pop	{r4, pc}
 8009d4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d54:	e7f7      	b.n	8009d46 <memcpy+0x6>

08009d56 <memset>:
 8009d56:	4402      	add	r2, r0
 8009d58:	4603      	mov	r3, r0
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d100      	bne.n	8009d60 <memset+0xa>
 8009d5e:	4770      	bx	lr
 8009d60:	f803 1b01 	strb.w	r1, [r3], #1
 8009d64:	e7f9      	b.n	8009d5a <memset+0x4>
	...

08009d68 <sniprintf>:
 8009d68:	b40c      	push	{r2, r3}
 8009d6a:	b530      	push	{r4, r5, lr}
 8009d6c:	4b17      	ldr	r3, [pc, #92]	; (8009dcc <sniprintf+0x64>)
 8009d6e:	1e0c      	subs	r4, r1, #0
 8009d70:	b09d      	sub	sp, #116	; 0x74
 8009d72:	681d      	ldr	r5, [r3, #0]
 8009d74:	da08      	bge.n	8009d88 <sniprintf+0x20>
 8009d76:	238b      	movs	r3, #139	; 0x8b
 8009d78:	602b      	str	r3, [r5, #0]
 8009d7a:	f04f 30ff 	mov.w	r0, #4294967295
 8009d7e:	b01d      	add	sp, #116	; 0x74
 8009d80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009d84:	b002      	add	sp, #8
 8009d86:	4770      	bx	lr
 8009d88:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009d8c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009d90:	bf14      	ite	ne
 8009d92:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009d96:	4623      	moveq	r3, r4
 8009d98:	9304      	str	r3, [sp, #16]
 8009d9a:	9307      	str	r3, [sp, #28]
 8009d9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009da0:	9002      	str	r0, [sp, #8]
 8009da2:	9006      	str	r0, [sp, #24]
 8009da4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009da8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009daa:	ab21      	add	r3, sp, #132	; 0x84
 8009dac:	a902      	add	r1, sp, #8
 8009dae:	4628      	mov	r0, r5
 8009db0:	9301      	str	r3, [sp, #4]
 8009db2:	f000 f867 	bl	8009e84 <_svfiprintf_r>
 8009db6:	1c43      	adds	r3, r0, #1
 8009db8:	bfbc      	itt	lt
 8009dba:	238b      	movlt	r3, #139	; 0x8b
 8009dbc:	602b      	strlt	r3, [r5, #0]
 8009dbe:	2c00      	cmp	r4, #0
 8009dc0:	d0dd      	beq.n	8009d7e <sniprintf+0x16>
 8009dc2:	9b02      	ldr	r3, [sp, #8]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	701a      	strb	r2, [r3, #0]
 8009dc8:	e7d9      	b.n	8009d7e <sniprintf+0x16>
 8009dca:	bf00      	nop
 8009dcc:	20000038 	.word	0x20000038

08009dd0 <__ssputs_r>:
 8009dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009dd4:	688e      	ldr	r6, [r1, #8]
 8009dd6:	429e      	cmp	r6, r3
 8009dd8:	4682      	mov	sl, r0
 8009dda:	460c      	mov	r4, r1
 8009ddc:	4690      	mov	r8, r2
 8009dde:	4699      	mov	r9, r3
 8009de0:	d837      	bhi.n	8009e52 <__ssputs_r+0x82>
 8009de2:	898a      	ldrh	r2, [r1, #12]
 8009de4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009de8:	d031      	beq.n	8009e4e <__ssputs_r+0x7e>
 8009dea:	6825      	ldr	r5, [r4, #0]
 8009dec:	6909      	ldr	r1, [r1, #16]
 8009dee:	1a6f      	subs	r7, r5, r1
 8009df0:	6965      	ldr	r5, [r4, #20]
 8009df2:	2302      	movs	r3, #2
 8009df4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009df8:	fb95 f5f3 	sdiv	r5, r5, r3
 8009dfc:	f109 0301 	add.w	r3, r9, #1
 8009e00:	443b      	add	r3, r7
 8009e02:	429d      	cmp	r5, r3
 8009e04:	bf38      	it	cc
 8009e06:	461d      	movcc	r5, r3
 8009e08:	0553      	lsls	r3, r2, #21
 8009e0a:	d530      	bpl.n	8009e6e <__ssputs_r+0x9e>
 8009e0c:	4629      	mov	r1, r5
 8009e0e:	f000 fb21 	bl	800a454 <_malloc_r>
 8009e12:	4606      	mov	r6, r0
 8009e14:	b950      	cbnz	r0, 8009e2c <__ssputs_r+0x5c>
 8009e16:	230c      	movs	r3, #12
 8009e18:	f8ca 3000 	str.w	r3, [sl]
 8009e1c:	89a3      	ldrh	r3, [r4, #12]
 8009e1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e22:	81a3      	strh	r3, [r4, #12]
 8009e24:	f04f 30ff 	mov.w	r0, #4294967295
 8009e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e2c:	463a      	mov	r2, r7
 8009e2e:	6921      	ldr	r1, [r4, #16]
 8009e30:	f7ff ff86 	bl	8009d40 <memcpy>
 8009e34:	89a3      	ldrh	r3, [r4, #12]
 8009e36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009e3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e3e:	81a3      	strh	r3, [r4, #12]
 8009e40:	6126      	str	r6, [r4, #16]
 8009e42:	6165      	str	r5, [r4, #20]
 8009e44:	443e      	add	r6, r7
 8009e46:	1bed      	subs	r5, r5, r7
 8009e48:	6026      	str	r6, [r4, #0]
 8009e4a:	60a5      	str	r5, [r4, #8]
 8009e4c:	464e      	mov	r6, r9
 8009e4e:	454e      	cmp	r6, r9
 8009e50:	d900      	bls.n	8009e54 <__ssputs_r+0x84>
 8009e52:	464e      	mov	r6, r9
 8009e54:	4632      	mov	r2, r6
 8009e56:	4641      	mov	r1, r8
 8009e58:	6820      	ldr	r0, [r4, #0]
 8009e5a:	f000 fa93 	bl	800a384 <memmove>
 8009e5e:	68a3      	ldr	r3, [r4, #8]
 8009e60:	1b9b      	subs	r3, r3, r6
 8009e62:	60a3      	str	r3, [r4, #8]
 8009e64:	6823      	ldr	r3, [r4, #0]
 8009e66:	441e      	add	r6, r3
 8009e68:	6026      	str	r6, [r4, #0]
 8009e6a:	2000      	movs	r0, #0
 8009e6c:	e7dc      	b.n	8009e28 <__ssputs_r+0x58>
 8009e6e:	462a      	mov	r2, r5
 8009e70:	f000 fb4a 	bl	800a508 <_realloc_r>
 8009e74:	4606      	mov	r6, r0
 8009e76:	2800      	cmp	r0, #0
 8009e78:	d1e2      	bne.n	8009e40 <__ssputs_r+0x70>
 8009e7a:	6921      	ldr	r1, [r4, #16]
 8009e7c:	4650      	mov	r0, sl
 8009e7e:	f000 fa9b 	bl	800a3b8 <_free_r>
 8009e82:	e7c8      	b.n	8009e16 <__ssputs_r+0x46>

08009e84 <_svfiprintf_r>:
 8009e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e88:	461d      	mov	r5, r3
 8009e8a:	898b      	ldrh	r3, [r1, #12]
 8009e8c:	061f      	lsls	r7, r3, #24
 8009e8e:	b09d      	sub	sp, #116	; 0x74
 8009e90:	4680      	mov	r8, r0
 8009e92:	460c      	mov	r4, r1
 8009e94:	4616      	mov	r6, r2
 8009e96:	d50f      	bpl.n	8009eb8 <_svfiprintf_r+0x34>
 8009e98:	690b      	ldr	r3, [r1, #16]
 8009e9a:	b96b      	cbnz	r3, 8009eb8 <_svfiprintf_r+0x34>
 8009e9c:	2140      	movs	r1, #64	; 0x40
 8009e9e:	f000 fad9 	bl	800a454 <_malloc_r>
 8009ea2:	6020      	str	r0, [r4, #0]
 8009ea4:	6120      	str	r0, [r4, #16]
 8009ea6:	b928      	cbnz	r0, 8009eb4 <_svfiprintf_r+0x30>
 8009ea8:	230c      	movs	r3, #12
 8009eaa:	f8c8 3000 	str.w	r3, [r8]
 8009eae:	f04f 30ff 	mov.w	r0, #4294967295
 8009eb2:	e0c8      	b.n	800a046 <_svfiprintf_r+0x1c2>
 8009eb4:	2340      	movs	r3, #64	; 0x40
 8009eb6:	6163      	str	r3, [r4, #20]
 8009eb8:	2300      	movs	r3, #0
 8009eba:	9309      	str	r3, [sp, #36]	; 0x24
 8009ebc:	2320      	movs	r3, #32
 8009ebe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ec2:	2330      	movs	r3, #48	; 0x30
 8009ec4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ec8:	9503      	str	r5, [sp, #12]
 8009eca:	f04f 0b01 	mov.w	fp, #1
 8009ece:	4637      	mov	r7, r6
 8009ed0:	463d      	mov	r5, r7
 8009ed2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009ed6:	b10b      	cbz	r3, 8009edc <_svfiprintf_r+0x58>
 8009ed8:	2b25      	cmp	r3, #37	; 0x25
 8009eda:	d13e      	bne.n	8009f5a <_svfiprintf_r+0xd6>
 8009edc:	ebb7 0a06 	subs.w	sl, r7, r6
 8009ee0:	d00b      	beq.n	8009efa <_svfiprintf_r+0x76>
 8009ee2:	4653      	mov	r3, sl
 8009ee4:	4632      	mov	r2, r6
 8009ee6:	4621      	mov	r1, r4
 8009ee8:	4640      	mov	r0, r8
 8009eea:	f7ff ff71 	bl	8009dd0 <__ssputs_r>
 8009eee:	3001      	adds	r0, #1
 8009ef0:	f000 80a4 	beq.w	800a03c <_svfiprintf_r+0x1b8>
 8009ef4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ef6:	4453      	add	r3, sl
 8009ef8:	9309      	str	r3, [sp, #36]	; 0x24
 8009efa:	783b      	ldrb	r3, [r7, #0]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	f000 809d 	beq.w	800a03c <_svfiprintf_r+0x1b8>
 8009f02:	2300      	movs	r3, #0
 8009f04:	f04f 32ff 	mov.w	r2, #4294967295
 8009f08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f0c:	9304      	str	r3, [sp, #16]
 8009f0e:	9307      	str	r3, [sp, #28]
 8009f10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f14:	931a      	str	r3, [sp, #104]	; 0x68
 8009f16:	462f      	mov	r7, r5
 8009f18:	2205      	movs	r2, #5
 8009f1a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009f1e:	4850      	ldr	r0, [pc, #320]	; (800a060 <_svfiprintf_r+0x1dc>)
 8009f20:	f7f6 f956 	bl	80001d0 <memchr>
 8009f24:	9b04      	ldr	r3, [sp, #16]
 8009f26:	b9d0      	cbnz	r0, 8009f5e <_svfiprintf_r+0xda>
 8009f28:	06d9      	lsls	r1, r3, #27
 8009f2a:	bf44      	itt	mi
 8009f2c:	2220      	movmi	r2, #32
 8009f2e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009f32:	071a      	lsls	r2, r3, #28
 8009f34:	bf44      	itt	mi
 8009f36:	222b      	movmi	r2, #43	; 0x2b
 8009f38:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009f3c:	782a      	ldrb	r2, [r5, #0]
 8009f3e:	2a2a      	cmp	r2, #42	; 0x2a
 8009f40:	d015      	beq.n	8009f6e <_svfiprintf_r+0xea>
 8009f42:	9a07      	ldr	r2, [sp, #28]
 8009f44:	462f      	mov	r7, r5
 8009f46:	2000      	movs	r0, #0
 8009f48:	250a      	movs	r5, #10
 8009f4a:	4639      	mov	r1, r7
 8009f4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f50:	3b30      	subs	r3, #48	; 0x30
 8009f52:	2b09      	cmp	r3, #9
 8009f54:	d94d      	bls.n	8009ff2 <_svfiprintf_r+0x16e>
 8009f56:	b1b8      	cbz	r0, 8009f88 <_svfiprintf_r+0x104>
 8009f58:	e00f      	b.n	8009f7a <_svfiprintf_r+0xf6>
 8009f5a:	462f      	mov	r7, r5
 8009f5c:	e7b8      	b.n	8009ed0 <_svfiprintf_r+0x4c>
 8009f5e:	4a40      	ldr	r2, [pc, #256]	; (800a060 <_svfiprintf_r+0x1dc>)
 8009f60:	1a80      	subs	r0, r0, r2
 8009f62:	fa0b f000 	lsl.w	r0, fp, r0
 8009f66:	4318      	orrs	r0, r3
 8009f68:	9004      	str	r0, [sp, #16]
 8009f6a:	463d      	mov	r5, r7
 8009f6c:	e7d3      	b.n	8009f16 <_svfiprintf_r+0x92>
 8009f6e:	9a03      	ldr	r2, [sp, #12]
 8009f70:	1d11      	adds	r1, r2, #4
 8009f72:	6812      	ldr	r2, [r2, #0]
 8009f74:	9103      	str	r1, [sp, #12]
 8009f76:	2a00      	cmp	r2, #0
 8009f78:	db01      	blt.n	8009f7e <_svfiprintf_r+0xfa>
 8009f7a:	9207      	str	r2, [sp, #28]
 8009f7c:	e004      	b.n	8009f88 <_svfiprintf_r+0x104>
 8009f7e:	4252      	negs	r2, r2
 8009f80:	f043 0302 	orr.w	r3, r3, #2
 8009f84:	9207      	str	r2, [sp, #28]
 8009f86:	9304      	str	r3, [sp, #16]
 8009f88:	783b      	ldrb	r3, [r7, #0]
 8009f8a:	2b2e      	cmp	r3, #46	; 0x2e
 8009f8c:	d10c      	bne.n	8009fa8 <_svfiprintf_r+0x124>
 8009f8e:	787b      	ldrb	r3, [r7, #1]
 8009f90:	2b2a      	cmp	r3, #42	; 0x2a
 8009f92:	d133      	bne.n	8009ffc <_svfiprintf_r+0x178>
 8009f94:	9b03      	ldr	r3, [sp, #12]
 8009f96:	1d1a      	adds	r2, r3, #4
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	9203      	str	r2, [sp, #12]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	bfb8      	it	lt
 8009fa0:	f04f 33ff 	movlt.w	r3, #4294967295
 8009fa4:	3702      	adds	r7, #2
 8009fa6:	9305      	str	r3, [sp, #20]
 8009fa8:	4d2e      	ldr	r5, [pc, #184]	; (800a064 <_svfiprintf_r+0x1e0>)
 8009faa:	7839      	ldrb	r1, [r7, #0]
 8009fac:	2203      	movs	r2, #3
 8009fae:	4628      	mov	r0, r5
 8009fb0:	f7f6 f90e 	bl	80001d0 <memchr>
 8009fb4:	b138      	cbz	r0, 8009fc6 <_svfiprintf_r+0x142>
 8009fb6:	2340      	movs	r3, #64	; 0x40
 8009fb8:	1b40      	subs	r0, r0, r5
 8009fba:	fa03 f000 	lsl.w	r0, r3, r0
 8009fbe:	9b04      	ldr	r3, [sp, #16]
 8009fc0:	4303      	orrs	r3, r0
 8009fc2:	3701      	adds	r7, #1
 8009fc4:	9304      	str	r3, [sp, #16]
 8009fc6:	7839      	ldrb	r1, [r7, #0]
 8009fc8:	4827      	ldr	r0, [pc, #156]	; (800a068 <_svfiprintf_r+0x1e4>)
 8009fca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009fce:	2206      	movs	r2, #6
 8009fd0:	1c7e      	adds	r6, r7, #1
 8009fd2:	f7f6 f8fd 	bl	80001d0 <memchr>
 8009fd6:	2800      	cmp	r0, #0
 8009fd8:	d038      	beq.n	800a04c <_svfiprintf_r+0x1c8>
 8009fda:	4b24      	ldr	r3, [pc, #144]	; (800a06c <_svfiprintf_r+0x1e8>)
 8009fdc:	bb13      	cbnz	r3, 800a024 <_svfiprintf_r+0x1a0>
 8009fde:	9b03      	ldr	r3, [sp, #12]
 8009fe0:	3307      	adds	r3, #7
 8009fe2:	f023 0307 	bic.w	r3, r3, #7
 8009fe6:	3308      	adds	r3, #8
 8009fe8:	9303      	str	r3, [sp, #12]
 8009fea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fec:	444b      	add	r3, r9
 8009fee:	9309      	str	r3, [sp, #36]	; 0x24
 8009ff0:	e76d      	b.n	8009ece <_svfiprintf_r+0x4a>
 8009ff2:	fb05 3202 	mla	r2, r5, r2, r3
 8009ff6:	2001      	movs	r0, #1
 8009ff8:	460f      	mov	r7, r1
 8009ffa:	e7a6      	b.n	8009f4a <_svfiprintf_r+0xc6>
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	3701      	adds	r7, #1
 800a000:	9305      	str	r3, [sp, #20]
 800a002:	4619      	mov	r1, r3
 800a004:	250a      	movs	r5, #10
 800a006:	4638      	mov	r0, r7
 800a008:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a00c:	3a30      	subs	r2, #48	; 0x30
 800a00e:	2a09      	cmp	r2, #9
 800a010:	d903      	bls.n	800a01a <_svfiprintf_r+0x196>
 800a012:	2b00      	cmp	r3, #0
 800a014:	d0c8      	beq.n	8009fa8 <_svfiprintf_r+0x124>
 800a016:	9105      	str	r1, [sp, #20]
 800a018:	e7c6      	b.n	8009fa8 <_svfiprintf_r+0x124>
 800a01a:	fb05 2101 	mla	r1, r5, r1, r2
 800a01e:	2301      	movs	r3, #1
 800a020:	4607      	mov	r7, r0
 800a022:	e7f0      	b.n	800a006 <_svfiprintf_r+0x182>
 800a024:	ab03      	add	r3, sp, #12
 800a026:	9300      	str	r3, [sp, #0]
 800a028:	4622      	mov	r2, r4
 800a02a:	4b11      	ldr	r3, [pc, #68]	; (800a070 <_svfiprintf_r+0x1ec>)
 800a02c:	a904      	add	r1, sp, #16
 800a02e:	4640      	mov	r0, r8
 800a030:	f3af 8000 	nop.w
 800a034:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a038:	4681      	mov	r9, r0
 800a03a:	d1d6      	bne.n	8009fea <_svfiprintf_r+0x166>
 800a03c:	89a3      	ldrh	r3, [r4, #12]
 800a03e:	065b      	lsls	r3, r3, #25
 800a040:	f53f af35 	bmi.w	8009eae <_svfiprintf_r+0x2a>
 800a044:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a046:	b01d      	add	sp, #116	; 0x74
 800a048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a04c:	ab03      	add	r3, sp, #12
 800a04e:	9300      	str	r3, [sp, #0]
 800a050:	4622      	mov	r2, r4
 800a052:	4b07      	ldr	r3, [pc, #28]	; (800a070 <_svfiprintf_r+0x1ec>)
 800a054:	a904      	add	r1, sp, #16
 800a056:	4640      	mov	r0, r8
 800a058:	f000 f882 	bl	800a160 <_printf_i>
 800a05c:	e7ea      	b.n	800a034 <_svfiprintf_r+0x1b0>
 800a05e:	bf00      	nop
 800a060:	0800a7d0 	.word	0x0800a7d0
 800a064:	0800a7d6 	.word	0x0800a7d6
 800a068:	0800a7da 	.word	0x0800a7da
 800a06c:	00000000 	.word	0x00000000
 800a070:	08009dd1 	.word	0x08009dd1

0800a074 <_printf_common>:
 800a074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a078:	4691      	mov	r9, r2
 800a07a:	461f      	mov	r7, r3
 800a07c:	688a      	ldr	r2, [r1, #8]
 800a07e:	690b      	ldr	r3, [r1, #16]
 800a080:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a084:	4293      	cmp	r3, r2
 800a086:	bfb8      	it	lt
 800a088:	4613      	movlt	r3, r2
 800a08a:	f8c9 3000 	str.w	r3, [r9]
 800a08e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a092:	4606      	mov	r6, r0
 800a094:	460c      	mov	r4, r1
 800a096:	b112      	cbz	r2, 800a09e <_printf_common+0x2a>
 800a098:	3301      	adds	r3, #1
 800a09a:	f8c9 3000 	str.w	r3, [r9]
 800a09e:	6823      	ldr	r3, [r4, #0]
 800a0a0:	0699      	lsls	r1, r3, #26
 800a0a2:	bf42      	ittt	mi
 800a0a4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a0a8:	3302      	addmi	r3, #2
 800a0aa:	f8c9 3000 	strmi.w	r3, [r9]
 800a0ae:	6825      	ldr	r5, [r4, #0]
 800a0b0:	f015 0506 	ands.w	r5, r5, #6
 800a0b4:	d107      	bne.n	800a0c6 <_printf_common+0x52>
 800a0b6:	f104 0a19 	add.w	sl, r4, #25
 800a0ba:	68e3      	ldr	r3, [r4, #12]
 800a0bc:	f8d9 2000 	ldr.w	r2, [r9]
 800a0c0:	1a9b      	subs	r3, r3, r2
 800a0c2:	42ab      	cmp	r3, r5
 800a0c4:	dc28      	bgt.n	800a118 <_printf_common+0xa4>
 800a0c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a0ca:	6822      	ldr	r2, [r4, #0]
 800a0cc:	3300      	adds	r3, #0
 800a0ce:	bf18      	it	ne
 800a0d0:	2301      	movne	r3, #1
 800a0d2:	0692      	lsls	r2, r2, #26
 800a0d4:	d42d      	bmi.n	800a132 <_printf_common+0xbe>
 800a0d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a0da:	4639      	mov	r1, r7
 800a0dc:	4630      	mov	r0, r6
 800a0de:	47c0      	blx	r8
 800a0e0:	3001      	adds	r0, #1
 800a0e2:	d020      	beq.n	800a126 <_printf_common+0xb2>
 800a0e4:	6823      	ldr	r3, [r4, #0]
 800a0e6:	68e5      	ldr	r5, [r4, #12]
 800a0e8:	f8d9 2000 	ldr.w	r2, [r9]
 800a0ec:	f003 0306 	and.w	r3, r3, #6
 800a0f0:	2b04      	cmp	r3, #4
 800a0f2:	bf08      	it	eq
 800a0f4:	1aad      	subeq	r5, r5, r2
 800a0f6:	68a3      	ldr	r3, [r4, #8]
 800a0f8:	6922      	ldr	r2, [r4, #16]
 800a0fa:	bf0c      	ite	eq
 800a0fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a100:	2500      	movne	r5, #0
 800a102:	4293      	cmp	r3, r2
 800a104:	bfc4      	itt	gt
 800a106:	1a9b      	subgt	r3, r3, r2
 800a108:	18ed      	addgt	r5, r5, r3
 800a10a:	f04f 0900 	mov.w	r9, #0
 800a10e:	341a      	adds	r4, #26
 800a110:	454d      	cmp	r5, r9
 800a112:	d11a      	bne.n	800a14a <_printf_common+0xd6>
 800a114:	2000      	movs	r0, #0
 800a116:	e008      	b.n	800a12a <_printf_common+0xb6>
 800a118:	2301      	movs	r3, #1
 800a11a:	4652      	mov	r2, sl
 800a11c:	4639      	mov	r1, r7
 800a11e:	4630      	mov	r0, r6
 800a120:	47c0      	blx	r8
 800a122:	3001      	adds	r0, #1
 800a124:	d103      	bne.n	800a12e <_printf_common+0xba>
 800a126:	f04f 30ff 	mov.w	r0, #4294967295
 800a12a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a12e:	3501      	adds	r5, #1
 800a130:	e7c3      	b.n	800a0ba <_printf_common+0x46>
 800a132:	18e1      	adds	r1, r4, r3
 800a134:	1c5a      	adds	r2, r3, #1
 800a136:	2030      	movs	r0, #48	; 0x30
 800a138:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a13c:	4422      	add	r2, r4
 800a13e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a142:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a146:	3302      	adds	r3, #2
 800a148:	e7c5      	b.n	800a0d6 <_printf_common+0x62>
 800a14a:	2301      	movs	r3, #1
 800a14c:	4622      	mov	r2, r4
 800a14e:	4639      	mov	r1, r7
 800a150:	4630      	mov	r0, r6
 800a152:	47c0      	blx	r8
 800a154:	3001      	adds	r0, #1
 800a156:	d0e6      	beq.n	800a126 <_printf_common+0xb2>
 800a158:	f109 0901 	add.w	r9, r9, #1
 800a15c:	e7d8      	b.n	800a110 <_printf_common+0x9c>
	...

0800a160 <_printf_i>:
 800a160:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a164:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a168:	460c      	mov	r4, r1
 800a16a:	7e09      	ldrb	r1, [r1, #24]
 800a16c:	b085      	sub	sp, #20
 800a16e:	296e      	cmp	r1, #110	; 0x6e
 800a170:	4617      	mov	r7, r2
 800a172:	4606      	mov	r6, r0
 800a174:	4698      	mov	r8, r3
 800a176:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a178:	f000 80b3 	beq.w	800a2e2 <_printf_i+0x182>
 800a17c:	d822      	bhi.n	800a1c4 <_printf_i+0x64>
 800a17e:	2963      	cmp	r1, #99	; 0x63
 800a180:	d036      	beq.n	800a1f0 <_printf_i+0x90>
 800a182:	d80a      	bhi.n	800a19a <_printf_i+0x3a>
 800a184:	2900      	cmp	r1, #0
 800a186:	f000 80b9 	beq.w	800a2fc <_printf_i+0x19c>
 800a18a:	2958      	cmp	r1, #88	; 0x58
 800a18c:	f000 8083 	beq.w	800a296 <_printf_i+0x136>
 800a190:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a194:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a198:	e032      	b.n	800a200 <_printf_i+0xa0>
 800a19a:	2964      	cmp	r1, #100	; 0x64
 800a19c:	d001      	beq.n	800a1a2 <_printf_i+0x42>
 800a19e:	2969      	cmp	r1, #105	; 0x69
 800a1a0:	d1f6      	bne.n	800a190 <_printf_i+0x30>
 800a1a2:	6820      	ldr	r0, [r4, #0]
 800a1a4:	6813      	ldr	r3, [r2, #0]
 800a1a6:	0605      	lsls	r5, r0, #24
 800a1a8:	f103 0104 	add.w	r1, r3, #4
 800a1ac:	d52a      	bpl.n	800a204 <_printf_i+0xa4>
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	6011      	str	r1, [r2, #0]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	da03      	bge.n	800a1be <_printf_i+0x5e>
 800a1b6:	222d      	movs	r2, #45	; 0x2d
 800a1b8:	425b      	negs	r3, r3
 800a1ba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a1be:	486f      	ldr	r0, [pc, #444]	; (800a37c <_printf_i+0x21c>)
 800a1c0:	220a      	movs	r2, #10
 800a1c2:	e039      	b.n	800a238 <_printf_i+0xd8>
 800a1c4:	2973      	cmp	r1, #115	; 0x73
 800a1c6:	f000 809d 	beq.w	800a304 <_printf_i+0x1a4>
 800a1ca:	d808      	bhi.n	800a1de <_printf_i+0x7e>
 800a1cc:	296f      	cmp	r1, #111	; 0x6f
 800a1ce:	d020      	beq.n	800a212 <_printf_i+0xb2>
 800a1d0:	2970      	cmp	r1, #112	; 0x70
 800a1d2:	d1dd      	bne.n	800a190 <_printf_i+0x30>
 800a1d4:	6823      	ldr	r3, [r4, #0]
 800a1d6:	f043 0320 	orr.w	r3, r3, #32
 800a1da:	6023      	str	r3, [r4, #0]
 800a1dc:	e003      	b.n	800a1e6 <_printf_i+0x86>
 800a1de:	2975      	cmp	r1, #117	; 0x75
 800a1e0:	d017      	beq.n	800a212 <_printf_i+0xb2>
 800a1e2:	2978      	cmp	r1, #120	; 0x78
 800a1e4:	d1d4      	bne.n	800a190 <_printf_i+0x30>
 800a1e6:	2378      	movs	r3, #120	; 0x78
 800a1e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a1ec:	4864      	ldr	r0, [pc, #400]	; (800a380 <_printf_i+0x220>)
 800a1ee:	e055      	b.n	800a29c <_printf_i+0x13c>
 800a1f0:	6813      	ldr	r3, [r2, #0]
 800a1f2:	1d19      	adds	r1, r3, #4
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	6011      	str	r1, [r2, #0]
 800a1f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a1fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a200:	2301      	movs	r3, #1
 800a202:	e08c      	b.n	800a31e <_printf_i+0x1be>
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	6011      	str	r1, [r2, #0]
 800a208:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a20c:	bf18      	it	ne
 800a20e:	b21b      	sxthne	r3, r3
 800a210:	e7cf      	b.n	800a1b2 <_printf_i+0x52>
 800a212:	6813      	ldr	r3, [r2, #0]
 800a214:	6825      	ldr	r5, [r4, #0]
 800a216:	1d18      	adds	r0, r3, #4
 800a218:	6010      	str	r0, [r2, #0]
 800a21a:	0628      	lsls	r0, r5, #24
 800a21c:	d501      	bpl.n	800a222 <_printf_i+0xc2>
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	e002      	b.n	800a228 <_printf_i+0xc8>
 800a222:	0668      	lsls	r0, r5, #25
 800a224:	d5fb      	bpl.n	800a21e <_printf_i+0xbe>
 800a226:	881b      	ldrh	r3, [r3, #0]
 800a228:	4854      	ldr	r0, [pc, #336]	; (800a37c <_printf_i+0x21c>)
 800a22a:	296f      	cmp	r1, #111	; 0x6f
 800a22c:	bf14      	ite	ne
 800a22e:	220a      	movne	r2, #10
 800a230:	2208      	moveq	r2, #8
 800a232:	2100      	movs	r1, #0
 800a234:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a238:	6865      	ldr	r5, [r4, #4]
 800a23a:	60a5      	str	r5, [r4, #8]
 800a23c:	2d00      	cmp	r5, #0
 800a23e:	f2c0 8095 	blt.w	800a36c <_printf_i+0x20c>
 800a242:	6821      	ldr	r1, [r4, #0]
 800a244:	f021 0104 	bic.w	r1, r1, #4
 800a248:	6021      	str	r1, [r4, #0]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d13d      	bne.n	800a2ca <_printf_i+0x16a>
 800a24e:	2d00      	cmp	r5, #0
 800a250:	f040 808e 	bne.w	800a370 <_printf_i+0x210>
 800a254:	4665      	mov	r5, ip
 800a256:	2a08      	cmp	r2, #8
 800a258:	d10b      	bne.n	800a272 <_printf_i+0x112>
 800a25a:	6823      	ldr	r3, [r4, #0]
 800a25c:	07db      	lsls	r3, r3, #31
 800a25e:	d508      	bpl.n	800a272 <_printf_i+0x112>
 800a260:	6923      	ldr	r3, [r4, #16]
 800a262:	6862      	ldr	r2, [r4, #4]
 800a264:	429a      	cmp	r2, r3
 800a266:	bfde      	ittt	le
 800a268:	2330      	movle	r3, #48	; 0x30
 800a26a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a26e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a272:	ebac 0305 	sub.w	r3, ip, r5
 800a276:	6123      	str	r3, [r4, #16]
 800a278:	f8cd 8000 	str.w	r8, [sp]
 800a27c:	463b      	mov	r3, r7
 800a27e:	aa03      	add	r2, sp, #12
 800a280:	4621      	mov	r1, r4
 800a282:	4630      	mov	r0, r6
 800a284:	f7ff fef6 	bl	800a074 <_printf_common>
 800a288:	3001      	adds	r0, #1
 800a28a:	d14d      	bne.n	800a328 <_printf_i+0x1c8>
 800a28c:	f04f 30ff 	mov.w	r0, #4294967295
 800a290:	b005      	add	sp, #20
 800a292:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a296:	4839      	ldr	r0, [pc, #228]	; (800a37c <_printf_i+0x21c>)
 800a298:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a29c:	6813      	ldr	r3, [r2, #0]
 800a29e:	6821      	ldr	r1, [r4, #0]
 800a2a0:	1d1d      	adds	r5, r3, #4
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	6015      	str	r5, [r2, #0]
 800a2a6:	060a      	lsls	r2, r1, #24
 800a2a8:	d50b      	bpl.n	800a2c2 <_printf_i+0x162>
 800a2aa:	07ca      	lsls	r2, r1, #31
 800a2ac:	bf44      	itt	mi
 800a2ae:	f041 0120 	orrmi.w	r1, r1, #32
 800a2b2:	6021      	strmi	r1, [r4, #0]
 800a2b4:	b91b      	cbnz	r3, 800a2be <_printf_i+0x15e>
 800a2b6:	6822      	ldr	r2, [r4, #0]
 800a2b8:	f022 0220 	bic.w	r2, r2, #32
 800a2bc:	6022      	str	r2, [r4, #0]
 800a2be:	2210      	movs	r2, #16
 800a2c0:	e7b7      	b.n	800a232 <_printf_i+0xd2>
 800a2c2:	064d      	lsls	r5, r1, #25
 800a2c4:	bf48      	it	mi
 800a2c6:	b29b      	uxthmi	r3, r3
 800a2c8:	e7ef      	b.n	800a2aa <_printf_i+0x14a>
 800a2ca:	4665      	mov	r5, ip
 800a2cc:	fbb3 f1f2 	udiv	r1, r3, r2
 800a2d0:	fb02 3311 	mls	r3, r2, r1, r3
 800a2d4:	5cc3      	ldrb	r3, [r0, r3]
 800a2d6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a2da:	460b      	mov	r3, r1
 800a2dc:	2900      	cmp	r1, #0
 800a2de:	d1f5      	bne.n	800a2cc <_printf_i+0x16c>
 800a2e0:	e7b9      	b.n	800a256 <_printf_i+0xf6>
 800a2e2:	6813      	ldr	r3, [r2, #0]
 800a2e4:	6825      	ldr	r5, [r4, #0]
 800a2e6:	6961      	ldr	r1, [r4, #20]
 800a2e8:	1d18      	adds	r0, r3, #4
 800a2ea:	6010      	str	r0, [r2, #0]
 800a2ec:	0628      	lsls	r0, r5, #24
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	d501      	bpl.n	800a2f6 <_printf_i+0x196>
 800a2f2:	6019      	str	r1, [r3, #0]
 800a2f4:	e002      	b.n	800a2fc <_printf_i+0x19c>
 800a2f6:	066a      	lsls	r2, r5, #25
 800a2f8:	d5fb      	bpl.n	800a2f2 <_printf_i+0x192>
 800a2fa:	8019      	strh	r1, [r3, #0]
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	6123      	str	r3, [r4, #16]
 800a300:	4665      	mov	r5, ip
 800a302:	e7b9      	b.n	800a278 <_printf_i+0x118>
 800a304:	6813      	ldr	r3, [r2, #0]
 800a306:	1d19      	adds	r1, r3, #4
 800a308:	6011      	str	r1, [r2, #0]
 800a30a:	681d      	ldr	r5, [r3, #0]
 800a30c:	6862      	ldr	r2, [r4, #4]
 800a30e:	2100      	movs	r1, #0
 800a310:	4628      	mov	r0, r5
 800a312:	f7f5 ff5d 	bl	80001d0 <memchr>
 800a316:	b108      	cbz	r0, 800a31c <_printf_i+0x1bc>
 800a318:	1b40      	subs	r0, r0, r5
 800a31a:	6060      	str	r0, [r4, #4]
 800a31c:	6863      	ldr	r3, [r4, #4]
 800a31e:	6123      	str	r3, [r4, #16]
 800a320:	2300      	movs	r3, #0
 800a322:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a326:	e7a7      	b.n	800a278 <_printf_i+0x118>
 800a328:	6923      	ldr	r3, [r4, #16]
 800a32a:	462a      	mov	r2, r5
 800a32c:	4639      	mov	r1, r7
 800a32e:	4630      	mov	r0, r6
 800a330:	47c0      	blx	r8
 800a332:	3001      	adds	r0, #1
 800a334:	d0aa      	beq.n	800a28c <_printf_i+0x12c>
 800a336:	6823      	ldr	r3, [r4, #0]
 800a338:	079b      	lsls	r3, r3, #30
 800a33a:	d413      	bmi.n	800a364 <_printf_i+0x204>
 800a33c:	68e0      	ldr	r0, [r4, #12]
 800a33e:	9b03      	ldr	r3, [sp, #12]
 800a340:	4298      	cmp	r0, r3
 800a342:	bfb8      	it	lt
 800a344:	4618      	movlt	r0, r3
 800a346:	e7a3      	b.n	800a290 <_printf_i+0x130>
 800a348:	2301      	movs	r3, #1
 800a34a:	464a      	mov	r2, r9
 800a34c:	4639      	mov	r1, r7
 800a34e:	4630      	mov	r0, r6
 800a350:	47c0      	blx	r8
 800a352:	3001      	adds	r0, #1
 800a354:	d09a      	beq.n	800a28c <_printf_i+0x12c>
 800a356:	3501      	adds	r5, #1
 800a358:	68e3      	ldr	r3, [r4, #12]
 800a35a:	9a03      	ldr	r2, [sp, #12]
 800a35c:	1a9b      	subs	r3, r3, r2
 800a35e:	42ab      	cmp	r3, r5
 800a360:	dcf2      	bgt.n	800a348 <_printf_i+0x1e8>
 800a362:	e7eb      	b.n	800a33c <_printf_i+0x1dc>
 800a364:	2500      	movs	r5, #0
 800a366:	f104 0919 	add.w	r9, r4, #25
 800a36a:	e7f5      	b.n	800a358 <_printf_i+0x1f8>
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d1ac      	bne.n	800a2ca <_printf_i+0x16a>
 800a370:	7803      	ldrb	r3, [r0, #0]
 800a372:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a376:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a37a:	e76c      	b.n	800a256 <_printf_i+0xf6>
 800a37c:	0800a7e1 	.word	0x0800a7e1
 800a380:	0800a7f2 	.word	0x0800a7f2

0800a384 <memmove>:
 800a384:	4288      	cmp	r0, r1
 800a386:	b510      	push	{r4, lr}
 800a388:	eb01 0302 	add.w	r3, r1, r2
 800a38c:	d807      	bhi.n	800a39e <memmove+0x1a>
 800a38e:	1e42      	subs	r2, r0, #1
 800a390:	4299      	cmp	r1, r3
 800a392:	d00a      	beq.n	800a3aa <memmove+0x26>
 800a394:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a398:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a39c:	e7f8      	b.n	800a390 <memmove+0xc>
 800a39e:	4283      	cmp	r3, r0
 800a3a0:	d9f5      	bls.n	800a38e <memmove+0xa>
 800a3a2:	1881      	adds	r1, r0, r2
 800a3a4:	1ad2      	subs	r2, r2, r3
 800a3a6:	42d3      	cmn	r3, r2
 800a3a8:	d100      	bne.n	800a3ac <memmove+0x28>
 800a3aa:	bd10      	pop	{r4, pc}
 800a3ac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a3b0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a3b4:	e7f7      	b.n	800a3a6 <memmove+0x22>
	...

0800a3b8 <_free_r>:
 800a3b8:	b538      	push	{r3, r4, r5, lr}
 800a3ba:	4605      	mov	r5, r0
 800a3bc:	2900      	cmp	r1, #0
 800a3be:	d045      	beq.n	800a44c <_free_r+0x94>
 800a3c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3c4:	1f0c      	subs	r4, r1, #4
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	bfb8      	it	lt
 800a3ca:	18e4      	addlt	r4, r4, r3
 800a3cc:	f000 f8d2 	bl	800a574 <__malloc_lock>
 800a3d0:	4a1f      	ldr	r2, [pc, #124]	; (800a450 <_free_r+0x98>)
 800a3d2:	6813      	ldr	r3, [r2, #0]
 800a3d4:	4610      	mov	r0, r2
 800a3d6:	b933      	cbnz	r3, 800a3e6 <_free_r+0x2e>
 800a3d8:	6063      	str	r3, [r4, #4]
 800a3da:	6014      	str	r4, [r2, #0]
 800a3dc:	4628      	mov	r0, r5
 800a3de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a3e2:	f000 b8c8 	b.w	800a576 <__malloc_unlock>
 800a3e6:	42a3      	cmp	r3, r4
 800a3e8:	d90c      	bls.n	800a404 <_free_r+0x4c>
 800a3ea:	6821      	ldr	r1, [r4, #0]
 800a3ec:	1862      	adds	r2, r4, r1
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	bf04      	itt	eq
 800a3f2:	681a      	ldreq	r2, [r3, #0]
 800a3f4:	685b      	ldreq	r3, [r3, #4]
 800a3f6:	6063      	str	r3, [r4, #4]
 800a3f8:	bf04      	itt	eq
 800a3fa:	1852      	addeq	r2, r2, r1
 800a3fc:	6022      	streq	r2, [r4, #0]
 800a3fe:	6004      	str	r4, [r0, #0]
 800a400:	e7ec      	b.n	800a3dc <_free_r+0x24>
 800a402:	4613      	mov	r3, r2
 800a404:	685a      	ldr	r2, [r3, #4]
 800a406:	b10a      	cbz	r2, 800a40c <_free_r+0x54>
 800a408:	42a2      	cmp	r2, r4
 800a40a:	d9fa      	bls.n	800a402 <_free_r+0x4a>
 800a40c:	6819      	ldr	r1, [r3, #0]
 800a40e:	1858      	adds	r0, r3, r1
 800a410:	42a0      	cmp	r0, r4
 800a412:	d10b      	bne.n	800a42c <_free_r+0x74>
 800a414:	6820      	ldr	r0, [r4, #0]
 800a416:	4401      	add	r1, r0
 800a418:	1858      	adds	r0, r3, r1
 800a41a:	4282      	cmp	r2, r0
 800a41c:	6019      	str	r1, [r3, #0]
 800a41e:	d1dd      	bne.n	800a3dc <_free_r+0x24>
 800a420:	6810      	ldr	r0, [r2, #0]
 800a422:	6852      	ldr	r2, [r2, #4]
 800a424:	605a      	str	r2, [r3, #4]
 800a426:	4401      	add	r1, r0
 800a428:	6019      	str	r1, [r3, #0]
 800a42a:	e7d7      	b.n	800a3dc <_free_r+0x24>
 800a42c:	d902      	bls.n	800a434 <_free_r+0x7c>
 800a42e:	230c      	movs	r3, #12
 800a430:	602b      	str	r3, [r5, #0]
 800a432:	e7d3      	b.n	800a3dc <_free_r+0x24>
 800a434:	6820      	ldr	r0, [r4, #0]
 800a436:	1821      	adds	r1, r4, r0
 800a438:	428a      	cmp	r2, r1
 800a43a:	bf04      	itt	eq
 800a43c:	6811      	ldreq	r1, [r2, #0]
 800a43e:	6852      	ldreq	r2, [r2, #4]
 800a440:	6062      	str	r2, [r4, #4]
 800a442:	bf04      	itt	eq
 800a444:	1809      	addeq	r1, r1, r0
 800a446:	6021      	streq	r1, [r4, #0]
 800a448:	605c      	str	r4, [r3, #4]
 800a44a:	e7c7      	b.n	800a3dc <_free_r+0x24>
 800a44c:	bd38      	pop	{r3, r4, r5, pc}
 800a44e:	bf00      	nop
 800a450:	200031bc 	.word	0x200031bc

0800a454 <_malloc_r>:
 800a454:	b570      	push	{r4, r5, r6, lr}
 800a456:	1ccd      	adds	r5, r1, #3
 800a458:	f025 0503 	bic.w	r5, r5, #3
 800a45c:	3508      	adds	r5, #8
 800a45e:	2d0c      	cmp	r5, #12
 800a460:	bf38      	it	cc
 800a462:	250c      	movcc	r5, #12
 800a464:	2d00      	cmp	r5, #0
 800a466:	4606      	mov	r6, r0
 800a468:	db01      	blt.n	800a46e <_malloc_r+0x1a>
 800a46a:	42a9      	cmp	r1, r5
 800a46c:	d903      	bls.n	800a476 <_malloc_r+0x22>
 800a46e:	230c      	movs	r3, #12
 800a470:	6033      	str	r3, [r6, #0]
 800a472:	2000      	movs	r0, #0
 800a474:	bd70      	pop	{r4, r5, r6, pc}
 800a476:	f000 f87d 	bl	800a574 <__malloc_lock>
 800a47a:	4a21      	ldr	r2, [pc, #132]	; (800a500 <_malloc_r+0xac>)
 800a47c:	6814      	ldr	r4, [r2, #0]
 800a47e:	4621      	mov	r1, r4
 800a480:	b991      	cbnz	r1, 800a4a8 <_malloc_r+0x54>
 800a482:	4c20      	ldr	r4, [pc, #128]	; (800a504 <_malloc_r+0xb0>)
 800a484:	6823      	ldr	r3, [r4, #0]
 800a486:	b91b      	cbnz	r3, 800a490 <_malloc_r+0x3c>
 800a488:	4630      	mov	r0, r6
 800a48a:	f000 f863 	bl	800a554 <_sbrk_r>
 800a48e:	6020      	str	r0, [r4, #0]
 800a490:	4629      	mov	r1, r5
 800a492:	4630      	mov	r0, r6
 800a494:	f000 f85e 	bl	800a554 <_sbrk_r>
 800a498:	1c43      	adds	r3, r0, #1
 800a49a:	d124      	bne.n	800a4e6 <_malloc_r+0x92>
 800a49c:	230c      	movs	r3, #12
 800a49e:	6033      	str	r3, [r6, #0]
 800a4a0:	4630      	mov	r0, r6
 800a4a2:	f000 f868 	bl	800a576 <__malloc_unlock>
 800a4a6:	e7e4      	b.n	800a472 <_malloc_r+0x1e>
 800a4a8:	680b      	ldr	r3, [r1, #0]
 800a4aa:	1b5b      	subs	r3, r3, r5
 800a4ac:	d418      	bmi.n	800a4e0 <_malloc_r+0x8c>
 800a4ae:	2b0b      	cmp	r3, #11
 800a4b0:	d90f      	bls.n	800a4d2 <_malloc_r+0x7e>
 800a4b2:	600b      	str	r3, [r1, #0]
 800a4b4:	50cd      	str	r5, [r1, r3]
 800a4b6:	18cc      	adds	r4, r1, r3
 800a4b8:	4630      	mov	r0, r6
 800a4ba:	f000 f85c 	bl	800a576 <__malloc_unlock>
 800a4be:	f104 000b 	add.w	r0, r4, #11
 800a4c2:	1d23      	adds	r3, r4, #4
 800a4c4:	f020 0007 	bic.w	r0, r0, #7
 800a4c8:	1ac3      	subs	r3, r0, r3
 800a4ca:	d0d3      	beq.n	800a474 <_malloc_r+0x20>
 800a4cc:	425a      	negs	r2, r3
 800a4ce:	50e2      	str	r2, [r4, r3]
 800a4d0:	e7d0      	b.n	800a474 <_malloc_r+0x20>
 800a4d2:	428c      	cmp	r4, r1
 800a4d4:	684b      	ldr	r3, [r1, #4]
 800a4d6:	bf16      	itet	ne
 800a4d8:	6063      	strne	r3, [r4, #4]
 800a4da:	6013      	streq	r3, [r2, #0]
 800a4dc:	460c      	movne	r4, r1
 800a4de:	e7eb      	b.n	800a4b8 <_malloc_r+0x64>
 800a4e0:	460c      	mov	r4, r1
 800a4e2:	6849      	ldr	r1, [r1, #4]
 800a4e4:	e7cc      	b.n	800a480 <_malloc_r+0x2c>
 800a4e6:	1cc4      	adds	r4, r0, #3
 800a4e8:	f024 0403 	bic.w	r4, r4, #3
 800a4ec:	42a0      	cmp	r0, r4
 800a4ee:	d005      	beq.n	800a4fc <_malloc_r+0xa8>
 800a4f0:	1a21      	subs	r1, r4, r0
 800a4f2:	4630      	mov	r0, r6
 800a4f4:	f000 f82e 	bl	800a554 <_sbrk_r>
 800a4f8:	3001      	adds	r0, #1
 800a4fa:	d0cf      	beq.n	800a49c <_malloc_r+0x48>
 800a4fc:	6025      	str	r5, [r4, #0]
 800a4fe:	e7db      	b.n	800a4b8 <_malloc_r+0x64>
 800a500:	200031bc 	.word	0x200031bc
 800a504:	200031c0 	.word	0x200031c0

0800a508 <_realloc_r>:
 800a508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a50a:	4607      	mov	r7, r0
 800a50c:	4614      	mov	r4, r2
 800a50e:	460e      	mov	r6, r1
 800a510:	b921      	cbnz	r1, 800a51c <_realloc_r+0x14>
 800a512:	4611      	mov	r1, r2
 800a514:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a518:	f7ff bf9c 	b.w	800a454 <_malloc_r>
 800a51c:	b922      	cbnz	r2, 800a528 <_realloc_r+0x20>
 800a51e:	f7ff ff4b 	bl	800a3b8 <_free_r>
 800a522:	4625      	mov	r5, r4
 800a524:	4628      	mov	r0, r5
 800a526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a528:	f000 f826 	bl	800a578 <_malloc_usable_size_r>
 800a52c:	42a0      	cmp	r0, r4
 800a52e:	d20f      	bcs.n	800a550 <_realloc_r+0x48>
 800a530:	4621      	mov	r1, r4
 800a532:	4638      	mov	r0, r7
 800a534:	f7ff ff8e 	bl	800a454 <_malloc_r>
 800a538:	4605      	mov	r5, r0
 800a53a:	2800      	cmp	r0, #0
 800a53c:	d0f2      	beq.n	800a524 <_realloc_r+0x1c>
 800a53e:	4631      	mov	r1, r6
 800a540:	4622      	mov	r2, r4
 800a542:	f7ff fbfd 	bl	8009d40 <memcpy>
 800a546:	4631      	mov	r1, r6
 800a548:	4638      	mov	r0, r7
 800a54a:	f7ff ff35 	bl	800a3b8 <_free_r>
 800a54e:	e7e9      	b.n	800a524 <_realloc_r+0x1c>
 800a550:	4635      	mov	r5, r6
 800a552:	e7e7      	b.n	800a524 <_realloc_r+0x1c>

0800a554 <_sbrk_r>:
 800a554:	b538      	push	{r3, r4, r5, lr}
 800a556:	4c06      	ldr	r4, [pc, #24]	; (800a570 <_sbrk_r+0x1c>)
 800a558:	2300      	movs	r3, #0
 800a55a:	4605      	mov	r5, r0
 800a55c:	4608      	mov	r0, r1
 800a55e:	6023      	str	r3, [r4, #0]
 800a560:	f7f7 fe74 	bl	800224c <_sbrk>
 800a564:	1c43      	adds	r3, r0, #1
 800a566:	d102      	bne.n	800a56e <_sbrk_r+0x1a>
 800a568:	6823      	ldr	r3, [r4, #0]
 800a56a:	b103      	cbz	r3, 800a56e <_sbrk_r+0x1a>
 800a56c:	602b      	str	r3, [r5, #0]
 800a56e:	bd38      	pop	{r3, r4, r5, pc}
 800a570:	2000395c 	.word	0x2000395c

0800a574 <__malloc_lock>:
 800a574:	4770      	bx	lr

0800a576 <__malloc_unlock>:
 800a576:	4770      	bx	lr

0800a578 <_malloc_usable_size_r>:
 800a578:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a57c:	1f18      	subs	r0, r3, #4
 800a57e:	2b00      	cmp	r3, #0
 800a580:	bfbc      	itt	lt
 800a582:	580b      	ldrlt	r3, [r1, r0]
 800a584:	18c0      	addlt	r0, r0, r3
 800a586:	4770      	bx	lr

0800a588 <trunc>:
 800a588:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 800a58c:	ec5c bb10 	vmov	fp, ip, d0
 800a590:	f3cc 500a 	ubfx	r0, ip, #20, #11
 800a594:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
 800a598:	2913      	cmp	r1, #19
 800a59a:	4664      	mov	r4, ip
 800a59c:	dc11      	bgt.n	800a5c2 <trunc+0x3a>
 800a59e:	2900      	cmp	r1, #0
 800a5a0:	bfa7      	ittee	ge
 800a5a2:	4b15      	ldrge	r3, [pc, #84]	; (800a5f8 <trunc+0x70>)
 800a5a4:	fa43 f101 	asrge.w	r1, r3, r1
 800a5a8:	2200      	movlt	r2, #0
 800a5aa:	f00c 4300 	andlt.w	r3, ip, #2147483648	; 0x80000000
 800a5ae:	bfa4      	itt	ge
 800a5b0:	2200      	movge	r2, #0
 800a5b2:	ea2c 0301 	bicge.w	r3, ip, r1
 800a5b6:	4693      	mov	fp, r2
 800a5b8:	469c      	mov	ip, r3
 800a5ba:	ec4c bb10 	vmov	d0, fp, ip
 800a5be:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 800a5c2:	2933      	cmp	r1, #51	; 0x33
 800a5c4:	dd0d      	ble.n	800a5e2 <trunc+0x5a>
 800a5c6:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a5ca:	d1f6      	bne.n	800a5ba <trunc+0x32>
 800a5cc:	4663      	mov	r3, ip
 800a5ce:	ee10 2a10 	vmov	r2, s0
 800a5d2:	ee10 0a10 	vmov	r0, s0
 800a5d6:	4621      	mov	r1, r4
 800a5d8:	f7f5 fe50 	bl	800027c <__adddf3>
 800a5dc:	4683      	mov	fp, r0
 800a5de:	468c      	mov	ip, r1
 800a5e0:	e7eb      	b.n	800a5ba <trunc+0x32>
 800a5e2:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
 800a5e6:	f04f 33ff 	mov.w	r3, #4294967295
 800a5ea:	fa23 f000 	lsr.w	r0, r3, r0
 800a5ee:	ea2b 0600 	bic.w	r6, fp, r0
 800a5f2:	46b3      	mov	fp, r6
 800a5f4:	46a4      	mov	ip, r4
 800a5f6:	e7e0      	b.n	800a5ba <trunc+0x32>
 800a5f8:	000fffff 	.word	0x000fffff

0800a5fc <_init>:
 800a5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5fe:	bf00      	nop
 800a600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a602:	bc08      	pop	{r3}
 800a604:	469e      	mov	lr, r3
 800a606:	4770      	bx	lr

0800a608 <_fini>:
 800a608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a60a:	bf00      	nop
 800a60c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a60e:	bc08      	pop	{r3}
 800a610:	469e      	mov	lr, r3
 800a612:	4770      	bx	lr
