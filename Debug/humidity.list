
humidity.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009534  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  080096c4  080096c4  000196c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009788  08009788  0002010c  2**0
                  CONTENTS
  4 .ARM          00000008  08009788  08009788  00019788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009790  08009790  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009790  08009790  00019790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009794  08009794  00019794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  08009798  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000210c  2000010c  080098a4  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002218  080098a4  00022218  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a7f5  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000496c  00000000  00000000  0004a931  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002368  00000000  00000000  0004f2a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002140  00000000  00000000  00051608  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00006580  00000000  00000000  00053748  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001b38d  00000000  00000000  00059cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00108045  00000000  00000000  00075055  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017d09a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009b80  00000000  00000000  0017d118  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000010c 	.word	0x2000010c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080096ac 	.word	0x080096ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000110 	.word	0x20000110
 80001cc:	080096ac 	.word	0x080096ac

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_d2iz>:
 80005e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80005f0:	d215      	bcs.n	800061e <__aeabi_d2iz+0x36>
 80005f2:	d511      	bpl.n	8000618 <__aeabi_d2iz+0x30>
 80005f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80005f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80005fc:	d912      	bls.n	8000624 <__aeabi_d2iz+0x3c>
 80005fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000602:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000606:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800060a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800060e:	fa23 f002 	lsr.w	r0, r3, r2
 8000612:	bf18      	it	ne
 8000614:	4240      	negne	r0, r0
 8000616:	4770      	bx	lr
 8000618:	f04f 0000 	mov.w	r0, #0
 800061c:	4770      	bx	lr
 800061e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000622:	d105      	bne.n	8000630 <__aeabi_d2iz+0x48>
 8000624:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000628:	bf08      	it	eq
 800062a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800062e:	4770      	bx	lr
 8000630:	f04f 0000 	mov.w	r0, #0
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop

08000638 <__aeabi_uldivmod>:
 8000638:	b953      	cbnz	r3, 8000650 <__aeabi_uldivmod+0x18>
 800063a:	b94a      	cbnz	r2, 8000650 <__aeabi_uldivmod+0x18>
 800063c:	2900      	cmp	r1, #0
 800063e:	bf08      	it	eq
 8000640:	2800      	cmpeq	r0, #0
 8000642:	bf1c      	itt	ne
 8000644:	f04f 31ff 	movne.w	r1, #4294967295
 8000648:	f04f 30ff 	movne.w	r0, #4294967295
 800064c:	f000 b972 	b.w	8000934 <__aeabi_idiv0>
 8000650:	f1ad 0c08 	sub.w	ip, sp, #8
 8000654:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000658:	f000 f806 	bl	8000668 <__udivmoddi4>
 800065c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000660:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000664:	b004      	add	sp, #16
 8000666:	4770      	bx	lr

08000668 <__udivmoddi4>:
 8000668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800066c:	9e08      	ldr	r6, [sp, #32]
 800066e:	4604      	mov	r4, r0
 8000670:	4688      	mov	r8, r1
 8000672:	2b00      	cmp	r3, #0
 8000674:	d14b      	bne.n	800070e <__udivmoddi4+0xa6>
 8000676:	428a      	cmp	r2, r1
 8000678:	4615      	mov	r5, r2
 800067a:	d967      	bls.n	800074c <__udivmoddi4+0xe4>
 800067c:	fab2 f282 	clz	r2, r2
 8000680:	b14a      	cbz	r2, 8000696 <__udivmoddi4+0x2e>
 8000682:	f1c2 0720 	rsb	r7, r2, #32
 8000686:	fa01 f302 	lsl.w	r3, r1, r2
 800068a:	fa20 f707 	lsr.w	r7, r0, r7
 800068e:	4095      	lsls	r5, r2
 8000690:	ea47 0803 	orr.w	r8, r7, r3
 8000694:	4094      	lsls	r4, r2
 8000696:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800069a:	0c23      	lsrs	r3, r4, #16
 800069c:	fbb8 f7fe 	udiv	r7, r8, lr
 80006a0:	fa1f fc85 	uxth.w	ip, r5
 80006a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80006a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80006ac:	fb07 f10c 	mul.w	r1, r7, ip
 80006b0:	4299      	cmp	r1, r3
 80006b2:	d909      	bls.n	80006c8 <__udivmoddi4+0x60>
 80006b4:	18eb      	adds	r3, r5, r3
 80006b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80006ba:	f080 811b 	bcs.w	80008f4 <__udivmoddi4+0x28c>
 80006be:	4299      	cmp	r1, r3
 80006c0:	f240 8118 	bls.w	80008f4 <__udivmoddi4+0x28c>
 80006c4:	3f02      	subs	r7, #2
 80006c6:	442b      	add	r3, r5
 80006c8:	1a5b      	subs	r3, r3, r1
 80006ca:	b2a4      	uxth	r4, r4
 80006cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80006d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80006d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80006dc:	45a4      	cmp	ip, r4
 80006de:	d909      	bls.n	80006f4 <__udivmoddi4+0x8c>
 80006e0:	192c      	adds	r4, r5, r4
 80006e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80006e6:	f080 8107 	bcs.w	80008f8 <__udivmoddi4+0x290>
 80006ea:	45a4      	cmp	ip, r4
 80006ec:	f240 8104 	bls.w	80008f8 <__udivmoddi4+0x290>
 80006f0:	3802      	subs	r0, #2
 80006f2:	442c      	add	r4, r5
 80006f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80006f8:	eba4 040c 	sub.w	r4, r4, ip
 80006fc:	2700      	movs	r7, #0
 80006fe:	b11e      	cbz	r6, 8000708 <__udivmoddi4+0xa0>
 8000700:	40d4      	lsrs	r4, r2
 8000702:	2300      	movs	r3, #0
 8000704:	e9c6 4300 	strd	r4, r3, [r6]
 8000708:	4639      	mov	r1, r7
 800070a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800070e:	428b      	cmp	r3, r1
 8000710:	d909      	bls.n	8000726 <__udivmoddi4+0xbe>
 8000712:	2e00      	cmp	r6, #0
 8000714:	f000 80eb 	beq.w	80008ee <__udivmoddi4+0x286>
 8000718:	2700      	movs	r7, #0
 800071a:	e9c6 0100 	strd	r0, r1, [r6]
 800071e:	4638      	mov	r0, r7
 8000720:	4639      	mov	r1, r7
 8000722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000726:	fab3 f783 	clz	r7, r3
 800072a:	2f00      	cmp	r7, #0
 800072c:	d147      	bne.n	80007be <__udivmoddi4+0x156>
 800072e:	428b      	cmp	r3, r1
 8000730:	d302      	bcc.n	8000738 <__udivmoddi4+0xd0>
 8000732:	4282      	cmp	r2, r0
 8000734:	f200 80fa 	bhi.w	800092c <__udivmoddi4+0x2c4>
 8000738:	1a84      	subs	r4, r0, r2
 800073a:	eb61 0303 	sbc.w	r3, r1, r3
 800073e:	2001      	movs	r0, #1
 8000740:	4698      	mov	r8, r3
 8000742:	2e00      	cmp	r6, #0
 8000744:	d0e0      	beq.n	8000708 <__udivmoddi4+0xa0>
 8000746:	e9c6 4800 	strd	r4, r8, [r6]
 800074a:	e7dd      	b.n	8000708 <__udivmoddi4+0xa0>
 800074c:	b902      	cbnz	r2, 8000750 <__udivmoddi4+0xe8>
 800074e:	deff      	udf	#255	; 0xff
 8000750:	fab2 f282 	clz	r2, r2
 8000754:	2a00      	cmp	r2, #0
 8000756:	f040 808f 	bne.w	8000878 <__udivmoddi4+0x210>
 800075a:	1b49      	subs	r1, r1, r5
 800075c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000760:	fa1f f885 	uxth.w	r8, r5
 8000764:	2701      	movs	r7, #1
 8000766:	fbb1 fcfe 	udiv	ip, r1, lr
 800076a:	0c23      	lsrs	r3, r4, #16
 800076c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000770:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000774:	fb08 f10c 	mul.w	r1, r8, ip
 8000778:	4299      	cmp	r1, r3
 800077a:	d907      	bls.n	800078c <__udivmoddi4+0x124>
 800077c:	18eb      	adds	r3, r5, r3
 800077e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000782:	d202      	bcs.n	800078a <__udivmoddi4+0x122>
 8000784:	4299      	cmp	r1, r3
 8000786:	f200 80cd 	bhi.w	8000924 <__udivmoddi4+0x2bc>
 800078a:	4684      	mov	ip, r0
 800078c:	1a59      	subs	r1, r3, r1
 800078e:	b2a3      	uxth	r3, r4
 8000790:	fbb1 f0fe 	udiv	r0, r1, lr
 8000794:	fb0e 1410 	mls	r4, lr, r0, r1
 8000798:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800079c:	fb08 f800 	mul.w	r8, r8, r0
 80007a0:	45a0      	cmp	r8, r4
 80007a2:	d907      	bls.n	80007b4 <__udivmoddi4+0x14c>
 80007a4:	192c      	adds	r4, r5, r4
 80007a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80007aa:	d202      	bcs.n	80007b2 <__udivmoddi4+0x14a>
 80007ac:	45a0      	cmp	r8, r4
 80007ae:	f200 80b6 	bhi.w	800091e <__udivmoddi4+0x2b6>
 80007b2:	4618      	mov	r0, r3
 80007b4:	eba4 0408 	sub.w	r4, r4, r8
 80007b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80007bc:	e79f      	b.n	80006fe <__udivmoddi4+0x96>
 80007be:	f1c7 0c20 	rsb	ip, r7, #32
 80007c2:	40bb      	lsls	r3, r7
 80007c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80007c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80007cc:	fa01 f407 	lsl.w	r4, r1, r7
 80007d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80007d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80007d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80007dc:	4325      	orrs	r5, r4
 80007de:	fbb3 f9f8 	udiv	r9, r3, r8
 80007e2:	0c2c      	lsrs	r4, r5, #16
 80007e4:	fb08 3319 	mls	r3, r8, r9, r3
 80007e8:	fa1f fa8e 	uxth.w	sl, lr
 80007ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80007f0:	fb09 f40a 	mul.w	r4, r9, sl
 80007f4:	429c      	cmp	r4, r3
 80007f6:	fa02 f207 	lsl.w	r2, r2, r7
 80007fa:	fa00 f107 	lsl.w	r1, r0, r7
 80007fe:	d90b      	bls.n	8000818 <__udivmoddi4+0x1b0>
 8000800:	eb1e 0303 	adds.w	r3, lr, r3
 8000804:	f109 30ff 	add.w	r0, r9, #4294967295
 8000808:	f080 8087 	bcs.w	800091a <__udivmoddi4+0x2b2>
 800080c:	429c      	cmp	r4, r3
 800080e:	f240 8084 	bls.w	800091a <__udivmoddi4+0x2b2>
 8000812:	f1a9 0902 	sub.w	r9, r9, #2
 8000816:	4473      	add	r3, lr
 8000818:	1b1b      	subs	r3, r3, r4
 800081a:	b2ad      	uxth	r5, r5
 800081c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000820:	fb08 3310 	mls	r3, r8, r0, r3
 8000824:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000828:	fb00 fa0a 	mul.w	sl, r0, sl
 800082c:	45a2      	cmp	sl, r4
 800082e:	d908      	bls.n	8000842 <__udivmoddi4+0x1da>
 8000830:	eb1e 0404 	adds.w	r4, lr, r4
 8000834:	f100 33ff 	add.w	r3, r0, #4294967295
 8000838:	d26b      	bcs.n	8000912 <__udivmoddi4+0x2aa>
 800083a:	45a2      	cmp	sl, r4
 800083c:	d969      	bls.n	8000912 <__udivmoddi4+0x2aa>
 800083e:	3802      	subs	r0, #2
 8000840:	4474      	add	r4, lr
 8000842:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000846:	fba0 8902 	umull	r8, r9, r0, r2
 800084a:	eba4 040a 	sub.w	r4, r4, sl
 800084e:	454c      	cmp	r4, r9
 8000850:	46c2      	mov	sl, r8
 8000852:	464b      	mov	r3, r9
 8000854:	d354      	bcc.n	8000900 <__udivmoddi4+0x298>
 8000856:	d051      	beq.n	80008fc <__udivmoddi4+0x294>
 8000858:	2e00      	cmp	r6, #0
 800085a:	d069      	beq.n	8000930 <__udivmoddi4+0x2c8>
 800085c:	ebb1 050a 	subs.w	r5, r1, sl
 8000860:	eb64 0403 	sbc.w	r4, r4, r3
 8000864:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000868:	40fd      	lsrs	r5, r7
 800086a:	40fc      	lsrs	r4, r7
 800086c:	ea4c 0505 	orr.w	r5, ip, r5
 8000870:	e9c6 5400 	strd	r5, r4, [r6]
 8000874:	2700      	movs	r7, #0
 8000876:	e747      	b.n	8000708 <__udivmoddi4+0xa0>
 8000878:	f1c2 0320 	rsb	r3, r2, #32
 800087c:	fa20 f703 	lsr.w	r7, r0, r3
 8000880:	4095      	lsls	r5, r2
 8000882:	fa01 f002 	lsl.w	r0, r1, r2
 8000886:	fa21 f303 	lsr.w	r3, r1, r3
 800088a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800088e:	4338      	orrs	r0, r7
 8000890:	0c01      	lsrs	r1, r0, #16
 8000892:	fbb3 f7fe 	udiv	r7, r3, lr
 8000896:	fa1f f885 	uxth.w	r8, r5
 800089a:	fb0e 3317 	mls	r3, lr, r7, r3
 800089e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008a2:	fb07 f308 	mul.w	r3, r7, r8
 80008a6:	428b      	cmp	r3, r1
 80008a8:	fa04 f402 	lsl.w	r4, r4, r2
 80008ac:	d907      	bls.n	80008be <__udivmoddi4+0x256>
 80008ae:	1869      	adds	r1, r5, r1
 80008b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80008b4:	d22f      	bcs.n	8000916 <__udivmoddi4+0x2ae>
 80008b6:	428b      	cmp	r3, r1
 80008b8:	d92d      	bls.n	8000916 <__udivmoddi4+0x2ae>
 80008ba:	3f02      	subs	r7, #2
 80008bc:	4429      	add	r1, r5
 80008be:	1acb      	subs	r3, r1, r3
 80008c0:	b281      	uxth	r1, r0
 80008c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80008c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80008ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008ce:	fb00 f308 	mul.w	r3, r0, r8
 80008d2:	428b      	cmp	r3, r1
 80008d4:	d907      	bls.n	80008e6 <__udivmoddi4+0x27e>
 80008d6:	1869      	adds	r1, r5, r1
 80008d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80008dc:	d217      	bcs.n	800090e <__udivmoddi4+0x2a6>
 80008de:	428b      	cmp	r3, r1
 80008e0:	d915      	bls.n	800090e <__udivmoddi4+0x2a6>
 80008e2:	3802      	subs	r0, #2
 80008e4:	4429      	add	r1, r5
 80008e6:	1ac9      	subs	r1, r1, r3
 80008e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80008ec:	e73b      	b.n	8000766 <__udivmoddi4+0xfe>
 80008ee:	4637      	mov	r7, r6
 80008f0:	4630      	mov	r0, r6
 80008f2:	e709      	b.n	8000708 <__udivmoddi4+0xa0>
 80008f4:	4607      	mov	r7, r0
 80008f6:	e6e7      	b.n	80006c8 <__udivmoddi4+0x60>
 80008f8:	4618      	mov	r0, r3
 80008fa:	e6fb      	b.n	80006f4 <__udivmoddi4+0x8c>
 80008fc:	4541      	cmp	r1, r8
 80008fe:	d2ab      	bcs.n	8000858 <__udivmoddi4+0x1f0>
 8000900:	ebb8 0a02 	subs.w	sl, r8, r2
 8000904:	eb69 020e 	sbc.w	r2, r9, lr
 8000908:	3801      	subs	r0, #1
 800090a:	4613      	mov	r3, r2
 800090c:	e7a4      	b.n	8000858 <__udivmoddi4+0x1f0>
 800090e:	4660      	mov	r0, ip
 8000910:	e7e9      	b.n	80008e6 <__udivmoddi4+0x27e>
 8000912:	4618      	mov	r0, r3
 8000914:	e795      	b.n	8000842 <__udivmoddi4+0x1da>
 8000916:	4667      	mov	r7, ip
 8000918:	e7d1      	b.n	80008be <__udivmoddi4+0x256>
 800091a:	4681      	mov	r9, r0
 800091c:	e77c      	b.n	8000818 <__udivmoddi4+0x1b0>
 800091e:	3802      	subs	r0, #2
 8000920:	442c      	add	r4, r5
 8000922:	e747      	b.n	80007b4 <__udivmoddi4+0x14c>
 8000924:	f1ac 0c02 	sub.w	ip, ip, #2
 8000928:	442b      	add	r3, r5
 800092a:	e72f      	b.n	800078c <__udivmoddi4+0x124>
 800092c:	4638      	mov	r0, r7
 800092e:	e708      	b.n	8000742 <__udivmoddi4+0xda>
 8000930:	4637      	mov	r7, r6
 8000932:	e6e9      	b.n	8000708 <__udivmoddi4+0xa0>

08000934 <__aeabi_idiv0>:
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop

08000938 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b092      	sub	sp, #72	; 0x48
 800093c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800093e:	f001 fa65 	bl	8001e0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000942:	f000 f86d 	bl	8000a20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000946:	f000 fa79 	bl	8000e3c <MX_GPIO_Init>
  MX_DFSDM1_Init();
 800094a:	f000 f90d 	bl	8000b68 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 800094e:	f000 f943 	bl	8000bd8 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000952:	f000 f981 	bl	8000c58 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000956:	f000 f9a5 	bl	8000ca4 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800095a:	f000 f9e1 	bl	8000d20 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800095e:	f000 fa0f 	bl	8000d80 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000962:	f000 fa3d 	bl	8000de0 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart1,msg1,sizeof(msg1),1000);
 8000966:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800096a:	222d      	movs	r2, #45	; 0x2d
 800096c:	4922      	ldr	r1, [pc, #136]	; (80009f8 <main+0xc0>)
 800096e:	4823      	ldr	r0, [pc, #140]	; (80009fc <main+0xc4>)
 8000970:	f004 fd86 	bl	8005480 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,msg2,sizeof(msg2),1000);
 8000974:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000978:	222c      	movs	r2, #44	; 0x2c
 800097a:	4921      	ldr	r1, [pc, #132]	; (8000a00 <main+0xc8>)
 800097c:	481f      	ldr	r0, [pc, #124]	; (80009fc <main+0xc4>)
 800097e:	f004 fd7f 	bl	8005480 <HAL_UART_Transmit>
  BSP_HSENSOR_Init();
 8000982:	f001 f937 	bl	8001bf4 <BSP_HSENSOR_Init>
  HAL_UART_Transmit(&huart1,msg3,sizeof(msg3),1000);
 8000986:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800098a:	222e      	movs	r2, #46	; 0x2e
 800098c:	491d      	ldr	r1, [pc, #116]	; (8000a04 <main+0xcc>)
 800098e:	481b      	ldr	r0, [pc, #108]	; (80009fc <main+0xc4>)
 8000990:	f004 fd76 	bl	8005480 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  osKernelInitialize();
 8000994:	f005 fcfc 	bl	8006390 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  const osThreadAttr_t defaultTask_attributes = {
 8000998:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800099c:	2224      	movs	r2, #36	; 0x24
 800099e:	2100      	movs	r1, #0
 80009a0:	4618      	mov	r0, r3
 80009a2:	f008 fa30 	bl	8008e06 <memset>
 80009a6:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <main+0xd0>)
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
 80009aa:	2380      	movs	r3, #128	; 0x80
 80009ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80009ae:	2318      	movs	r3, #24
 80009b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    .name = "defaultTask",
    .priority = (osPriority_t) osPriorityNormal,
    .stack_size = 128
  };
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80009b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b6:	461a      	mov	r2, r3
 80009b8:	2100      	movs	r1, #0
 80009ba:	4814      	ldr	r0, [pc, #80]	; (8000a0c <main+0xd4>)
 80009bc:	f005 fd50 	bl	8006460 <osThreadNew>
 80009c0:	4602      	mov	r2, r0
 80009c2:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <main+0xd8>)
 80009c4:	601a      	str	r2, [r3, #0]

  /* definition and creation of humidity */
  const osThreadAttr_t humidity_attributes = {
 80009c6:	463b      	mov	r3, r7
 80009c8:	2224      	movs	r2, #36	; 0x24
 80009ca:	2100      	movs	r1, #0
 80009cc:	4618      	mov	r0, r3
 80009ce:	f008 fa1a 	bl	8008e06 <memset>
 80009d2:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <main+0xdc>)
 80009d4:	603b      	str	r3, [r7, #0]
 80009d6:	2380      	movs	r3, #128	; 0x80
 80009d8:	617b      	str	r3, [r7, #20]
 80009da:	2310      	movs	r3, #16
 80009dc:	61bb      	str	r3, [r7, #24]
    .name = "humidity",
    .priority = (osPriority_t) osPriorityBelowNormal,
    .stack_size = 128
  };
  humidityHandle = osThreadNew(StartTask02, NULL, &humidity_attributes);
 80009de:	463b      	mov	r3, r7
 80009e0:	461a      	mov	r2, r3
 80009e2:	2100      	movs	r1, #0
 80009e4:	480c      	ldr	r0, [pc, #48]	; (8000a18 <main+0xe0>)
 80009e6:	f005 fd3b 	bl	8006460 <osThreadNew>
 80009ea:	4602      	mov	r2, r0
 80009ec:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <main+0xe4>)
 80009ee:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80009f0:	f005 fd02 	bl	80063f8 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <main+0xbc>
 80009f6:	bf00      	nop
 80009f8:	20000000 	.word	0x20000000
 80009fc:	20001ffc 	.word	0x20001ffc
 8000a00:	20000030 	.word	0x20000030
 8000a04:	2000005c 	.word	0x2000005c
 8000a08:	080096c4 	.word	0x080096c4
 8000a0c:	0800119d 	.word	0x0800119d
 8000a10:	20001ac0 	.word	0x20001ac0
 8000a14:	080096d0 	.word	0x080096d0
 8000a18:	080011ad 	.word	0x080011ad
 8000a1c:	2000207c 	.word	0x2000207c

08000a20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b0b8      	sub	sp, #224	; 0xe0
 8000a24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a26:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a2a:	2244      	movs	r2, #68	; 0x44
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f008 f9e9 	bl	8008e06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a34:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a44:	463b      	mov	r3, r7
 8000a46:	2288      	movs	r2, #136	; 0x88
 8000a48:	2100      	movs	r1, #0
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f008 f9db 	bl	8008e06 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000a50:	f002 fdec 	bl	800362c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000a54:	4b42      	ldr	r3, [pc, #264]	; (8000b60 <SystemClock_Config+0x140>)
 8000a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000a5a:	4a41      	ldr	r2, [pc, #260]	; (8000b60 <SystemClock_Config+0x140>)
 8000a5c:	f023 0318 	bic.w	r3, r3, #24
 8000a60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000a64:	2314      	movs	r3, #20
 8000a66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a70:	2301      	movs	r3, #1
 8000a72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000a7c:	2360      	movs	r3, #96	; 0x60
 8000a7e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a82:	2302      	movs	r3, #2
 8000a84:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000a94:	2328      	movs	r3, #40	; 0x28
 8000a96:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a9a:	2307      	movs	r3, #7
 8000a9c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f002 ff07 	bl	80038c4 <HAL_RCC_OscConfig>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000abc:	f000 fbda 	bl	8001274 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac0:	230f      	movs	r3, #15
 8000ac2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000acc:	2300      	movs	r3, #0
 8000ace:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ade:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000ae2:	2104      	movs	r1, #4
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f003 fa9d 	bl	8004024 <HAL_RCC_ClockConfig>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000af0:	f000 fbc0 	bl	8001274 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8000af4:	4b1b      	ldr	r3, [pc, #108]	; (8000b64 <SystemClock_Config+0x144>)
 8000af6:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_DFSDM1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000af8:	2300      	movs	r3, #0
 8000afa:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000afc:	2300      	movs	r3, #0
 8000afe:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000b00:	2300      	movs	r3, #0
 8000b02:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000b04:	2300      	movs	r3, #0
 8000b06:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000b0a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000b0e:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000b10:	2301      	movs	r3, #1
 8000b12:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000b14:	2301      	movs	r3, #1
 8000b16:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000b18:	2318      	movs	r3, #24
 8000b1a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000b1c:	2307      	movs	r3, #7
 8000b1e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000b20:	2302      	movs	r3, #2
 8000b22:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000b24:	2302      	movs	r3, #2
 8000b26:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000b28:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000b2c:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b2e:	463b      	mov	r3, r7
 8000b30:	4618      	mov	r0, r3
 8000b32:	f003 fcad 	bl	8004490 <HAL_RCCEx_PeriphCLKConfig>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <SystemClock_Config+0x120>
  {
    Error_Handler();
 8000b3c:	f000 fb9a 	bl	8001274 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b40:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b44:	f002 fd90 	bl	8003668 <HAL_PWREx_ControlVoltageScaling>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <SystemClock_Config+0x132>
  {
    Error_Handler();
 8000b4e:	f000 fb91 	bl	8001274 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000b52:	f003 ff83 	bl	8004a5c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000b56:	bf00      	nop
 8000b58:	37e0      	adds	r7, #224	; 0xe0
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40021000 	.word	0x40021000
 8000b64:	00012085 	.word	0x00012085

08000b68 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000b6c:	4b18      	ldr	r3, [pc, #96]	; (8000bd0 <MX_DFSDM1_Init+0x68>)
 8000b6e:	4a19      	ldr	r2, [pc, #100]	; (8000bd4 <MX_DFSDM1_Init+0x6c>)
 8000b70:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000b72:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <MX_DFSDM1_Init+0x68>)
 8000b74:	2201      	movs	r2, #1
 8000b76:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000b78:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <MX_DFSDM1_Init+0x68>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000b7e:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <MX_DFSDM1_Init+0x68>)
 8000b80:	2202      	movs	r2, #2
 8000b82:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000b84:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <MX_DFSDM1_Init+0x68>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000b8a:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <MX_DFSDM1_Init+0x68>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000b90:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <MX_DFSDM1_Init+0x68>)
 8000b92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b96:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000b98:	4b0d      	ldr	r3, [pc, #52]	; (8000bd0 <MX_DFSDM1_Init+0x68>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000b9e:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <MX_DFSDM1_Init+0x68>)
 8000ba0:	2204      	movs	r2, #4
 8000ba2:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000ba4:	4b0a      	ldr	r3, [pc, #40]	; (8000bd0 <MX_DFSDM1_Init+0x68>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000baa:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <MX_DFSDM1_Init+0x68>)
 8000bac:	2201      	movs	r2, #1
 8000bae:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000bb0:	4b07      	ldr	r3, [pc, #28]	; (8000bd0 <MX_DFSDM1_Init+0x68>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000bb6:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <MX_DFSDM1_Init+0x68>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000bbc:	4804      	ldr	r0, [pc, #16]	; (8000bd0 <MX_DFSDM1_Init+0x68>)
 8000bbe:	f001 fa5f 	bl	8002080 <HAL_DFSDM_ChannelInit>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000bc8:	f000 fb54 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20001a88 	.word	0x20001a88
 8000bd4:	40016020 	.word	0x40016020

08000bd8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000bdc:	4b1b      	ldr	r3, [pc, #108]	; (8000c4c <MX_I2C2_Init+0x74>)
 8000bde:	4a1c      	ldr	r2, [pc, #112]	; (8000c50 <MX_I2C2_Init+0x78>)
 8000be0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8000be2:	4b1a      	ldr	r3, [pc, #104]	; (8000c4c <MX_I2C2_Init+0x74>)
 8000be4:	4a1b      	ldr	r2, [pc, #108]	; (8000c54 <MX_I2C2_Init+0x7c>)
 8000be6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000be8:	4b18      	ldr	r3, [pc, #96]	; (8000c4c <MX_I2C2_Init+0x74>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bee:	4b17      	ldr	r3, [pc, #92]	; (8000c4c <MX_I2C2_Init+0x74>)
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bf4:	4b15      	ldr	r3, [pc, #84]	; (8000c4c <MX_I2C2_Init+0x74>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000bfa:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <MX_I2C2_Init+0x74>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c00:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <MX_I2C2_Init+0x74>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c06:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <MX_I2C2_Init+0x74>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c0c:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <MX_I2C2_Init+0x74>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c12:	480e      	ldr	r0, [pc, #56]	; (8000c4c <MX_I2C2_Init+0x74>)
 8000c14:	f001 fe21 	bl	800285a <HAL_I2C_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000c1e:	f000 fb29 	bl	8001274 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c22:	2100      	movs	r1, #0
 8000c24:	4809      	ldr	r0, [pc, #36]	; (8000c4c <MX_I2C2_Init+0x74>)
 8000c26:	f002 fb21 	bl	800326c <HAL_I2CEx_ConfigAnalogFilter>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000c30:	f000 fb20 	bl	8001274 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000c34:	2100      	movs	r1, #0
 8000c36:	4805      	ldr	r0, [pc, #20]	; (8000c4c <MX_I2C2_Init+0x74>)
 8000c38:	f002 fb63 	bl	8003302 <HAL_I2CEx_ConfigDigitalFilter>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000c42:	f000 fb17 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20001f4c 	.word	0x20001f4c
 8000c50:	40005800 	.word	0x40005800
 8000c54:	10909cec 	.word	0x10909cec

08000c58 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000c5c:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <MX_QUADSPI_Init+0x44>)
 8000c5e:	4a10      	ldr	r2, [pc, #64]	; (8000ca0 <MX_QUADSPI_Init+0x48>)
 8000c60:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000c62:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <MX_QUADSPI_Init+0x44>)
 8000c64:	22ff      	movs	r2, #255	; 0xff
 8000c66:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000c68:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <MX_QUADSPI_Init+0x44>)
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000c6e:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <MX_QUADSPI_Init+0x44>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000c74:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <MX_QUADSPI_Init+0x44>)
 8000c76:	2201      	movs	r2, #1
 8000c78:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000c7a:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <MX_QUADSPI_Init+0x44>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000c80:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <MX_QUADSPI_Init+0x44>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000c86:	4805      	ldr	r0, [pc, #20]	; (8000c9c <MX_QUADSPI_Init+0x44>)
 8000c88:	f002 fd54 	bl	8003734 <HAL_QSPI_Init>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000c92:	f000 faef 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20002080 	.word	0x20002080
 8000ca0:	a0001000 	.word	0xa0001000

08000ca4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000ca8:	4b1b      	ldr	r3, [pc, #108]	; (8000d18 <MX_SPI3_Init+0x74>)
 8000caa:	4a1c      	ldr	r2, [pc, #112]	; (8000d1c <MX_SPI3_Init+0x78>)
 8000cac:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000cae:	4b1a      	ldr	r3, [pc, #104]	; (8000d18 <MX_SPI3_Init+0x74>)
 8000cb0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cb4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000cb6:	4b18      	ldr	r3, [pc, #96]	; (8000d18 <MX_SPI3_Init+0x74>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000cbc:	4b16      	ldr	r3, [pc, #88]	; (8000d18 <MX_SPI3_Init+0x74>)
 8000cbe:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000cc2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cc4:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <MX_SPI3_Init+0x74>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cca:	4b13      	ldr	r3, [pc, #76]	; (8000d18 <MX_SPI3_Init+0x74>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000cd0:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <MX_SPI3_Init+0x74>)
 8000cd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cd6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cd8:	4b0f      	ldr	r3, [pc, #60]	; (8000d18 <MX_SPI3_Init+0x74>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cde:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <MX_SPI3_Init+0x74>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ce4:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <MX_SPI3_Init+0x74>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cea:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <MX_SPI3_Init+0x74>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000cf0:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <MX_SPI3_Init+0x74>)
 8000cf2:	2207      	movs	r2, #7
 8000cf4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000cf6:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <MX_SPI3_Init+0x74>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cfc:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <MX_SPI3_Init+0x74>)
 8000cfe:	2208      	movs	r2, #8
 8000d00:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000d02:	4805      	ldr	r0, [pc, #20]	; (8000d18 <MX_SPI3_Init+0x74>)
 8000d04:	f004 f884 	bl	8004e10 <HAL_SPI_Init>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000d0e:	f000 fab1 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20001f98 	.word	0x20001f98
 8000d1c:	40003c00 	.word	0x40003c00

08000d20 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d24:	4b14      	ldr	r3, [pc, #80]	; (8000d78 <MX_USART1_UART_Init+0x58>)
 8000d26:	4a15      	ldr	r2, [pc, #84]	; (8000d7c <MX_USART1_UART_Init+0x5c>)
 8000d28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d2a:	4b13      	ldr	r3, [pc, #76]	; (8000d78 <MX_USART1_UART_Init+0x58>)
 8000d2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d32:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <MX_USART1_UART_Init+0x58>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d38:	4b0f      	ldr	r3, [pc, #60]	; (8000d78 <MX_USART1_UART_Init+0x58>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <MX_USART1_UART_Init+0x58>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d44:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <MX_USART1_UART_Init+0x58>)
 8000d46:	220c      	movs	r2, #12
 8000d48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d4a:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <MX_USART1_UART_Init+0x58>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d50:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <MX_USART1_UART_Init+0x58>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d56:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <MX_USART1_UART_Init+0x58>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <MX_USART1_UART_Init+0x58>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d62:	4805      	ldr	r0, [pc, #20]	; (8000d78 <MX_USART1_UART_Init+0x58>)
 8000d64:	f004 fb3e 	bl	80053e4 <HAL_UART_Init>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000d6e:	f000 fa81 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20001ffc 	.word	0x20001ffc
 8000d7c:	40013800 	.word	0x40013800

08000d80 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d84:	4b14      	ldr	r3, [pc, #80]	; (8000dd8 <MX_USART3_UART_Init+0x58>)
 8000d86:	4a15      	ldr	r2, [pc, #84]	; (8000ddc <MX_USART3_UART_Init+0x5c>)
 8000d88:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d8a:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <MX_USART3_UART_Init+0x58>)
 8000d8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d90:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d92:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <MX_USART3_UART_Init+0x58>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d98:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <MX_USART3_UART_Init+0x58>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <MX_USART3_UART_Init+0x58>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000da4:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <MX_USART3_UART_Init+0x58>)
 8000da6:	220c      	movs	r2, #12
 8000da8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000daa:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <MX_USART3_UART_Init+0x58>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000db0:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <MX_USART3_UART_Init+0x58>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000db6:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <MX_USART3_UART_Init+0x58>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <MX_USART3_UART_Init+0x58>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000dc2:	4805      	ldr	r0, [pc, #20]	; (8000dd8 <MX_USART3_UART_Init+0x58>)
 8000dc4:	f004 fb0e 	bl	80053e4 <HAL_UART_Init>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000dce:	f000 fa51 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20001ac4 	.word	0x20001ac4
 8000ddc:	40004800 	.word	0x40004800

08000de0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000de4:	4b14      	ldr	r3, [pc, #80]	; (8000e38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000de6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000dea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000dec:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dee:	2206      	movs	r2, #6
 8000df0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000df2:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000df4:	2202      	movs	r2, #2
 8000df6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000df8:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dfa:	2202      	movs	r2, #2
 8000dfc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000e04:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000e0a:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000e10:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000e16:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000e1c:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000e22:	4805      	ldr	r0, [pc, #20]	; (8000e38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e24:	f002 fab9 	bl	800339a <HAL_PCD_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000e2e:	f000 fa21 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20001b44 	.word	0x20001b44

08000e3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08a      	sub	sp, #40	; 0x28
 8000e40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e42:	f107 0314 	add.w	r3, r7, #20
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]
 8000e4c:	609a      	str	r2, [r3, #8]
 8000e4e:	60da      	str	r2, [r3, #12]
 8000e50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e52:	4bba      	ldr	r3, [pc, #744]	; (800113c <MX_GPIO_Init+0x300>)
 8000e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e56:	4ab9      	ldr	r2, [pc, #740]	; (800113c <MX_GPIO_Init+0x300>)
 8000e58:	f043 0310 	orr.w	r3, r3, #16
 8000e5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e5e:	4bb7      	ldr	r3, [pc, #732]	; (800113c <MX_GPIO_Init+0x300>)
 8000e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e62:	f003 0310 	and.w	r3, r3, #16
 8000e66:	613b      	str	r3, [r7, #16]
 8000e68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e6a:	4bb4      	ldr	r3, [pc, #720]	; (800113c <MX_GPIO_Init+0x300>)
 8000e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6e:	4ab3      	ldr	r2, [pc, #716]	; (800113c <MX_GPIO_Init+0x300>)
 8000e70:	f043 0304 	orr.w	r3, r3, #4
 8000e74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e76:	4bb1      	ldr	r3, [pc, #708]	; (800113c <MX_GPIO_Init+0x300>)
 8000e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7a:	f003 0304 	and.w	r3, r3, #4
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e82:	4bae      	ldr	r3, [pc, #696]	; (800113c <MX_GPIO_Init+0x300>)
 8000e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e86:	4aad      	ldr	r2, [pc, #692]	; (800113c <MX_GPIO_Init+0x300>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e8e:	4bab      	ldr	r3, [pc, #684]	; (800113c <MX_GPIO_Init+0x300>)
 8000e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	60bb      	str	r3, [r7, #8]
 8000e98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9a:	4ba8      	ldr	r3, [pc, #672]	; (800113c <MX_GPIO_Init+0x300>)
 8000e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9e:	4aa7      	ldr	r2, [pc, #668]	; (800113c <MX_GPIO_Init+0x300>)
 8000ea0:	f043 0302 	orr.w	r3, r3, #2
 8000ea4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ea6:	4ba5      	ldr	r3, [pc, #660]	; (800113c <MX_GPIO_Init+0x300>)
 8000ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eaa:	f003 0302 	and.w	r3, r3, #2
 8000eae:	607b      	str	r3, [r7, #4]
 8000eb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eb2:	4ba2      	ldr	r3, [pc, #648]	; (800113c <MX_GPIO_Init+0x300>)
 8000eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb6:	4aa1      	ldr	r2, [pc, #644]	; (800113c <MX_GPIO_Init+0x300>)
 8000eb8:	f043 0308 	orr.w	r3, r3, #8
 8000ebc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ebe:	4b9f      	ldr	r3, [pc, #636]	; (800113c <MX_GPIO_Init+0x300>)
 8000ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec2:	f003 0308 	and.w	r3, r3, #8
 8000ec6:	603b      	str	r3, [r7, #0]
 8000ec8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000ed0:	489b      	ldr	r0, [pc, #620]	; (8001140 <MX_GPIO_Init+0x304>)
 8000ed2:	f001 fc87 	bl	80027e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f248 1104 	movw	r1, #33028	; 0x8104
 8000edc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee0:	f001 fc80 	bl	80027e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000eea:	4896      	ldr	r0, [pc, #600]	; (8001144 <MX_GPIO_Init+0x308>)
 8000eec:	f001 fc7a 	bl	80027e4 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f241 0181 	movw	r1, #4225	; 0x1081
 8000ef6:	4894      	ldr	r0, [pc, #592]	; (8001148 <MX_GPIO_Init+0x30c>)
 8000ef8:	f001 fc74 	bl	80027e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000efc:	2201      	movs	r2, #1
 8000efe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f02:	4891      	ldr	r0, [pc, #580]	; (8001148 <MX_GPIO_Init+0x30c>)
 8000f04:	f001 fc6e 	bl	80027e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000f0e:	488f      	ldr	r0, [pc, #572]	; (800114c <MX_GPIO_Init+0x310>)
 8000f10:	f001 fc68 	bl	80027e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000f14:	2201      	movs	r2, #1
 8000f16:	2120      	movs	r1, #32
 8000f18:	488a      	ldr	r0, [pc, #552]	; (8001144 <MX_GPIO_Init+0x308>)
 8000f1a:	f001 fc63 	bl	80027e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000f1e:	2201      	movs	r2, #1
 8000f20:	2101      	movs	r1, #1
 8000f22:	4887      	ldr	r0, [pc, #540]	; (8001140 <MX_GPIO_Init+0x304>)
 8000f24:	f001 fc5e 	bl	80027e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000f28:	f240 1315 	movw	r3, #277	; 0x115
 8000f2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f36:	2300      	movs	r3, #0
 8000f38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f3a:	f107 0314 	add.w	r3, r7, #20
 8000f3e:	4619      	mov	r1, r3
 8000f40:	487f      	ldr	r0, [pc, #508]	; (8001140 <MX_GPIO_Init+0x304>)
 8000f42:	f001 f9b3 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000f46:	236a      	movs	r3, #106	; 0x6a
 8000f48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f4a:	4b81      	ldr	r3, [pc, #516]	; (8001150 <MX_GPIO_Init+0x314>)
 8000f4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	4619      	mov	r1, r3
 8000f58:	4879      	ldr	r0, [pc, #484]	; (8001140 <MX_GPIO_Init+0x304>)
 8000f5a:	f001 f9a7 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000f5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f64:	4b7b      	ldr	r3, [pc, #492]	; (8001154 <MX_GPIO_Init+0x318>)
 8000f66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	4619      	mov	r1, r3
 8000f72:	4876      	ldr	r0, [pc, #472]	; (800114c <MX_GPIO_Init+0x310>)
 8000f74:	f001 f99a 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin 
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin 
 8000f78:	233f      	movs	r3, #63	; 0x3f
 8000f7a:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f7c:	230b      	movs	r3, #11
 8000f7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f84:	f107 0314 	add.w	r3, r7, #20
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4870      	ldr	r0, [pc, #448]	; (800114c <MX_GPIO_Init+0x310>)
 8000f8c:	f001 f98e 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000f90:	2303      	movs	r3, #3
 8000f92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f94:	2302      	movs	r3, #2
 8000f96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000fa0:	2308      	movs	r3, #8
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	4619      	mov	r1, r3
 8000faa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fae:	f001 f97d 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000fb2:	f248 1304 	movw	r3, #33028	; 0x8104
 8000fb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	4619      	mov	r1, r3
 8000fca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fce:	f001 f96d 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000fd2:	2308      	movs	r3, #8
 8000fd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000fe6:	f107 0314 	add.w	r3, r7, #20
 8000fea:	4619      	mov	r1, r3
 8000fec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ff0:	f001 f95c 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000ff4:	2310      	movs	r3, #16
 8000ff6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ff8:	230b      	movs	r3, #11
 8000ffa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	4619      	mov	r1, r3
 8001006:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800100a:	f001 f94f 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 800100e:	23e0      	movs	r3, #224	; 0xe0
 8001010:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001012:	2302      	movs	r3, #2
 8001014:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101a:	2303      	movs	r3, #3
 800101c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800101e:	2305      	movs	r3, #5
 8001020:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001022:	f107 0314 	add.w	r3, r7, #20
 8001026:	4619      	mov	r1, r3
 8001028:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800102c:	f001 f93e 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001030:	2301      	movs	r3, #1
 8001032:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001034:	4b46      	ldr	r3, [pc, #280]	; (8001150 <MX_GPIO_Init+0x314>)
 8001036:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	4619      	mov	r1, r3
 8001042:	4840      	ldr	r0, [pc, #256]	; (8001144 <MX_GPIO_Init+0x308>)
 8001044:	f001 f932 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001048:	2302      	movs	r3, #2
 800104a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800104c:	230b      	movs	r3, #11
 800104e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	4619      	mov	r1, r3
 800105a:	483a      	ldr	r0, [pc, #232]	; (8001144 <MX_GPIO_Init+0x308>)
 800105c:	f001 f926 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin 
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 8001060:	f24f 0334 	movw	r3, #61492	; 0xf034
 8001064:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001066:	2301      	movs	r3, #1
 8001068:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106e:	2300      	movs	r3, #0
 8001070:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001072:	f107 0314 	add.w	r3, r7, #20
 8001076:	4619      	mov	r1, r3
 8001078:	4832      	ldr	r0, [pc, #200]	; (8001144 <MX_GPIO_Init+0x308>)
 800107a:	f001 f917 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin 
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin 
 800107e:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8001082:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001084:	4b32      	ldr	r3, [pc, #200]	; (8001150 <MX_GPIO_Init+0x314>)
 8001086:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	4619      	mov	r1, r3
 8001092:	482d      	ldr	r0, [pc, #180]	; (8001148 <MX_GPIO_Init+0x30c>)
 8001094:	f001 f90a 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001098:	f243 0381 	movw	r3, #12417	; 0x3081
 800109c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109e:	2301      	movs	r3, #1
 80010a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a6:	2300      	movs	r3, #0
 80010a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010aa:	f107 0314 	add.w	r3, r7, #20
 80010ae:	4619      	mov	r1, r3
 80010b0:	4825      	ldr	r0, [pc, #148]	; (8001148 <MX_GPIO_Init+0x30c>)
 80010b2:	f001 f8fb 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80010b6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80010ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010bc:	2301      	movs	r3, #1
 80010be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c4:	2300      	movs	r3, #0
 80010c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	4619      	mov	r1, r3
 80010ce:	481f      	ldr	r0, [pc, #124]	; (800114c <MX_GPIO_Init+0x310>)
 80010d0:	f001 f8ec 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80010d4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80010d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010da:	4b1d      	ldr	r3, [pc, #116]	; (8001150 <MX_GPIO_Init+0x314>)
 80010dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010e2:	f107 0314 	add.w	r3, r7, #20
 80010e6:	4619      	mov	r1, r3
 80010e8:	4818      	ldr	r0, [pc, #96]	; (800114c <MX_GPIO_Init+0x310>)
 80010ea:	f001 f8df 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 80010ee:	2302      	movs	r3, #2
 80010f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f2:	2302      	movs	r3, #2
 80010f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fa:	2303      	movs	r3, #3
 80010fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010fe:	2305      	movs	r3, #5
 8001100:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	4619      	mov	r1, r3
 8001108:	480f      	ldr	r0, [pc, #60]	; (8001148 <MX_GPIO_Init+0x30c>)
 800110a:	f001 f8cf 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800110e:	2378      	movs	r3, #120	; 0x78
 8001110:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001112:	2302      	movs	r3, #2
 8001114:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111a:	2303      	movs	r3, #3
 800111c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800111e:	2307      	movs	r3, #7
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001122:	f107 0314 	add.w	r3, r7, #20
 8001126:	4619      	mov	r1, r3
 8001128:	4807      	ldr	r0, [pc, #28]	; (8001148 <MX_GPIO_Init+0x30c>)
 800112a:	f001 f8bf 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 800112e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001132:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001134:	2312      	movs	r3, #18
 8001136:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001138:	2301      	movs	r3, #1
 800113a:	e00d      	b.n	8001158 <MX_GPIO_Init+0x31c>
 800113c:	40021000 	.word	0x40021000
 8001140:	48001000 	.word	0x48001000
 8001144:	48000400 	.word	0x48000400
 8001148:	48000c00 	.word	0x48000c00
 800114c:	48000800 	.word	0x48000800
 8001150:	10110000 	.word	0x10110000
 8001154:	10210000 	.word	0x10210000
 8001158:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115a:	2303      	movs	r3, #3
 800115c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800115e:	2304      	movs	r3, #4
 8001160:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001162:	f107 0314 	add.w	r3, r7, #20
 8001166:	4619      	mov	r1, r3
 8001168:	480b      	ldr	r0, [pc, #44]	; (8001198 <MX_GPIO_Init+0x35c>)
 800116a:	f001 f89f 	bl	80022ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800116e:	2200      	movs	r2, #0
 8001170:	2105      	movs	r1, #5
 8001172:	2017      	movs	r0, #23
 8001174:	f000 ff5a 	bl	800202c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001178:	2017      	movs	r0, #23
 800117a:	f000 ff73 	bl	8002064 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800117e:	2200      	movs	r2, #0
 8001180:	2105      	movs	r1, #5
 8001182:	2028      	movs	r0, #40	; 0x28
 8001184:	f000 ff52 	bl	800202c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001188:	2028      	movs	r0, #40	; 0x28
 800118a:	f000 ff6b 	bl	8002064 <HAL_NVIC_EnableIRQ>

}
 800118e:	bf00      	nop
 8001190:	3728      	adds	r7, #40	; 0x28
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	48000400 	.word	0x48000400

0800119c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80011a4:	2001      	movs	r0, #1
 80011a6:	f005 fa05 	bl	80065b4 <osDelay>
 80011aa:	e7fb      	b.n	80011a4 <StartDefaultTask+0x8>

080011ac <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80011ac:	b590      	push	{r4, r7, lr}
 80011ae:	b089      	sub	sp, #36	; 0x24
 80011b0:	af02      	add	r7, sp, #8
 80011b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  hum_value = BSP_HSENSOR_ReadHumidity();
 80011b4:	f000 fd3e 	bl	8001c34 <BSP_HSENSOR_ReadHumidity>
 80011b8:	eef0 7a40 	vmov.f32	s15, s0
 80011bc:	4b1f      	ldr	r3, [pc, #124]	; (800123c <StartTask02+0x90>)
 80011be:	edc3 7a00 	vstr	s15, [r3]
	  int tmpInt1 = hum_value;
 80011c2:	4b1e      	ldr	r3, [pc, #120]	; (800123c <StartTask02+0x90>)
 80011c4:	edd3 7a00 	vldr	s15, [r3]
 80011c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011cc:	ee17 3a90 	vmov	r3, s15
 80011d0:	617b      	str	r3, [r7, #20]
	  float tmpFrac = hum_value - tmpInt1;
 80011d2:	4b1a      	ldr	r3, [pc, #104]	; (800123c <StartTask02+0x90>)
 80011d4:	ed93 7a00 	vldr	s14, [r3]
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	ee07 3a90 	vmov	s15, r3
 80011de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011e6:	edc7 7a04 	vstr	s15, [r7, #16]
	  int tmpInt2 = trunc(tmpFrac * 100);
 80011ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80011ee:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001240 <StartTask02+0x94>
 80011f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011f6:	ee17 0a90 	vmov	r0, s15
 80011fa:	f7ff f99d 	bl	8000538 <__aeabi_f2d>
 80011fe:	4603      	mov	r3, r0
 8001200:	460c      	mov	r4, r1
 8001202:	ec44 3b10 	vmov	d0, r3, r4
 8001206:	f008 fa17 	bl	8009638 <trunc>
 800120a:	ec54 3b10 	vmov	r3, r4, d0
 800120e:	4618      	mov	r0, r3
 8001210:	4621      	mov	r1, r4
 8001212:	f7ff f9e9 	bl	80005e8 <__aeabi_d2iz>
 8001216:	4603      	mov	r3, r0
 8001218:	60fb      	str	r3, [r7, #12]
	  snprintf(str_tmp,100," HUMIDITY = %d.%02d\n\r", tmpInt1, tmpInt2);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	4a08      	ldr	r2, [pc, #32]	; (8001244 <StartTask02+0x98>)
 8001222:	2164      	movs	r1, #100	; 0x64
 8001224:	4808      	ldr	r0, [pc, #32]	; (8001248 <StartTask02+0x9c>)
 8001226:	f007 fdf7 	bl	8008e18 <sniprintf>
	  HAL_UART_Transmit(&huart1,( uint8_t * )str_tmp,sizeof(str_tmp),1000);
 800122a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800122e:	2264      	movs	r2, #100	; 0x64
 8001230:	4905      	ldr	r1, [pc, #20]	; (8001248 <StartTask02+0x9c>)
 8001232:	4806      	ldr	r0, [pc, #24]	; (800124c <StartTask02+0xa0>)
 8001234:	f004 f924 	bl	8005480 <HAL_UART_Transmit>
  {
 8001238:	e7bc      	b.n	80011b4 <StartTask02+0x8>
 800123a:	bf00      	nop
 800123c:	20000128 	.word	0x20000128
 8001240:	42c80000 	.word	0x42c80000
 8001244:	080096dc 	.word	0x080096dc
 8001248:	2000012c 	.word	0x2000012c
 800124c:	20001ffc 	.word	0x20001ffc

08001250 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a04      	ldr	r2, [pc, #16]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d101      	bne.n	8001266 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001262:	f000 fdeb 	bl	8001e3c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40001000 	.word	0x40001000

08001274 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
	...

08001284 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128a:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <HAL_MspInit+0x4c>)
 800128c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800128e:	4a10      	ldr	r2, [pc, #64]	; (80012d0 <HAL_MspInit+0x4c>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	6613      	str	r3, [r2, #96]	; 0x60
 8001296:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <HAL_MspInit+0x4c>)
 8001298:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	607b      	str	r3, [r7, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a2:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <HAL_MspInit+0x4c>)
 80012a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012a6:	4a0a      	ldr	r2, [pc, #40]	; (80012d0 <HAL_MspInit+0x4c>)
 80012a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ac:	6593      	str	r3, [r2, #88]	; 0x58
 80012ae:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <HAL_MspInit+0x4c>)
 80012b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b6:	603b      	str	r3, [r7, #0]
 80012b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012ba:	2200      	movs	r2, #0
 80012bc:	210f      	movs	r1, #15
 80012be:	f06f 0001 	mvn.w	r0, #1
 80012c2:	f000 feb3 	bl	800202c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40021000 	.word	0x40021000

080012d4 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08a      	sub	sp, #40	; 0x28
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
 80012ea:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 80012ec:	4b18      	ldr	r3, [pc, #96]	; (8001350 <HAL_DFSDM_ChannelMspInit+0x7c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d128      	bne.n	8001346 <HAL_DFSDM_ChannelMspInit+0x72>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80012f4:	4b17      	ldr	r3, [pc, #92]	; (8001354 <HAL_DFSDM_ChannelMspInit+0x80>)
 80012f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012f8:	4a16      	ldr	r2, [pc, #88]	; (8001354 <HAL_DFSDM_ChannelMspInit+0x80>)
 80012fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012fe:	6613      	str	r3, [r2, #96]	; 0x60
 8001300:	4b14      	ldr	r3, [pc, #80]	; (8001354 <HAL_DFSDM_ChannelMspInit+0x80>)
 8001302:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001304:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001308:	613b      	str	r3, [r7, #16]
 800130a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800130c:	4b11      	ldr	r3, [pc, #68]	; (8001354 <HAL_DFSDM_ChannelMspInit+0x80>)
 800130e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001310:	4a10      	ldr	r2, [pc, #64]	; (8001354 <HAL_DFSDM_ChannelMspInit+0x80>)
 8001312:	f043 0310 	orr.w	r3, r3, #16
 8001316:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001318:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <HAL_DFSDM_ChannelMspInit+0x80>)
 800131a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131c:	f003 0310 	and.w	r3, r3, #16
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration    
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT 
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001324:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001328:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132a:	2302      	movs	r3, #2
 800132c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001332:	2300      	movs	r3, #0
 8001334:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001336:	2306      	movs	r3, #6
 8001338:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800133a:	f107 0314 	add.w	r3, r7, #20
 800133e:	4619      	mov	r1, r3
 8001340:	4805      	ldr	r0, [pc, #20]	; (8001358 <HAL_DFSDM_ChannelMspInit+0x84>)
 8001342:	f000 ffb3 	bl	80022ac <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 8001346:	bf00      	nop
 8001348:	3728      	adds	r7, #40	; 0x28
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000190 	.word	0x20000190
 8001354:	40021000 	.word	0x40021000
 8001358:	48001000 	.word	0x48001000

0800135c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08a      	sub	sp, #40	; 0x28
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a17      	ldr	r2, [pc, #92]	; (80013d8 <HAL_I2C_MspInit+0x7c>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d128      	bne.n	80013d0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800137e:	4b17      	ldr	r3, [pc, #92]	; (80013dc <HAL_I2C_MspInit+0x80>)
 8001380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001382:	4a16      	ldr	r2, [pc, #88]	; (80013dc <HAL_I2C_MspInit+0x80>)
 8001384:	f043 0302 	orr.w	r3, r3, #2
 8001388:	64d3      	str	r3, [r2, #76]	; 0x4c
 800138a:	4b14      	ldr	r3, [pc, #80]	; (80013dc <HAL_I2C_MspInit+0x80>)
 800138c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	613b      	str	r3, [r7, #16]
 8001394:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001396:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800139a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800139c:	2312      	movs	r3, #18
 800139e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013a0:	2301      	movs	r3, #1
 80013a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a4:	2303      	movs	r3, #3
 80013a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80013a8:	2304      	movs	r3, #4
 80013aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ac:	f107 0314 	add.w	r3, r7, #20
 80013b0:	4619      	mov	r1, r3
 80013b2:	480b      	ldr	r0, [pc, #44]	; (80013e0 <HAL_I2C_MspInit+0x84>)
 80013b4:	f000 ff7a 	bl	80022ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80013b8:	4b08      	ldr	r3, [pc, #32]	; (80013dc <HAL_I2C_MspInit+0x80>)
 80013ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013bc:	4a07      	ldr	r2, [pc, #28]	; (80013dc <HAL_I2C_MspInit+0x80>)
 80013be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013c2:	6593      	str	r3, [r2, #88]	; 0x58
 80013c4:	4b05      	ldr	r3, [pc, #20]	; (80013dc <HAL_I2C_MspInit+0x80>)
 80013c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80013d0:	bf00      	nop
 80013d2:	3728      	adds	r7, #40	; 0x28
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40005800 	.word	0x40005800
 80013dc:	40021000 	.word	0x40021000
 80013e0:	48000400 	.word	0x48000400

080013e4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a08      	ldr	r2, [pc, #32]	; (8001414 <HAL_I2C_MspDeInit+0x30>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d10a      	bne.n	800140c <HAL_I2C_MspDeInit+0x28>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80013f6:	4b08      	ldr	r3, [pc, #32]	; (8001418 <HAL_I2C_MspDeInit+0x34>)
 80013f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013fa:	4a07      	ldr	r2, [pc, #28]	; (8001418 <HAL_I2C_MspDeInit+0x34>)
 80013fc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001400:	6593      	str	r3, [r2, #88]	; 0x58
  
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin);
 8001402:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001406:	4805      	ldr	r0, [pc, #20]	; (800141c <HAL_I2C_MspDeInit+0x38>)
 8001408:	f001 f8f8 	bl	80025fc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 800140c:	bf00      	nop
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40005800 	.word	0x40005800
 8001418:	40021000 	.word	0x40021000
 800141c:	48000400 	.word	0x48000400

08001420 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08a      	sub	sp, #40	; 0x28
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a17      	ldr	r2, [pc, #92]	; (800149c <HAL_QSPI_MspInit+0x7c>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d128      	bne.n	8001494 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001442:	4b17      	ldr	r3, [pc, #92]	; (80014a0 <HAL_QSPI_MspInit+0x80>)
 8001444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001446:	4a16      	ldr	r2, [pc, #88]	; (80014a0 <HAL_QSPI_MspInit+0x80>)
 8001448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800144c:	6513      	str	r3, [r2, #80]	; 0x50
 800144e:	4b14      	ldr	r3, [pc, #80]	; (80014a0 <HAL_QSPI_MspInit+0x80>)
 8001450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001456:	613b      	str	r3, [r7, #16]
 8001458:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800145a:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <HAL_QSPI_MspInit+0x80>)
 800145c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145e:	4a10      	ldr	r2, [pc, #64]	; (80014a0 <HAL_QSPI_MspInit+0x80>)
 8001460:	f043 0310 	orr.w	r3, r3, #16
 8001464:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001466:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <HAL_QSPI_MspInit+0x80>)
 8001468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146a:	f003 0310 	and.w	r3, r3, #16
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3 
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin 
 8001472:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001476:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001478:	2302      	movs	r3, #2
 800147a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001480:	2303      	movs	r3, #3
 8001482:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001484:	230a      	movs	r3, #10
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001488:	f107 0314 	add.w	r3, r7, #20
 800148c:	4619      	mov	r1, r3
 800148e:	4805      	ldr	r0, [pc, #20]	; (80014a4 <HAL_QSPI_MspInit+0x84>)
 8001490:	f000 ff0c 	bl	80022ac <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001494:	bf00      	nop
 8001496:	3728      	adds	r7, #40	; 0x28
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	a0001000 	.word	0xa0001000
 80014a0:	40021000 	.word	0x40021000
 80014a4:	48001000 	.word	0x48001000

080014a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08a      	sub	sp, #40	; 0x28
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b0:	f107 0314 	add.w	r3, r7, #20
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a17      	ldr	r2, [pc, #92]	; (8001524 <HAL_SPI_MspInit+0x7c>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d128      	bne.n	800151c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80014ca:	4b17      	ldr	r3, [pc, #92]	; (8001528 <HAL_SPI_MspInit+0x80>)
 80014cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ce:	4a16      	ldr	r2, [pc, #88]	; (8001528 <HAL_SPI_MspInit+0x80>)
 80014d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014d4:	6593      	str	r3, [r2, #88]	; 0x58
 80014d6:	4b14      	ldr	r3, [pc, #80]	; (8001528 <HAL_SPI_MspInit+0x80>)
 80014d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014de:	613b      	str	r3, [r7, #16]
 80014e0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e2:	4b11      	ldr	r3, [pc, #68]	; (8001528 <HAL_SPI_MspInit+0x80>)
 80014e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e6:	4a10      	ldr	r2, [pc, #64]	; (8001528 <HAL_SPI_MspInit+0x80>)
 80014e8:	f043 0304 	orr.w	r3, r3, #4
 80014ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ee:	4b0e      	ldr	r3, [pc, #56]	; (8001528 <HAL_SPI_MspInit+0x80>)
 80014f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f2:	f003 0304 	and.w	r3, r3, #4
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80014fa:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80014fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001500:	2302      	movs	r3, #2
 8001502:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001508:	2303      	movs	r3, #3
 800150a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800150c:	2306      	movs	r3, #6
 800150e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001510:	f107 0314 	add.w	r3, r7, #20
 8001514:	4619      	mov	r1, r3
 8001516:	4805      	ldr	r0, [pc, #20]	; (800152c <HAL_SPI_MspInit+0x84>)
 8001518:	f000 fec8 	bl	80022ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800151c:	bf00      	nop
 800151e:	3728      	adds	r7, #40	; 0x28
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40003c00 	.word	0x40003c00
 8001528:	40021000 	.word	0x40021000
 800152c:	48000800 	.word	0x48000800

08001530 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08c      	sub	sp, #48	; 0x30
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001538:	f107 031c 	add.w	r3, r7, #28
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a2e      	ldr	r2, [pc, #184]	; (8001608 <HAL_UART_MspInit+0xd8>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d128      	bne.n	80015a4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001552:	4b2e      	ldr	r3, [pc, #184]	; (800160c <HAL_UART_MspInit+0xdc>)
 8001554:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001556:	4a2d      	ldr	r2, [pc, #180]	; (800160c <HAL_UART_MspInit+0xdc>)
 8001558:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800155c:	6613      	str	r3, [r2, #96]	; 0x60
 800155e:	4b2b      	ldr	r3, [pc, #172]	; (800160c <HAL_UART_MspInit+0xdc>)
 8001560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001566:	61bb      	str	r3, [r7, #24]
 8001568:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800156a:	4b28      	ldr	r3, [pc, #160]	; (800160c <HAL_UART_MspInit+0xdc>)
 800156c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800156e:	4a27      	ldr	r2, [pc, #156]	; (800160c <HAL_UART_MspInit+0xdc>)
 8001570:	f043 0302 	orr.w	r3, r3, #2
 8001574:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001576:	4b25      	ldr	r3, [pc, #148]	; (800160c <HAL_UART_MspInit+0xdc>)
 8001578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	617b      	str	r3, [r7, #20]
 8001580:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001582:	23c0      	movs	r3, #192	; 0xc0
 8001584:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001586:	2302      	movs	r3, #2
 8001588:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158e:	2303      	movs	r3, #3
 8001590:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001592:	2307      	movs	r3, #7
 8001594:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001596:	f107 031c 	add.w	r3, r7, #28
 800159a:	4619      	mov	r1, r3
 800159c:	481c      	ldr	r0, [pc, #112]	; (8001610 <HAL_UART_MspInit+0xe0>)
 800159e:	f000 fe85 	bl	80022ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80015a2:	e02d      	b.n	8001600 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a1a      	ldr	r2, [pc, #104]	; (8001614 <HAL_UART_MspInit+0xe4>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d128      	bne.n	8001600 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80015ae:	4b17      	ldr	r3, [pc, #92]	; (800160c <HAL_UART_MspInit+0xdc>)
 80015b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b2:	4a16      	ldr	r2, [pc, #88]	; (800160c <HAL_UART_MspInit+0xdc>)
 80015b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015b8:	6593      	str	r3, [r2, #88]	; 0x58
 80015ba:	4b14      	ldr	r3, [pc, #80]	; (800160c <HAL_UART_MspInit+0xdc>)
 80015bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015c2:	613b      	str	r3, [r7, #16]
 80015c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015c6:	4b11      	ldr	r3, [pc, #68]	; (800160c <HAL_UART_MspInit+0xdc>)
 80015c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ca:	4a10      	ldr	r2, [pc, #64]	; (800160c <HAL_UART_MspInit+0xdc>)
 80015cc:	f043 0308 	orr.w	r3, r3, #8
 80015d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015d2:	4b0e      	ldr	r3, [pc, #56]	; (800160c <HAL_UART_MspInit+0xdc>)
 80015d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d6:	f003 0308 	and.w	r3, r3, #8
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80015de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e4:	2302      	movs	r3, #2
 80015e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ec:	2303      	movs	r3, #3
 80015ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015f0:	2307      	movs	r3, #7
 80015f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015f4:	f107 031c 	add.w	r3, r7, #28
 80015f8:	4619      	mov	r1, r3
 80015fa:	4807      	ldr	r0, [pc, #28]	; (8001618 <HAL_UART_MspInit+0xe8>)
 80015fc:	f000 fe56 	bl	80022ac <HAL_GPIO_Init>
}
 8001600:	bf00      	nop
 8001602:	3730      	adds	r7, #48	; 0x30
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40013800 	.word	0x40013800
 800160c:	40021000 	.word	0x40021000
 8001610:	48000400 	.word	0x48000400
 8001614:	40004800 	.word	0x40004800
 8001618:	48000c00 	.word	0x48000c00

0800161c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08a      	sub	sp, #40	; 0x28
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001624:	f107 0314 	add.w	r3, r7, #20
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
 8001632:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800163c:	d154      	bne.n	80016e8 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800163e:	4b2c      	ldr	r3, [pc, #176]	; (80016f0 <HAL_PCD_MspInit+0xd4>)
 8001640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001642:	4a2b      	ldr	r2, [pc, #172]	; (80016f0 <HAL_PCD_MspInit+0xd4>)
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	64d3      	str	r3, [r2, #76]	; 0x4c
 800164a:	4b29      	ldr	r3, [pc, #164]	; (80016f0 <HAL_PCD_MspInit+0xd4>)
 800164c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	613b      	str	r3, [r7, #16]
 8001654:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001656:	f44f 7300 	mov.w	r3, #512	; 0x200
 800165a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800165c:	2300      	movs	r3, #0
 800165e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	4619      	mov	r1, r3
 800166a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800166e:	f000 fe1d 	bl	80022ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001672:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001676:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001678:	2302      	movs	r3, #2
 800167a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001680:	2303      	movs	r3, #3
 8001682:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001684:	230a      	movs	r3, #10
 8001686:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001688:	f107 0314 	add.w	r3, r7, #20
 800168c:	4619      	mov	r1, r3
 800168e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001692:	f000 fe0b 	bl	80022ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001696:	4b16      	ldr	r3, [pc, #88]	; (80016f0 <HAL_PCD_MspInit+0xd4>)
 8001698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169a:	4a15      	ldr	r2, [pc, #84]	; (80016f0 <HAL_PCD_MspInit+0xd4>)
 800169c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016a2:	4b13      	ldr	r3, [pc, #76]	; (80016f0 <HAL_PCD_MspInit+0xd4>)
 80016a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016ae:	4b10      	ldr	r3, [pc, #64]	; (80016f0 <HAL_PCD_MspInit+0xd4>)
 80016b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d114      	bne.n	80016e4 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016ba:	4b0d      	ldr	r3, [pc, #52]	; (80016f0 <HAL_PCD_MspInit+0xd4>)
 80016bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016be:	4a0c      	ldr	r2, [pc, #48]	; (80016f0 <HAL_PCD_MspInit+0xd4>)
 80016c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016c4:	6593      	str	r3, [r2, #88]	; 0x58
 80016c6:	4b0a      	ldr	r3, [pc, #40]	; (80016f0 <HAL_PCD_MspInit+0xd4>)
 80016c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ce:	60bb      	str	r3, [r7, #8]
 80016d0:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80016d2:	f002 f81f 	bl	8003714 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80016d6:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <HAL_PCD_MspInit+0xd4>)
 80016d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016da:	4a05      	ldr	r2, [pc, #20]	; (80016f0 <HAL_PCD_MspInit+0xd4>)
 80016dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016e0:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80016e2:	e001      	b.n	80016e8 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 80016e4:	f002 f816 	bl	8003714 <HAL_PWREx_EnableVddUSB>
}
 80016e8:	bf00      	nop
 80016ea:	3728      	adds	r7, #40	; 0x28
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40021000 	.word	0x40021000

080016f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b08c      	sub	sp, #48	; 0x30
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001700:	2300      	movs	r3, #0
 8001702:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8001704:	2200      	movs	r2, #0
 8001706:	6879      	ldr	r1, [r7, #4]
 8001708:	2036      	movs	r0, #54	; 0x36
 800170a:	f000 fc8f 	bl	800202c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800170e:	2036      	movs	r0, #54	; 0x36
 8001710:	f000 fca8 	bl	8002064 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001714:	4b1e      	ldr	r3, [pc, #120]	; (8001790 <HAL_InitTick+0x9c>)
 8001716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001718:	4a1d      	ldr	r2, [pc, #116]	; (8001790 <HAL_InitTick+0x9c>)
 800171a:	f043 0310 	orr.w	r3, r3, #16
 800171e:	6593      	str	r3, [r2, #88]	; 0x58
 8001720:	4b1b      	ldr	r3, [pc, #108]	; (8001790 <HAL_InitTick+0x9c>)
 8001722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001724:	f003 0310 	and.w	r3, r3, #16
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800172c:	f107 0210 	add.w	r2, r7, #16
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	4611      	mov	r1, r2
 8001736:	4618      	mov	r0, r3
 8001738:	f002 fe18 	bl	800436c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800173c:	f002 fdea 	bl	8004314 <HAL_RCC_GetPCLK1Freq>
 8001740:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001744:	4a13      	ldr	r2, [pc, #76]	; (8001794 <HAL_InitTick+0xa0>)
 8001746:	fba2 2303 	umull	r2, r3, r2, r3
 800174a:	0c9b      	lsrs	r3, r3, #18
 800174c:	3b01      	subs	r3, #1
 800174e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001750:	4b11      	ldr	r3, [pc, #68]	; (8001798 <HAL_InitTick+0xa4>)
 8001752:	4a12      	ldr	r2, [pc, #72]	; (800179c <HAL_InitTick+0xa8>)
 8001754:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001756:	4b10      	ldr	r3, [pc, #64]	; (8001798 <HAL_InitTick+0xa4>)
 8001758:	f240 32e7 	movw	r2, #999	; 0x3e7
 800175c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800175e:	4a0e      	ldr	r2, [pc, #56]	; (8001798 <HAL_InitTick+0xa4>)
 8001760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001762:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001764:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <HAL_InitTick+0xa4>)
 8001766:	2200      	movs	r2, #0
 8001768:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800176a:	4b0b      	ldr	r3, [pc, #44]	; (8001798 <HAL_InitTick+0xa4>)
 800176c:	2200      	movs	r2, #0
 800176e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001770:	4809      	ldr	r0, [pc, #36]	; (8001798 <HAL_InitTick+0xa4>)
 8001772:	f003 fbd7 	bl	8004f24 <HAL_TIM_Base_Init>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d104      	bne.n	8001786 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800177c:	4806      	ldr	r0, [pc, #24]	; (8001798 <HAL_InitTick+0xa4>)
 800177e:	f003 fc07 	bl	8004f90 <HAL_TIM_Base_Start_IT>
 8001782:	4603      	mov	r3, r0
 8001784:	e000      	b.n	8001788 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
}
 8001788:	4618      	mov	r0, r3
 800178a:	3730      	adds	r7, #48	; 0x30
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40021000 	.word	0x40021000
 8001794:	431bde83 	.word	0x431bde83
 8001798:	200020c4 	.word	0x200020c4
 800179c:	40001000 	.word	0x40001000

080017a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017b2:	e7fe      	b.n	80017b2 <HardFault_Handler+0x4>

080017b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017b8:	e7fe      	b.n	80017b8 <MemManage_Handler+0x4>

080017ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017be:	e7fe      	b.n	80017be <BusFault_Handler+0x4>

080017c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017c4:	e7fe      	b.n	80017c4 <UsageFault_Handler+0x4>

080017c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80017d8:	2020      	movs	r0, #32
 80017da:	f001 f81b 	bl	8002814 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80017de:	2040      	movs	r0, #64	; 0x40
 80017e0:	f001 f818 	bl	8002814 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80017e4:	2080      	movs	r0, #128	; 0x80
 80017e6:	f001 f815 	bl	8002814 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80017ea:	f44f 7080 	mov.w	r0, #256	; 0x100
 80017ee:	f001 f811 	bl	8002814 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80017fa:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80017fe:	f001 f809 	bl	8002814 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001802:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001806:	f001 f805 	bl	8002814 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800180a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800180e:	f001 f801 	bl	8002814 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001812:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001816:	f000 fffd 	bl	8002814 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800181a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800181e:	f000 fff9 	bl	8002814 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
	...

08001828 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800182c:	4802      	ldr	r0, [pc, #8]	; (8001838 <TIM6_DAC_IRQHandler+0x10>)
 800182e:	f003 fbd9 	bl	8004fe4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	200020c4 	.word	0x200020c4

0800183c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001844:	4b11      	ldr	r3, [pc, #68]	; (800188c <_sbrk+0x50>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d102      	bne.n	8001852 <_sbrk+0x16>
		heap_end = &end;
 800184c:	4b0f      	ldr	r3, [pc, #60]	; (800188c <_sbrk+0x50>)
 800184e:	4a10      	ldr	r2, [pc, #64]	; (8001890 <_sbrk+0x54>)
 8001850:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001852:	4b0e      	ldr	r3, [pc, #56]	; (800188c <_sbrk+0x50>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001858:	4b0c      	ldr	r3, [pc, #48]	; (800188c <_sbrk+0x50>)
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4413      	add	r3, r2
 8001860:	466a      	mov	r2, sp
 8001862:	4293      	cmp	r3, r2
 8001864:	d907      	bls.n	8001876 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001866:	f007 fa99 	bl	8008d9c <__errno>
 800186a:	4602      	mov	r2, r0
 800186c:	230c      	movs	r3, #12
 800186e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001870:	f04f 33ff 	mov.w	r3, #4294967295
 8001874:	e006      	b.n	8001884 <_sbrk+0x48>
	}

	heap_end += incr;
 8001876:	4b05      	ldr	r3, [pc, #20]	; (800188c <_sbrk+0x50>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4413      	add	r3, r2
 800187e:	4a03      	ldr	r2, [pc, #12]	; (800188c <_sbrk+0x50>)
 8001880:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001882:	68fb      	ldr	r3, [r7, #12]
}
 8001884:	4618      	mov	r0, r3
 8001886:	3710      	adds	r7, #16
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	20000194 	.word	0x20000194
 8001890:	20002218 	.word	0x20002218

08001894 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001898:	4b17      	ldr	r3, [pc, #92]	; (80018f8 <SystemInit+0x64>)
 800189a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800189e:	4a16      	ldr	r2, [pc, #88]	; (80018f8 <SystemInit+0x64>)
 80018a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80018a8:	4b14      	ldr	r3, [pc, #80]	; (80018fc <SystemInit+0x68>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a13      	ldr	r2, [pc, #76]	; (80018fc <SystemInit+0x68>)
 80018ae:	f043 0301 	orr.w	r3, r3, #1
 80018b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80018b4:	4b11      	ldr	r3, [pc, #68]	; (80018fc <SystemInit+0x68>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80018ba:	4b10      	ldr	r3, [pc, #64]	; (80018fc <SystemInit+0x68>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a0f      	ldr	r2, [pc, #60]	; (80018fc <SystemInit+0x68>)
 80018c0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80018c4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80018c8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80018ca:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <SystemInit+0x68>)
 80018cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018d0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80018d2:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <SystemInit+0x68>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a09      	ldr	r2, [pc, #36]	; (80018fc <SystemInit+0x68>)
 80018d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018dc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80018de:	4b07      	ldr	r3, [pc, #28]	; (80018fc <SystemInit+0x68>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018e4:	4b04      	ldr	r3, [pc, #16]	; (80018f8 <SystemInit+0x64>)
 80018e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018ea:	609a      	str	r2, [r3, #8]
#endif
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	e000ed00 	.word	0xe000ed00
 80018fc:	40021000 	.word	0x40021000

08001900 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001900:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001938 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001904:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001906:	e003      	b.n	8001910 <LoopCopyDataInit>

08001908 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001908:	4b0c      	ldr	r3, [pc, #48]	; (800193c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800190a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800190c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800190e:	3104      	adds	r1, #4

08001910 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001910:	480b      	ldr	r0, [pc, #44]	; (8001940 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001912:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001914:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001916:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001918:	d3f6      	bcc.n	8001908 <CopyDataInit>
	ldr	r2, =_sbss
 800191a:	4a0b      	ldr	r2, [pc, #44]	; (8001948 <LoopForever+0x12>)
	b	LoopFillZerobss
 800191c:	e002      	b.n	8001924 <LoopFillZerobss>

0800191e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800191e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001920:	f842 3b04 	str.w	r3, [r2], #4

08001924 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001924:	4b09      	ldr	r3, [pc, #36]	; (800194c <LoopForever+0x16>)
	cmp	r2, r3
 8001926:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001928:	d3f9      	bcc.n	800191e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800192a:	f7ff ffb3 	bl	8001894 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800192e:	f007 fa3b 	bl	8008da8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001932:	f7ff f801 	bl	8000938 <main>

08001936 <LoopForever>:

LoopForever:
    b LoopForever
 8001936:	e7fe      	b.n	8001936 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001938:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800193c:	08009798 	.word	0x08009798
	ldr	r0, =_sdata
 8001940:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001944:	2000010c 	.word	0x2000010c
	ldr	r2, =_sbss
 8001948:	2000010c 	.word	0x2000010c
	ldr	r3, = _ebss
 800194c:	20002218 	.word	0x20002218

08001950 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001950:	e7fe      	b.n	8001950 <ADC1_2_IRQHandler>
	...

08001954 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b08a      	sub	sp, #40	; 0x28
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800195c:	4b27      	ldr	r3, [pc, #156]	; (80019fc <I2Cx_MspInit+0xa8>)
 800195e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001960:	4a26      	ldr	r2, [pc, #152]	; (80019fc <I2Cx_MspInit+0xa8>)
 8001962:	f043 0302 	orr.w	r3, r3, #2
 8001966:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001968:	4b24      	ldr	r3, [pc, #144]	; (80019fc <I2Cx_MspInit+0xa8>)
 800196a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196c:	f003 0302 	and.w	r3, r3, #2
 8001970:	613b      	str	r3, [r7, #16]
 8001972:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001974:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001978:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800197a:	2312      	movs	r3, #18
 800197c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800197e:	2301      	movs	r3, #1
 8001980:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001982:	2303      	movs	r3, #3
 8001984:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001986:	2304      	movs	r3, #4
 8001988:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800198a:	f107 0314 	add.w	r3, r7, #20
 800198e:	4619      	mov	r1, r3
 8001990:	481b      	ldr	r0, [pc, #108]	; (8001a00 <I2Cx_MspInit+0xac>)
 8001992:	f000 fc8b 	bl	80022ac <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001996:	f107 0314 	add.w	r3, r7, #20
 800199a:	4619      	mov	r1, r3
 800199c:	4818      	ldr	r0, [pc, #96]	; (8001a00 <I2Cx_MspInit+0xac>)
 800199e:	f000 fc85 	bl	80022ac <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80019a2:	4b16      	ldr	r3, [pc, #88]	; (80019fc <I2Cx_MspInit+0xa8>)
 80019a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a6:	4a15      	ldr	r2, [pc, #84]	; (80019fc <I2Cx_MspInit+0xa8>)
 80019a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019ac:	6593      	str	r3, [r2, #88]	; 0x58
 80019ae:	4b13      	ldr	r3, [pc, #76]	; (80019fc <I2Cx_MspInit+0xa8>)
 80019b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80019ba:	4b10      	ldr	r3, [pc, #64]	; (80019fc <I2Cx_MspInit+0xa8>)
 80019bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019be:	4a0f      	ldr	r2, [pc, #60]	; (80019fc <I2Cx_MspInit+0xa8>)
 80019c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019c4:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80019c6:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <I2Cx_MspInit+0xa8>)
 80019c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ca:	4a0c      	ldr	r2, [pc, #48]	; (80019fc <I2Cx_MspInit+0xa8>)
 80019cc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80019d0:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80019d2:	2200      	movs	r2, #0
 80019d4:	210f      	movs	r1, #15
 80019d6:	2021      	movs	r0, #33	; 0x21
 80019d8:	f000 fb28 	bl	800202c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80019dc:	2021      	movs	r0, #33	; 0x21
 80019de:	f000 fb41 	bl	8002064 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80019e2:	2200      	movs	r2, #0
 80019e4:	210f      	movs	r1, #15
 80019e6:	2022      	movs	r0, #34	; 0x22
 80019e8:	f000 fb20 	bl	800202c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80019ec:	2022      	movs	r0, #34	; 0x22
 80019ee:	f000 fb39 	bl	8002064 <HAL_NVIC_EnableIRQ>
}
 80019f2:	bf00      	nop
 80019f4:	3728      	adds	r7, #40	; 0x28
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40021000 	.word	0x40021000
 8001a00:	48000400 	.word	0x48000400

08001a04 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a12      	ldr	r2, [pc, #72]	; (8001a58 <I2Cx_Init+0x54>)
 8001a10:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a11      	ldr	r2, [pc, #68]	; (8001a5c <I2Cx_Init+0x58>)
 8001a16:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2201      	movs	r2, #1
 8001a22:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f7ff ff89 	bl	8001954 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f000 ff09 	bl	800285a <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001a48:	2100      	movs	r1, #0
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f001 fc0e 	bl	800326c <HAL_I2CEx_ConfigAnalogFilter>
}
 8001a50:	bf00      	nop
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40005800 	.word	0x40005800
 8001a5c:	00702681 	.word	0x00702681

08001a60 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b08a      	sub	sp, #40	; 0x28
 8001a64:	af04      	add	r7, sp, #16
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	4608      	mov	r0, r1
 8001a6a:	4611      	mov	r1, r2
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	4603      	mov	r3, r0
 8001a70:	72fb      	strb	r3, [r7, #11]
 8001a72:	460b      	mov	r3, r1
 8001a74:	813b      	strh	r3, [r7, #8]
 8001a76:	4613      	mov	r3, r2
 8001a78:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001a7e:	7afb      	ldrb	r3, [r7, #11]
 8001a80:	b299      	uxth	r1, r3
 8001a82:	88f8      	ldrh	r0, [r7, #6]
 8001a84:	893a      	ldrh	r2, [r7, #8]
 8001a86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a8a:	9302      	str	r3, [sp, #8]
 8001a8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a8e:	9301      	str	r3, [sp, #4]
 8001a90:	6a3b      	ldr	r3, [r7, #32]
 8001a92:	9300      	str	r3, [sp, #0]
 8001a94:	4603      	mov	r3, r0
 8001a96:	68f8      	ldr	r0, [r7, #12]
 8001a98:	f001 f8b2 	bl	8002c00 <HAL_I2C_Mem_Read>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001aa0:	7dfb      	ldrb	r3, [r7, #23]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d004      	beq.n	8001ab0 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8001aa6:	7afb      	ldrb	r3, [r7, #11]
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	68f8      	ldr	r0, [r7, #12]
 8001aac:	f000 f832 	bl	8001b14 <I2Cx_Error>
  }
  return status;
 8001ab0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3718      	adds	r7, #24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b08a      	sub	sp, #40	; 0x28
 8001abe:	af04      	add	r7, sp, #16
 8001ac0:	60f8      	str	r0, [r7, #12]
 8001ac2:	4608      	mov	r0, r1
 8001ac4:	4611      	mov	r1, r2
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	4603      	mov	r3, r0
 8001aca:	72fb      	strb	r3, [r7, #11]
 8001acc:	460b      	mov	r3, r1
 8001ace:	813b      	strh	r3, [r7, #8]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001ad8:	7afb      	ldrb	r3, [r7, #11]
 8001ada:	b299      	uxth	r1, r3
 8001adc:	88f8      	ldrh	r0, [r7, #6]
 8001ade:	893a      	ldrh	r2, [r7, #8]
 8001ae0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ae4:	9302      	str	r3, [sp, #8]
 8001ae6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ae8:	9301      	str	r3, [sp, #4]
 8001aea:	6a3b      	ldr	r3, [r7, #32]
 8001aec:	9300      	str	r3, [sp, #0]
 8001aee:	4603      	mov	r3, r0
 8001af0:	68f8      	ldr	r0, [r7, #12]
 8001af2:	f000 ff71 	bl	80029d8 <HAL_I2C_Mem_Write>
 8001af6:	4603      	mov	r3, r0
 8001af8:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001afa:	7dfb      	ldrb	r3, [r7, #23]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d004      	beq.n	8001b0a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001b00:	7afb      	ldrb	r3, [r7, #11]
 8001b02:	4619      	mov	r1, r3
 8001b04:	68f8      	ldr	r0, [r7, #12]
 8001b06:	f000 f805 	bl	8001b14 <I2Cx_Error>
  }
  return status;
 8001b0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3718      	adds	r7, #24
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f000 ff29 	bl	8002978 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f7ff ff6c 	bl	8001a04 <I2Cx_Init>
}
 8001b2c:	bf00      	nop
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001b38:	4802      	ldr	r0, [pc, #8]	; (8001b44 <SENSOR_IO_Init+0x10>)
 8001b3a:	f7ff ff63 	bl	8001a04 <I2Cx_Init>
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20002184 	.word	0x20002184

08001b48 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af02      	add	r7, sp, #8
 8001b4e:	4603      	mov	r3, r0
 8001b50:	71fb      	strb	r3, [r7, #7]
 8001b52:	460b      	mov	r3, r1
 8001b54:	71bb      	strb	r3, [r7, #6]
 8001b56:	4613      	mov	r3, r2
 8001b58:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001b5a:	79bb      	ldrb	r3, [r7, #6]
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	79f9      	ldrb	r1, [r7, #7]
 8001b60:	2301      	movs	r3, #1
 8001b62:	9301      	str	r3, [sp, #4]
 8001b64:	1d7b      	adds	r3, r7, #5
 8001b66:	9300      	str	r3, [sp, #0]
 8001b68:	2301      	movs	r3, #1
 8001b6a:	4803      	ldr	r0, [pc, #12]	; (8001b78 <SENSOR_IO_Write+0x30>)
 8001b6c:	f7ff ffa5 	bl	8001aba <I2Cx_WriteMultiple>
}
 8001b70:	bf00      	nop
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	20002184 	.word	0x20002184

08001b7c <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af02      	add	r7, sp, #8
 8001b82:	4603      	mov	r3, r0
 8001b84:	460a      	mov	r2, r1
 8001b86:	71fb      	strb	r3, [r7, #7]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001b90:	79bb      	ldrb	r3, [r7, #6]
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	79f9      	ldrb	r1, [r7, #7]
 8001b96:	2301      	movs	r3, #1
 8001b98:	9301      	str	r3, [sp, #4]
 8001b9a:	f107 030f 	add.w	r3, r7, #15
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	4804      	ldr	r0, [pc, #16]	; (8001bb4 <SENSOR_IO_Read+0x38>)
 8001ba4:	f7ff ff5c 	bl	8001a60 <I2Cx_ReadMultiple>

  return read_value;
 8001ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20002184 	.word	0x20002184

08001bb8 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af02      	add	r7, sp, #8
 8001bbe:	603a      	str	r2, [r7, #0]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	71fb      	strb	r3, [r7, #7]
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	71bb      	strb	r3, [r7, #6]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001bce:	79bb      	ldrb	r3, [r7, #6]
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	79f9      	ldrb	r1, [r7, #7]
 8001bd4:	88bb      	ldrh	r3, [r7, #4]
 8001bd6:	9301      	str	r3, [sp, #4]
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	9300      	str	r3, [sp, #0]
 8001bdc:	2301      	movs	r3, #1
 8001bde:	4804      	ldr	r0, [pc, #16]	; (8001bf0 <SENSOR_IO_ReadMultiple+0x38>)
 8001be0:	f7ff ff3e 	bl	8001a60 <I2Cx_ReadMultiple>
 8001be4:	4603      	mov	r3, r0
 8001be6:	b29b      	uxth	r3, r3
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	20002184 	.word	0x20002184

08001bf4 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8001bfa:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <BSP_HSENSOR_Init+0x38>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	20be      	movs	r0, #190	; 0xbe
 8001c00:	4798      	blx	r3
 8001c02:	4603      	mov	r3, r0
 8001c04:	2bbc      	cmp	r3, #188	; 0xbc
 8001c06:	d002      	beq.n	8001c0e <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	607b      	str	r3, [r7, #4]
 8001c0c:	e009      	b.n	8001c22 <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8001c0e:	4b08      	ldr	r3, [pc, #32]	; (8001c30 <BSP_HSENSOR_Init+0x3c>)
 8001c10:	4a06      	ldr	r2, [pc, #24]	; (8001c2c <BSP_HSENSOR_Init+0x38>)
 8001c12:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8001c14:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <BSP_HSENSOR_Init+0x3c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	20be      	movs	r0, #190	; 0xbe
 8001c1c:	4798      	blx	r3
    ret = HSENSOR_OK;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8001c22:	687b      	ldr	r3, [r7, #4]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	20000090 	.word	0x20000090
 8001c30:	20000198 	.word	0x20000198

08001c34 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8001c38:	4b04      	ldr	r3, [pc, #16]	; (8001c4c <BSP_HSENSOR_ReadHumidity+0x18>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	20be      	movs	r0, #190	; 0xbe
 8001c40:	4798      	blx	r3
 8001c42:	eef0 7a40 	vmov.f32	s15, s0
}
 8001c46:	eeb0 0a67 	vmov.f32	s0, s15
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	20000198 	.word	0x20000198

08001c50 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001c5a:	88fb      	ldrh	r3, [r7, #6]
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2120      	movs	r1, #32
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff ff8b 	bl	8001b7c <SENSOR_IO_Read>
 8001c66:	4603      	mov	r3, r0
 8001c68:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8001c6a:	7bfb      	ldrb	r3, [r7, #15]
 8001c6c:	f023 0304 	bic.w	r3, r3, #4
 8001c70:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8001c72:	7bfb      	ldrb	r3, [r7, #15]
 8001c74:	f043 0304 	orr.w	r3, r3, #4
 8001c78:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8001c7a:	7bfb      	ldrb	r3, [r7, #15]
 8001c7c:	f023 0303 	bic.w	r3, r3, #3
 8001c80:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8001c82:	7bfb      	ldrb	r3, [r7, #15]
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8001c8a:	7bfb      	ldrb	r3, [r7, #15]
 8001c8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c90:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001c92:	88fb      	ldrh	r3, [r7, #6]
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	7bfa      	ldrb	r2, [r7, #15]
 8001c98:	2120      	movs	r1, #32
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff ff54 	bl	8001b48 <SENSOR_IO_Write>
}
 8001ca0:	bf00      	nop
 8001ca2:	3710      	adds	r7, #16
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4603      	mov	r3, r0
 8001cb0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8001cb6:	f7ff ff3d 	bl	8001b34 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8001cba:	88fb      	ldrh	r3, [r7, #6]
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	210f      	movs	r1, #15
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff ff5b 	bl	8001b7c <SENSOR_IO_Read>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8001cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3710      	adds	r7, #16
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b088      	sub	sp, #32
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8001cde:	88fb      	ldrh	r3, [r7, #6]
 8001ce0:	b2d8      	uxtb	r0, r3
 8001ce2:	f107 020c 	add.w	r2, r7, #12
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	21b0      	movs	r1, #176	; 0xb0
 8001cea:	f7ff ff65 	bl	8001bb8 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8001cee:	7b3b      	ldrb	r3, [r7, #12]
 8001cf0:	085b      	lsrs	r3, r3, #1
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8001cf6:	7b7b      	ldrb	r3, [r7, #13]
 8001cf8:	085b      	lsrs	r3, r3, #1
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8001cfe:	88fb      	ldrh	r3, [r7, #6]
 8001d00:	b2d8      	uxtb	r0, r3
 8001d02:	f107 020c 	add.w	r2, r7, #12
 8001d06:	2302      	movs	r3, #2
 8001d08:	21b6      	movs	r1, #182	; 0xb6
 8001d0a:	f7ff ff55 	bl	8001bb8 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001d0e:	7b7b      	ldrb	r3, [r7, #13]
 8001d10:	021b      	lsls	r3, r3, #8
 8001d12:	b21a      	sxth	r2, r3
 8001d14:	7b3b      	ldrb	r3, [r7, #12]
 8001d16:	b21b      	sxth	r3, r3
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8001d1c:	88fb      	ldrh	r3, [r7, #6]
 8001d1e:	b2d8      	uxtb	r0, r3
 8001d20:	f107 020c 	add.w	r2, r7, #12
 8001d24:	2302      	movs	r3, #2
 8001d26:	21ba      	movs	r1, #186	; 0xba
 8001d28:	f7ff ff46 	bl	8001bb8 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001d2c:	7b7b      	ldrb	r3, [r7, #13]
 8001d2e:	021b      	lsls	r3, r3, #8
 8001d30:	b21a      	sxth	r2, r3
 8001d32:	7b3b      	ldrb	r3, [r7, #12]
 8001d34:	b21b      	sxth	r3, r3
 8001d36:	4313      	orrs	r3, r2
 8001d38:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8001d3a:	88fb      	ldrh	r3, [r7, #6]
 8001d3c:	b2d8      	uxtb	r0, r3
 8001d3e:	f107 020c 	add.w	r2, r7, #12
 8001d42:	2302      	movs	r3, #2
 8001d44:	21a8      	movs	r1, #168	; 0xa8
 8001d46:	f7ff ff37 	bl	8001bb8 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001d4a:	7b7b      	ldrb	r3, [r7, #13]
 8001d4c:	021b      	lsls	r3, r3, #8
 8001d4e:	b21a      	sxth	r2, r3
 8001d50:	7b3b      	ldrb	r3, [r7, #12]
 8001d52:	b21b      	sxth	r3, r3
 8001d54:	4313      	orrs	r3, r2
 8001d56:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8001d58:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001d5c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	ee07 3a90 	vmov	s15, r3
 8001d66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d6a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001d6e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	ee07 3a90 	vmov	s15, r3
 8001d78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d7c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001d80:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001d84:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	ee07 3a90 	vmov	s15, r3
 8001d8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d96:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001d9a:	ee07 3a90 	vmov	s15, r3
 8001d9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001da2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001da6:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 8001daa:	edd7 7a04 	vldr	s15, [r7, #16]
 8001dae:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001db2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001db6:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 8001dba:	edd7 7a04 	vldr	s15, [r7, #16]
 8001dbe:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001e04 <HTS221_H_ReadHumidity+0x130>
 8001dc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dca:	dd01      	ble.n	8001dd0 <HTS221_H_ReadHumidity+0xfc>
 8001dcc:	4b0e      	ldr	r3, [pc, #56]	; (8001e08 <HTS221_H_ReadHumidity+0x134>)
 8001dce:	e00a      	b.n	8001de6 <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8001dd0:	edd7 7a04 	vldr	s15, [r7, #16]
 8001dd4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ddc:	d502      	bpl.n	8001de4 <HTS221_H_ReadHumidity+0x110>
 8001dde:	f04f 0300 	mov.w	r3, #0
 8001de2:	e000      	b.n	8001de6 <HTS221_H_ReadHumidity+0x112>
 8001de4:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8001de6:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8001de8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001dec:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001df0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001df4:	eef0 7a66 	vmov.f32	s15, s13
}
 8001df8:	eeb0 0a67 	vmov.f32	s0, s15
 8001dfc:	3720      	adds	r7, #32
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	447a0000 	.word	0x447a0000
 8001e08:	447a0000 	.word	0x447a0000

08001e0c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e12:	2300      	movs	r3, #0
 8001e14:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e16:	2003      	movs	r0, #3
 8001e18:	f000 f8fd 	bl	8002016 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e1c:	2000      	movs	r0, #0
 8001e1e:	f7ff fc69 	bl	80016f4 <HAL_InitTick>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d002      	beq.n	8001e2e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	71fb      	strb	r3, [r7, #7]
 8001e2c:	e001      	b.n	8001e32 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e2e:	f7ff fa29 	bl	8001284 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e32:	79fb      	ldrb	r3, [r7, #7]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e40:	4b05      	ldr	r3, [pc, #20]	; (8001e58 <HAL_IncTick+0x1c>)
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <HAL_IncTick+0x20>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4413      	add	r3, r2
 8001e4a:	4a03      	ldr	r2, [pc, #12]	; (8001e58 <HAL_IncTick+0x1c>)
 8001e4c:	6013      	str	r3, [r2, #0]
}
 8001e4e:	bf00      	nop
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	200021d0 	.word	0x200021d0
 8001e5c:	200000a0 	.word	0x200000a0

08001e60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  return uwTick;
 8001e64:	4b03      	ldr	r3, [pc, #12]	; (8001e74 <HAL_GetTick+0x14>)
 8001e66:	681b      	ldr	r3, [r3, #0]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	200021d0 	.word	0x200021d0

08001e78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e80:	f7ff ffee 	bl	8001e60 <HAL_GetTick>
 8001e84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e90:	d004      	beq.n	8001e9c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e92:	4b09      	ldr	r3, [pc, #36]	; (8001eb8 <HAL_Delay+0x40>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	4413      	add	r3, r2
 8001e9a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e9c:	bf00      	nop
 8001e9e:	f7ff ffdf 	bl	8001e60 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d8f7      	bhi.n	8001e9e <HAL_Delay+0x26>
  {
  }
}
 8001eae:	bf00      	nop
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	200000a0 	.word	0x200000a0

08001ebc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ecc:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <__NVIC_SetPriorityGrouping+0x44>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ed2:	68ba      	ldr	r2, [r7, #8]
 8001ed4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ed8:	4013      	ands	r3, r2
 8001eda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ee4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ee8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eee:	4a04      	ldr	r2, [pc, #16]	; (8001f00 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	60d3      	str	r3, [r2, #12]
}
 8001ef4:	bf00      	nop
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	e000ed00 	.word	0xe000ed00

08001f04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f08:	4b04      	ldr	r3, [pc, #16]	; (8001f1c <__NVIC_GetPriorityGrouping+0x18>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	0a1b      	lsrs	r3, r3, #8
 8001f0e:	f003 0307 	and.w	r3, r3, #7
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	e000ed00 	.word	0xe000ed00

08001f20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	db0b      	blt.n	8001f4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f32:	79fb      	ldrb	r3, [r7, #7]
 8001f34:	f003 021f 	and.w	r2, r3, #31
 8001f38:	4907      	ldr	r1, [pc, #28]	; (8001f58 <__NVIC_EnableIRQ+0x38>)
 8001f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3e:	095b      	lsrs	r3, r3, #5
 8001f40:	2001      	movs	r0, #1
 8001f42:	fa00 f202 	lsl.w	r2, r0, r2
 8001f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f4a:	bf00      	nop
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	e000e100 	.word	0xe000e100

08001f5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	6039      	str	r1, [r7, #0]
 8001f66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	db0a      	blt.n	8001f86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	b2da      	uxtb	r2, r3
 8001f74:	490c      	ldr	r1, [pc, #48]	; (8001fa8 <__NVIC_SetPriority+0x4c>)
 8001f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7a:	0112      	lsls	r2, r2, #4
 8001f7c:	b2d2      	uxtb	r2, r2
 8001f7e:	440b      	add	r3, r1
 8001f80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f84:	e00a      	b.n	8001f9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	4908      	ldr	r1, [pc, #32]	; (8001fac <__NVIC_SetPriority+0x50>)
 8001f8c:	79fb      	ldrb	r3, [r7, #7]
 8001f8e:	f003 030f 	and.w	r3, r3, #15
 8001f92:	3b04      	subs	r3, #4
 8001f94:	0112      	lsls	r2, r2, #4
 8001f96:	b2d2      	uxtb	r2, r2
 8001f98:	440b      	add	r3, r1
 8001f9a:	761a      	strb	r2, [r3, #24]
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	e000e100 	.word	0xe000e100
 8001fac:	e000ed00 	.word	0xe000ed00

08001fb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b089      	sub	sp, #36	; 0x24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	f1c3 0307 	rsb	r3, r3, #7
 8001fca:	2b04      	cmp	r3, #4
 8001fcc:	bf28      	it	cs
 8001fce:	2304      	movcs	r3, #4
 8001fd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	3304      	adds	r3, #4
 8001fd6:	2b06      	cmp	r3, #6
 8001fd8:	d902      	bls.n	8001fe0 <NVIC_EncodePriority+0x30>
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	3b03      	subs	r3, #3
 8001fde:	e000      	b.n	8001fe2 <NVIC_EncodePriority+0x32>
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43da      	mvns	r2, r3
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	401a      	ands	r2, r3
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8002002:	43d9      	mvns	r1, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002008:	4313      	orrs	r3, r2
         );
}
 800200a:	4618      	mov	r0, r3
 800200c:	3724      	adds	r7, #36	; 0x24
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b082      	sub	sp, #8
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7ff ff4c 	bl	8001ebc <__NVIC_SetPriorityGrouping>
}
 8002024:	bf00      	nop
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
 8002038:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800203a:	2300      	movs	r3, #0
 800203c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800203e:	f7ff ff61 	bl	8001f04 <__NVIC_GetPriorityGrouping>
 8002042:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	68b9      	ldr	r1, [r7, #8]
 8002048:	6978      	ldr	r0, [r7, #20]
 800204a:	f7ff ffb1 	bl	8001fb0 <NVIC_EncodePriority>
 800204e:	4602      	mov	r2, r0
 8002050:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002054:	4611      	mov	r1, r2
 8002056:	4618      	mov	r0, r3
 8002058:	f7ff ff80 	bl	8001f5c <__NVIC_SetPriority>
}
 800205c:	bf00      	nop
 800205e:	3718      	adds	r7, #24
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800206e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff ff54 	bl	8001f20 <__NVIC_EnableIRQ>
}
 8002078:	bf00      	nop
 800207a:	3708      	adds	r7, #8
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e0ac      	b.n	80021ec <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f000 f8b2 	bl	8002200 <DFSDM_GetChannelFromInstance>
 800209c:	4602      	mov	r2, r0
 800209e:	4b55      	ldr	r3, [pc, #340]	; (80021f4 <HAL_DFSDM_ChannelInit+0x174>)
 80020a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e09f      	b.n	80021ec <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f7ff f911 	bl	80012d4 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80020b2:	4b51      	ldr	r3, [pc, #324]	; (80021f8 <HAL_DFSDM_ChannelInit+0x178>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	3301      	adds	r3, #1
 80020b8:	4a4f      	ldr	r2, [pc, #316]	; (80021f8 <HAL_DFSDM_ChannelInit+0x178>)
 80020ba:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80020bc:	4b4e      	ldr	r3, [pc, #312]	; (80021f8 <HAL_DFSDM_ChannelInit+0x178>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d125      	bne.n	8002110 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80020c4:	4b4d      	ldr	r3, [pc, #308]	; (80021fc <HAL_DFSDM_ChannelInit+0x17c>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a4c      	ldr	r2, [pc, #304]	; (80021fc <HAL_DFSDM_ChannelInit+0x17c>)
 80020ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80020ce:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80020d0:	4b4a      	ldr	r3, [pc, #296]	; (80021fc <HAL_DFSDM_ChannelInit+0x17c>)
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	4948      	ldr	r1, [pc, #288]	; (80021fc <HAL_DFSDM_ChannelInit+0x17c>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80020de:	4b47      	ldr	r3, [pc, #284]	; (80021fc <HAL_DFSDM_ChannelInit+0x17c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a46      	ldr	r2, [pc, #280]	; (80021fc <HAL_DFSDM_ChannelInit+0x17c>)
 80020e4:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80020e8:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	791b      	ldrb	r3, [r3, #4]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d108      	bne.n	8002104 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80020f2:	4b42      	ldr	r3, [pc, #264]	; (80021fc <HAL_DFSDM_ChannelInit+0x17c>)
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	3b01      	subs	r3, #1
 80020fc:	041b      	lsls	r3, r3, #16
 80020fe:	493f      	ldr	r1, [pc, #252]	; (80021fc <HAL_DFSDM_ChannelInit+0x17c>)
 8002100:	4313      	orrs	r3, r2
 8002102:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002104:	4b3d      	ldr	r3, [pc, #244]	; (80021fc <HAL_DFSDM_ChannelInit+0x17c>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a3c      	ldr	r2, [pc, #240]	; (80021fc <HAL_DFSDM_ChannelInit+0x17c>)
 800210a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800210e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800211e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	6819      	ldr	r1, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800212e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002134:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	430a      	orrs	r2, r1
 800213c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 020f 	bic.w	r2, r2, #15
 800214c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	6819      	ldr	r1, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800215c:	431a      	orrs	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	430a      	orrs	r2, r1
 8002164:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002174:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	6899      	ldr	r1, [r3, #8]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002184:	3b01      	subs	r3, #1
 8002186:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002188:	431a      	orrs	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	430a      	orrs	r2, r1
 8002190:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	685a      	ldr	r2, [r3, #4]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f002 0207 	and.w	r2, r2, #7
 80021a0:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	6859      	ldr	r1, [r3, #4]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ac:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80021b4:	431a      	orrs	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	430a      	orrs	r2, r1
 80021bc:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021cc:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2201      	movs	r2, #1
 80021d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f000 f810 	bl	8002200 <DFSDM_GetChannelFromInstance>
 80021e0:	4601      	mov	r1, r0
 80021e2:	4a04      	ldr	r2, [pc, #16]	; (80021f4 <HAL_DFSDM_ChannelInit+0x174>)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	200001a0 	.word	0x200001a0
 80021f8:	2000019c 	.word	0x2000019c
 80021fc:	40016000 	.word	0x40016000

08002200 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a20      	ldr	r2, [pc, #128]	; (800228c <DFSDM_GetChannelFromInstance+0x8c>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d102      	bne.n	8002216 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002210:	2300      	movs	r3, #0
 8002212:	60fb      	str	r3, [r7, #12]
 8002214:	e032      	b.n	800227c <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel1)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a1d      	ldr	r2, [pc, #116]	; (8002290 <DFSDM_GetChannelFromInstance+0x90>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d102      	bne.n	8002224 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800221e:	2301      	movs	r3, #1
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	e02b      	b.n	800227c <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel2)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a1b      	ldr	r2, [pc, #108]	; (8002294 <DFSDM_GetChannelFromInstance+0x94>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d102      	bne.n	8002232 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800222c:	2302      	movs	r3, #2
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	e024      	b.n	800227c <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel3)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a18      	ldr	r2, [pc, #96]	; (8002298 <DFSDM_GetChannelFromInstance+0x98>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d102      	bne.n	8002240 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 800223a:	2303      	movs	r3, #3
 800223c:	60fb      	str	r3, [r7, #12]
 800223e:	e01d      	b.n	800227c <DFSDM_GetChannelFromInstance+0x7c>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a16      	ldr	r2, [pc, #88]	; (800229c <DFSDM_GetChannelFromInstance+0x9c>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d102      	bne.n	800224e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 8002248:	2304      	movs	r3, #4
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	e016      	b.n	800227c <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel5)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a13      	ldr	r2, [pc, #76]	; (80022a0 <DFSDM_GetChannelFromInstance+0xa0>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d102      	bne.n	800225c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 8002256:	2305      	movs	r3, #5
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	e00f      	b.n	800227c <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel6)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a11      	ldr	r2, [pc, #68]	; (80022a4 <DFSDM_GetChannelFromInstance+0xa4>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d102      	bne.n	800226a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 8002264:	2306      	movs	r3, #6
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	e008      	b.n	800227c <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel7)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a0e      	ldr	r2, [pc, #56]	; (80022a8 <DFSDM_GetChannelFromInstance+0xa8>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d102      	bne.n	8002278 <DFSDM_GetChannelFromInstance+0x78>
  {
    channel = 7;
 8002272:	2307      	movs	r3, #7
 8002274:	60fb      	str	r3, [r7, #12]
 8002276:	e001      	b.n	800227c <DFSDM_GetChannelFromInstance+0x7c>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    channel = 0;
 8002278:	2300      	movs	r3, #0
 800227a:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800227c:	68fb      	ldr	r3, [r7, #12]
}
 800227e:	4618      	mov	r0, r3
 8002280:	3714      	adds	r7, #20
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	40016000 	.word	0x40016000
 8002290:	40016020 	.word	0x40016020
 8002294:	40016040 	.word	0x40016040
 8002298:	40016060 	.word	0x40016060
 800229c:	40016080 	.word	0x40016080
 80022a0:	400160a0 	.word	0x400160a0
 80022a4:	400160c0 	.word	0x400160c0
 80022a8:	400160e0 	.word	0x400160e0

080022ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b087      	sub	sp, #28
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022b6:	2300      	movs	r3, #0
 80022b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022ba:	e17f      	b.n	80025bc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	2101      	movs	r1, #1
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	fa01 f303 	lsl.w	r3, r1, r3
 80022c8:	4013      	ands	r3, r2
 80022ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f000 8171 	beq.w	80025b6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d003      	beq.n	80022e4 <HAL_GPIO_Init+0x38>
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	2b12      	cmp	r3, #18
 80022e2:	d123      	bne.n	800232c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	08da      	lsrs	r2, r3, #3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	3208      	adds	r2, #8
 80022ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	f003 0307 	and.w	r3, r3, #7
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	220f      	movs	r2, #15
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	43db      	mvns	r3, r3
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	4013      	ands	r3, r2
 8002306:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	691a      	ldr	r2, [r3, #16]
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	f003 0307 	and.w	r3, r3, #7
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	4313      	orrs	r3, r2
 800231c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	08da      	lsrs	r2, r3, #3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	3208      	adds	r2, #8
 8002326:	6939      	ldr	r1, [r7, #16]
 8002328:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	2203      	movs	r2, #3
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	43db      	mvns	r3, r3
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	4013      	ands	r3, r2
 8002342:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f003 0203 	and.w	r2, r3, #3
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	4313      	orrs	r3, r2
 8002358:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d00b      	beq.n	8002380 <HAL_GPIO_Init+0xd4>
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	2b02      	cmp	r3, #2
 800236e:	d007      	beq.n	8002380 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002374:	2b11      	cmp	r3, #17
 8002376:	d003      	beq.n	8002380 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	2b12      	cmp	r3, #18
 800237e:	d130      	bne.n	80023e2 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	2203      	movs	r2, #3
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	43db      	mvns	r3, r3
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	4013      	ands	r3, r2
 8002396:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	68da      	ldr	r2, [r3, #12]
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023b6:	2201      	movs	r2, #1
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	43db      	mvns	r3, r3
 80023c0:	693a      	ldr	r2, [r7, #16]
 80023c2:	4013      	ands	r3, r2
 80023c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	091b      	lsrs	r3, r3, #4
 80023cc:	f003 0201 	and.w	r2, r3, #1
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	4313      	orrs	r3, r2
 80023da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f003 0303 	and.w	r3, r3, #3
 80023ea:	2b03      	cmp	r3, #3
 80023ec:	d118      	bne.n	8002420 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80023f4:	2201      	movs	r2, #1
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	43db      	mvns	r3, r3
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	4013      	ands	r3, r2
 8002402:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	08db      	lsrs	r3, r3, #3
 800240a:	f003 0201 	and.w	r2, r3, #1
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	4313      	orrs	r3, r2
 8002418:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	2203      	movs	r2, #3
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	43db      	mvns	r3, r3
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	4013      	ands	r3, r2
 8002436:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	4313      	orrs	r3, r2
 8002448:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002458:	2b00      	cmp	r3, #0
 800245a:	f000 80ac 	beq.w	80025b6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800245e:	4b5e      	ldr	r3, [pc, #376]	; (80025d8 <HAL_GPIO_Init+0x32c>)
 8002460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002462:	4a5d      	ldr	r2, [pc, #372]	; (80025d8 <HAL_GPIO_Init+0x32c>)
 8002464:	f043 0301 	orr.w	r3, r3, #1
 8002468:	6613      	str	r3, [r2, #96]	; 0x60
 800246a:	4b5b      	ldr	r3, [pc, #364]	; (80025d8 <HAL_GPIO_Init+0x32c>)
 800246c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	60bb      	str	r3, [r7, #8]
 8002474:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002476:	4a59      	ldr	r2, [pc, #356]	; (80025dc <HAL_GPIO_Init+0x330>)
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	089b      	lsrs	r3, r3, #2
 800247c:	3302      	adds	r3, #2
 800247e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002482:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	f003 0303 	and.w	r3, r3, #3
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	220f      	movs	r2, #15
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	43db      	mvns	r3, r3
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	4013      	ands	r3, r2
 8002498:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80024a0:	d025      	beq.n	80024ee <HAL_GPIO_Init+0x242>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a4e      	ldr	r2, [pc, #312]	; (80025e0 <HAL_GPIO_Init+0x334>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d01f      	beq.n	80024ea <HAL_GPIO_Init+0x23e>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a4d      	ldr	r2, [pc, #308]	; (80025e4 <HAL_GPIO_Init+0x338>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d019      	beq.n	80024e6 <HAL_GPIO_Init+0x23a>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a4c      	ldr	r2, [pc, #304]	; (80025e8 <HAL_GPIO_Init+0x33c>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d013      	beq.n	80024e2 <HAL_GPIO_Init+0x236>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a4b      	ldr	r2, [pc, #300]	; (80025ec <HAL_GPIO_Init+0x340>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d00d      	beq.n	80024de <HAL_GPIO_Init+0x232>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a4a      	ldr	r2, [pc, #296]	; (80025f0 <HAL_GPIO_Init+0x344>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d007      	beq.n	80024da <HAL_GPIO_Init+0x22e>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a49      	ldr	r2, [pc, #292]	; (80025f4 <HAL_GPIO_Init+0x348>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d101      	bne.n	80024d6 <HAL_GPIO_Init+0x22a>
 80024d2:	2306      	movs	r3, #6
 80024d4:	e00c      	b.n	80024f0 <HAL_GPIO_Init+0x244>
 80024d6:	2307      	movs	r3, #7
 80024d8:	e00a      	b.n	80024f0 <HAL_GPIO_Init+0x244>
 80024da:	2305      	movs	r3, #5
 80024dc:	e008      	b.n	80024f0 <HAL_GPIO_Init+0x244>
 80024de:	2304      	movs	r3, #4
 80024e0:	e006      	b.n	80024f0 <HAL_GPIO_Init+0x244>
 80024e2:	2303      	movs	r3, #3
 80024e4:	e004      	b.n	80024f0 <HAL_GPIO_Init+0x244>
 80024e6:	2302      	movs	r3, #2
 80024e8:	e002      	b.n	80024f0 <HAL_GPIO_Init+0x244>
 80024ea:	2301      	movs	r3, #1
 80024ec:	e000      	b.n	80024f0 <HAL_GPIO_Init+0x244>
 80024ee:	2300      	movs	r3, #0
 80024f0:	697a      	ldr	r2, [r7, #20]
 80024f2:	f002 0203 	and.w	r2, r2, #3
 80024f6:	0092      	lsls	r2, r2, #2
 80024f8:	4093      	lsls	r3, r2
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002500:	4936      	ldr	r1, [pc, #216]	; (80025dc <HAL_GPIO_Init+0x330>)
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	089b      	lsrs	r3, r3, #2
 8002506:	3302      	adds	r3, #2
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800250e:	4b3a      	ldr	r3, [pc, #232]	; (80025f8 <HAL_GPIO_Init+0x34c>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	43db      	mvns	r3, r3
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	4013      	ands	r3, r2
 800251c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	4313      	orrs	r3, r2
 8002530:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002532:	4a31      	ldr	r2, [pc, #196]	; (80025f8 <HAL_GPIO_Init+0x34c>)
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002538:	4b2f      	ldr	r3, [pc, #188]	; (80025f8 <HAL_GPIO_Init+0x34c>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	43db      	mvns	r3, r3
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	4013      	ands	r3, r2
 8002546:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d003      	beq.n	800255c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	4313      	orrs	r3, r2
 800255a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800255c:	4a26      	ldr	r2, [pc, #152]	; (80025f8 <HAL_GPIO_Init+0x34c>)
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002562:	4b25      	ldr	r3, [pc, #148]	; (80025f8 <HAL_GPIO_Init+0x34c>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	43db      	mvns	r3, r3
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	4013      	ands	r3, r2
 8002570:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d003      	beq.n	8002586 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	4313      	orrs	r3, r2
 8002584:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002586:	4a1c      	ldr	r2, [pc, #112]	; (80025f8 <HAL_GPIO_Init+0x34c>)
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800258c:	4b1a      	ldr	r3, [pc, #104]	; (80025f8 <HAL_GPIO_Init+0x34c>)
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	43db      	mvns	r3, r3
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	4013      	ands	r3, r2
 800259a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d003      	beq.n	80025b0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80025b0:	4a11      	ldr	r2, [pc, #68]	; (80025f8 <HAL_GPIO_Init+0x34c>)
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	3301      	adds	r3, #1
 80025ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	fa22 f303 	lsr.w	r3, r2, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	f47f ae78 	bne.w	80022bc <HAL_GPIO_Init+0x10>
  }
}
 80025cc:	bf00      	nop
 80025ce:	371c      	adds	r7, #28
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	40021000 	.word	0x40021000
 80025dc:	40010000 	.word	0x40010000
 80025e0:	48000400 	.word	0x48000400
 80025e4:	48000800 	.word	0x48000800
 80025e8:	48000c00 	.word	0x48000c00
 80025ec:	48001000 	.word	0x48001000
 80025f0:	48001400 	.word	0x48001400
 80025f4:	48001800 	.word	0x48001800
 80025f8:	40010400 	.word	0x40010400

080025fc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b087      	sub	sp, #28
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002606:	2300      	movs	r3, #0
 8002608:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800260a:	e0cd      	b.n	80027a8 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800260c:	2201      	movs	r2, #1
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	4013      	ands	r3, r2
 8002618:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	2b00      	cmp	r3, #0
 800261e:	f000 80c0 	beq.w	80027a2 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002622:	4a68      	ldr	r2, [pc, #416]	; (80027c4 <HAL_GPIO_DeInit+0x1c8>)
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	089b      	lsrs	r3, r3, #2
 8002628:	3302      	adds	r3, #2
 800262a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800262e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	f003 0303 	and.w	r3, r3, #3
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	220f      	movs	r2, #15
 800263a:	fa02 f303 	lsl.w	r3, r2, r3
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	4013      	ands	r3, r2
 8002642:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800264a:	d025      	beq.n	8002698 <HAL_GPIO_DeInit+0x9c>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4a5e      	ldr	r2, [pc, #376]	; (80027c8 <HAL_GPIO_DeInit+0x1cc>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d01f      	beq.n	8002694 <HAL_GPIO_DeInit+0x98>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4a5d      	ldr	r2, [pc, #372]	; (80027cc <HAL_GPIO_DeInit+0x1d0>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d019      	beq.n	8002690 <HAL_GPIO_DeInit+0x94>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a5c      	ldr	r2, [pc, #368]	; (80027d0 <HAL_GPIO_DeInit+0x1d4>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d013      	beq.n	800268c <HAL_GPIO_DeInit+0x90>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a5b      	ldr	r2, [pc, #364]	; (80027d4 <HAL_GPIO_DeInit+0x1d8>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d00d      	beq.n	8002688 <HAL_GPIO_DeInit+0x8c>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a5a      	ldr	r2, [pc, #360]	; (80027d8 <HAL_GPIO_DeInit+0x1dc>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d007      	beq.n	8002684 <HAL_GPIO_DeInit+0x88>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a59      	ldr	r2, [pc, #356]	; (80027dc <HAL_GPIO_DeInit+0x1e0>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d101      	bne.n	8002680 <HAL_GPIO_DeInit+0x84>
 800267c:	2306      	movs	r3, #6
 800267e:	e00c      	b.n	800269a <HAL_GPIO_DeInit+0x9e>
 8002680:	2307      	movs	r3, #7
 8002682:	e00a      	b.n	800269a <HAL_GPIO_DeInit+0x9e>
 8002684:	2305      	movs	r3, #5
 8002686:	e008      	b.n	800269a <HAL_GPIO_DeInit+0x9e>
 8002688:	2304      	movs	r3, #4
 800268a:	e006      	b.n	800269a <HAL_GPIO_DeInit+0x9e>
 800268c:	2303      	movs	r3, #3
 800268e:	e004      	b.n	800269a <HAL_GPIO_DeInit+0x9e>
 8002690:	2302      	movs	r3, #2
 8002692:	e002      	b.n	800269a <HAL_GPIO_DeInit+0x9e>
 8002694:	2301      	movs	r3, #1
 8002696:	e000      	b.n	800269a <HAL_GPIO_DeInit+0x9e>
 8002698:	2300      	movs	r3, #0
 800269a:	697a      	ldr	r2, [r7, #20]
 800269c:	f002 0203 	and.w	r2, r2, #3
 80026a0:	0092      	lsls	r2, r2, #2
 80026a2:	4093      	lsls	r3, r2
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d132      	bne.n	8002710 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80026aa:	4b4d      	ldr	r3, [pc, #308]	; (80027e0 <HAL_GPIO_DeInit+0x1e4>)
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	43db      	mvns	r3, r3
 80026b2:	494b      	ldr	r1, [pc, #300]	; (80027e0 <HAL_GPIO_DeInit+0x1e4>)
 80026b4:	4013      	ands	r3, r2
 80026b6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80026b8:	4b49      	ldr	r3, [pc, #292]	; (80027e0 <HAL_GPIO_DeInit+0x1e4>)
 80026ba:	685a      	ldr	r2, [r3, #4]
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	43db      	mvns	r3, r3
 80026c0:	4947      	ldr	r1, [pc, #284]	; (80027e0 <HAL_GPIO_DeInit+0x1e4>)
 80026c2:	4013      	ands	r3, r2
 80026c4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80026c6:	4b46      	ldr	r3, [pc, #280]	; (80027e0 <HAL_GPIO_DeInit+0x1e4>)
 80026c8:	689a      	ldr	r2, [r3, #8]
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	43db      	mvns	r3, r3
 80026ce:	4944      	ldr	r1, [pc, #272]	; (80027e0 <HAL_GPIO_DeInit+0x1e4>)
 80026d0:	4013      	ands	r3, r2
 80026d2:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 80026d4:	4b42      	ldr	r3, [pc, #264]	; (80027e0 <HAL_GPIO_DeInit+0x1e4>)
 80026d6:	68da      	ldr	r2, [r3, #12]
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	43db      	mvns	r3, r3
 80026dc:	4940      	ldr	r1, [pc, #256]	; (80027e0 <HAL_GPIO_DeInit+0x1e4>)
 80026de:	4013      	ands	r3, r2
 80026e0:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	f003 0303 	and.w	r3, r3, #3
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	220f      	movs	r2, #15
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80026f2:	4a34      	ldr	r2, [pc, #208]	; (80027c4 <HAL_GPIO_DeInit+0x1c8>)
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	089b      	lsrs	r3, r3, #2
 80026f8:	3302      	adds	r3, #2
 80026fa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	43da      	mvns	r2, r3
 8002702:	4830      	ldr	r0, [pc, #192]	; (80027c4 <HAL_GPIO_DeInit+0x1c8>)
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	089b      	lsrs	r3, r3, #2
 8002708:	400a      	ands	r2, r1
 800270a:	3302      	adds	r3, #2
 800270c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	2103      	movs	r1, #3
 800271a:	fa01 f303 	lsl.w	r3, r1, r3
 800271e:	431a      	orrs	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	08da      	lsrs	r2, r3, #3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3208      	adds	r2, #8
 800272c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	f003 0307 	and.w	r3, r3, #7
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	220f      	movs	r2, #15
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	43db      	mvns	r3, r3
 8002740:	697a      	ldr	r2, [r7, #20]
 8002742:	08d2      	lsrs	r2, r2, #3
 8002744:	4019      	ands	r1, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	3208      	adds	r2, #8
 800274a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	689a      	ldr	r2, [r3, #8]
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	2103      	movs	r1, #3
 8002758:	fa01 f303 	lsl.w	r3, r1, r3
 800275c:	43db      	mvns	r3, r3
 800275e:	401a      	ands	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685a      	ldr	r2, [r3, #4]
 8002768:	2101      	movs	r1, #1
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	fa01 f303 	lsl.w	r3, r1, r3
 8002770:	43db      	mvns	r3, r3
 8002772:	401a      	ands	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	68da      	ldr	r2, [r3, #12]
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	2103      	movs	r1, #3
 8002782:	fa01 f303 	lsl.w	r3, r1, r3
 8002786:	43db      	mvns	r3, r3
 8002788:	401a      	ands	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002792:	2101      	movs	r1, #1
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	fa01 f303 	lsl.w	r3, r1, r3
 800279a:	43db      	mvns	r3, r3
 800279c:	401a      	ands	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	3301      	adds	r3, #1
 80027a6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	fa22 f303 	lsr.w	r3, r2, r3
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f47f af2b 	bne.w	800260c <HAL_GPIO_DeInit+0x10>
  }
}
 80027b6:	bf00      	nop
 80027b8:	371c      	adds	r7, #28
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	40010000 	.word	0x40010000
 80027c8:	48000400 	.word	0x48000400
 80027cc:	48000800 	.word	0x48000800
 80027d0:	48000c00 	.word	0x48000c00
 80027d4:	48001000 	.word	0x48001000
 80027d8:	48001400 	.word	0x48001400
 80027dc:	48001800 	.word	0x48001800
 80027e0:	40010400 	.word	0x40010400

080027e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	460b      	mov	r3, r1
 80027ee:	807b      	strh	r3, [r7, #2]
 80027f0:	4613      	mov	r3, r2
 80027f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027f4:	787b      	ldrb	r3, [r7, #1]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027fa:	887a      	ldrh	r2, [r7, #2]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002800:	e002      	b.n	8002808 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002802:	887a      	ldrh	r2, [r7, #2]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	4603      	mov	r3, r0
 800281c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800281e:	4b08      	ldr	r3, [pc, #32]	; (8002840 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002820:	695a      	ldr	r2, [r3, #20]
 8002822:	88fb      	ldrh	r3, [r7, #6]
 8002824:	4013      	ands	r3, r2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d006      	beq.n	8002838 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800282a:	4a05      	ldr	r2, [pc, #20]	; (8002840 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800282c:	88fb      	ldrh	r3, [r7, #6]
 800282e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002830:	88fb      	ldrh	r3, [r7, #6]
 8002832:	4618      	mov	r0, r3
 8002834:	f000 f806 	bl	8002844 <HAL_GPIO_EXTI_Callback>
  }
}
 8002838:	bf00      	nop
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	40010400 	.word	0x40010400

08002844 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	4603      	mov	r3, r0
 800284c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800284e:	bf00      	nop
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr

0800285a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b082      	sub	sp, #8
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d101      	bne.n	800286c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e081      	b.n	8002970 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002872:	b2db      	uxtb	r3, r3
 8002874:	2b00      	cmp	r3, #0
 8002876:	d106      	bne.n	8002886 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f7fe fd6b 	bl	800135c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2224      	movs	r2, #36	; 0x24
 800288a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f022 0201 	bic.w	r2, r2, #1
 800289c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685a      	ldr	r2, [r3, #4]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028aa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689a      	ldr	r2, [r3, #8]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028ba:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d107      	bne.n	80028d4 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689a      	ldr	r2, [r3, #8]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028d0:	609a      	str	r2, [r3, #8]
 80028d2:	e006      	b.n	80028e2 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80028e0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d104      	bne.n	80028f4 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028f2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	6812      	ldr	r2, [r2, #0]
 80028fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002902:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002906:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68da      	ldr	r2, [r3, #12]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002916:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	691a      	ldr	r2, [r3, #16]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	695b      	ldr	r3, [r3, #20]
 8002920:	ea42 0103 	orr.w	r1, r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	021a      	lsls	r2, r3, #8
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	430a      	orrs	r2, r1
 8002930:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69d9      	ldr	r1, [r3, #28]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a1a      	ldr	r2, [r3, #32]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	430a      	orrs	r2, r1
 8002940:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f042 0201 	orr.w	r2, r2, #1
 8002950:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2220      	movs	r2, #32
 800295c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e021      	b.n	80029ce <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2224      	movs	r2, #36	; 0x24
 800298e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 0201 	bic.w	r2, r2, #1
 80029a0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7fe fd1e 	bl	80013e4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
	...

080029d8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b088      	sub	sp, #32
 80029dc:	af02      	add	r7, sp, #8
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	4608      	mov	r0, r1
 80029e2:	4611      	mov	r1, r2
 80029e4:	461a      	mov	r2, r3
 80029e6:	4603      	mov	r3, r0
 80029e8:	817b      	strh	r3, [r7, #10]
 80029ea:	460b      	mov	r3, r1
 80029ec:	813b      	strh	r3, [r7, #8]
 80029ee:	4613      	mov	r3, r2
 80029f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b20      	cmp	r3, #32
 80029fc:	f040 80f9 	bne.w	8002bf2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a00:	6a3b      	ldr	r3, [r7, #32]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d002      	beq.n	8002a0c <HAL_I2C_Mem_Write+0x34>
 8002a06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d105      	bne.n	8002a18 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a12:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e0ed      	b.n	8002bf4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d101      	bne.n	8002a26 <HAL_I2C_Mem_Write+0x4e>
 8002a22:	2302      	movs	r3, #2
 8002a24:	e0e6      	b.n	8002bf4 <HAL_I2C_Mem_Write+0x21c>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a2e:	f7ff fa17 	bl	8001e60 <HAL_GetTick>
 8002a32:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	9300      	str	r3, [sp, #0]
 8002a38:	2319      	movs	r3, #25
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	f000 fac3 	bl	8002fcc <I2C_WaitOnFlagUntilTimeout>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e0d1      	b.n	8002bf4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2221      	movs	r2, #33	; 0x21
 8002a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2240      	movs	r2, #64	; 0x40
 8002a5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6a3a      	ldr	r2, [r7, #32]
 8002a6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a78:	88f8      	ldrh	r0, [r7, #6]
 8002a7a:	893a      	ldrh	r2, [r7, #8]
 8002a7c:	8979      	ldrh	r1, [r7, #10]
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	9301      	str	r3, [sp, #4]
 8002a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a84:	9300      	str	r3, [sp, #0]
 8002a86:	4603      	mov	r3, r0
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	f000 f9d3 	bl	8002e34 <I2C_RequestMemoryWrite>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d005      	beq.n	8002aa0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e0a9      	b.n	8002bf4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	2bff      	cmp	r3, #255	; 0xff
 8002aa8:	d90e      	bls.n	8002ac8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	22ff      	movs	r2, #255	; 0xff
 8002aae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab4:	b2da      	uxtb	r2, r3
 8002ab6:	8979      	ldrh	r1, [r7, #10]
 8002ab8:	2300      	movs	r3, #0
 8002aba:	9300      	str	r3, [sp, #0]
 8002abc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	f000 fba5 	bl	8003210 <I2C_TransferConfig>
 8002ac6:	e00f      	b.n	8002ae8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad6:	b2da      	uxtb	r2, r3
 8002ad8:	8979      	ldrh	r1, [r7, #10]
 8002ada:	2300      	movs	r3, #0
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f000 fb94 	bl	8003210 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ae8:	697a      	ldr	r2, [r7, #20]
 8002aea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f000 faad 	bl	800304c <I2C_WaitOnTXISFlagUntilTimeout>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e07b      	b.n	8002bf4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b00:	781a      	ldrb	r2, [r3, #0]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0c:	1c5a      	adds	r2, r3, #1
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b24:	3b01      	subs	r3, #1
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d034      	beq.n	8002ba0 <HAL_I2C_Mem_Write+0x1c8>
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d130      	bne.n	8002ba0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	9300      	str	r3, [sp, #0]
 8002b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b44:	2200      	movs	r2, #0
 8002b46:	2180      	movs	r1, #128	; 0x80
 8002b48:	68f8      	ldr	r0, [r7, #12]
 8002b4a:	f000 fa3f 	bl	8002fcc <I2C_WaitOnFlagUntilTimeout>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e04d      	b.n	8002bf4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	2bff      	cmp	r3, #255	; 0xff
 8002b60:	d90e      	bls.n	8002b80 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	22ff      	movs	r2, #255	; 0xff
 8002b66:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b6c:	b2da      	uxtb	r2, r3
 8002b6e:	8979      	ldrh	r1, [r7, #10]
 8002b70:	2300      	movs	r3, #0
 8002b72:	9300      	str	r3, [sp, #0]
 8002b74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b78:	68f8      	ldr	r0, [r7, #12]
 8002b7a:	f000 fb49 	bl	8003210 <I2C_TransferConfig>
 8002b7e:	e00f      	b.n	8002ba0 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b8e:	b2da      	uxtb	r2, r3
 8002b90:	8979      	ldrh	r1, [r7, #10]
 8002b92:	2300      	movs	r3, #0
 8002b94:	9300      	str	r3, [sp, #0]
 8002b96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f000 fb38 	bl	8003210 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d19e      	bne.n	8002ae8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bae:	68f8      	ldr	r0, [r7, #12]
 8002bb0:	f000 fa8c 	bl	80030cc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e01a      	b.n	8002bf4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2220      	movs	r2, #32
 8002bc4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	6859      	ldr	r1, [r3, #4]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	4b0a      	ldr	r3, [pc, #40]	; (8002bfc <HAL_I2C_Mem_Write+0x224>)
 8002bd2:	400b      	ands	r3, r1
 8002bd4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2220      	movs	r2, #32
 8002bda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	e000      	b.n	8002bf4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002bf2:	2302      	movs	r3, #2
  }
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3718      	adds	r7, #24
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	fe00e800 	.word	0xfe00e800

08002c00 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b088      	sub	sp, #32
 8002c04:	af02      	add	r7, sp, #8
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	4608      	mov	r0, r1
 8002c0a:	4611      	mov	r1, r2
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	4603      	mov	r3, r0
 8002c10:	817b      	strh	r3, [r7, #10]
 8002c12:	460b      	mov	r3, r1
 8002c14:	813b      	strh	r3, [r7, #8]
 8002c16:	4613      	mov	r3, r2
 8002c18:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b20      	cmp	r3, #32
 8002c24:	f040 80fd 	bne.w	8002e22 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c28:	6a3b      	ldr	r3, [r7, #32]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d002      	beq.n	8002c34 <HAL_I2C_Mem_Read+0x34>
 8002c2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d105      	bne.n	8002c40 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c3a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e0f1      	b.n	8002e24 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d101      	bne.n	8002c4e <HAL_I2C_Mem_Read+0x4e>
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	e0ea      	b.n	8002e24 <HAL_I2C_Mem_Read+0x224>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c56:	f7ff f903 	bl	8001e60 <HAL_GetTick>
 8002c5a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	9300      	str	r3, [sp, #0]
 8002c60:	2319      	movs	r3, #25
 8002c62:	2201      	movs	r2, #1
 8002c64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c68:	68f8      	ldr	r0, [r7, #12]
 8002c6a:	f000 f9af 	bl	8002fcc <I2C_WaitOnFlagUntilTimeout>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e0d5      	b.n	8002e24 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2222      	movs	r2, #34	; 0x22
 8002c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2240      	movs	r2, #64	; 0x40
 8002c84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6a3a      	ldr	r2, [r7, #32]
 8002c92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ca0:	88f8      	ldrh	r0, [r7, #6]
 8002ca2:	893a      	ldrh	r2, [r7, #8]
 8002ca4:	8979      	ldrh	r1, [r7, #10]
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	9301      	str	r3, [sp, #4]
 8002caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cac:	9300      	str	r3, [sp, #0]
 8002cae:	4603      	mov	r3, r0
 8002cb0:	68f8      	ldr	r0, [r7, #12]
 8002cb2:	f000 f913 	bl	8002edc <I2C_RequestMemoryRead>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d005      	beq.n	8002cc8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e0ad      	b.n	8002e24 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	2bff      	cmp	r3, #255	; 0xff
 8002cd0:	d90e      	bls.n	8002cf0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	22ff      	movs	r2, #255	; 0xff
 8002cd6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cdc:	b2da      	uxtb	r2, r3
 8002cde:	8979      	ldrh	r1, [r7, #10]
 8002ce0:	4b52      	ldr	r3, [pc, #328]	; (8002e2c <HAL_I2C_Mem_Read+0x22c>)
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f000 fa91 	bl	8003210 <I2C_TransferConfig>
 8002cee:	e00f      	b.n	8002d10 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cfe:	b2da      	uxtb	r2, r3
 8002d00:	8979      	ldrh	r1, [r7, #10]
 8002d02:	4b4a      	ldr	r3, [pc, #296]	; (8002e2c <HAL_I2C_Mem_Read+0x22c>)
 8002d04:	9300      	str	r3, [sp, #0]
 8002d06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d0a:	68f8      	ldr	r0, [r7, #12]
 8002d0c:	f000 fa80 	bl	8003210 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	9300      	str	r3, [sp, #0]
 8002d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d16:	2200      	movs	r2, #0
 8002d18:	2104      	movs	r1, #4
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f000 f956 	bl	8002fcc <I2C_WaitOnFlagUntilTimeout>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e07c      	b.n	8002e24 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d34:	b2d2      	uxtb	r2, r2
 8002d36:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3c:	1c5a      	adds	r2, r3, #1
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d46:	3b01      	subs	r3, #1
 8002d48:	b29a      	uxth	r2, r3
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	3b01      	subs	r3, #1
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d034      	beq.n	8002dd0 <HAL_I2C_Mem_Read+0x1d0>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d130      	bne.n	8002dd0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	9300      	str	r3, [sp, #0]
 8002d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d74:	2200      	movs	r2, #0
 8002d76:	2180      	movs	r1, #128	; 0x80
 8002d78:	68f8      	ldr	r0, [r7, #12]
 8002d7a:	f000 f927 	bl	8002fcc <I2C_WaitOnFlagUntilTimeout>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d001      	beq.n	8002d88 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e04d      	b.n	8002e24 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	2bff      	cmp	r3, #255	; 0xff
 8002d90:	d90e      	bls.n	8002db0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	22ff      	movs	r2, #255	; 0xff
 8002d96:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d9c:	b2da      	uxtb	r2, r3
 8002d9e:	8979      	ldrh	r1, [r7, #10]
 8002da0:	2300      	movs	r3, #0
 8002da2:	9300      	str	r3, [sp, #0]
 8002da4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002da8:	68f8      	ldr	r0, [r7, #12]
 8002daa:	f000 fa31 	bl	8003210 <I2C_TransferConfig>
 8002dae:	e00f      	b.n	8002dd0 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db4:	b29a      	uxth	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dbe:	b2da      	uxtb	r2, r3
 8002dc0:	8979      	ldrh	r1, [r7, #10]
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	9300      	str	r3, [sp, #0]
 8002dc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dca:	68f8      	ldr	r0, [r7, #12]
 8002dcc:	f000 fa20 	bl	8003210 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d19a      	bne.n	8002d10 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dda:	697a      	ldr	r2, [r7, #20]
 8002ddc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f000 f974 	bl	80030cc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e01a      	b.n	8002e24 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2220      	movs	r2, #32
 8002df4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	6859      	ldr	r1, [r3, #4]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	4b0b      	ldr	r3, [pc, #44]	; (8002e30 <HAL_I2C_Mem_Read+0x230>)
 8002e02:	400b      	ands	r3, r1
 8002e04:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2220      	movs	r2, #32
 8002e0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	e000      	b.n	8002e24 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002e22:	2302      	movs	r3, #2
  }
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3718      	adds	r7, #24
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	80002400 	.word	0x80002400
 8002e30:	fe00e800 	.word	0xfe00e800

08002e34 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af02      	add	r7, sp, #8
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	4608      	mov	r0, r1
 8002e3e:	4611      	mov	r1, r2
 8002e40:	461a      	mov	r2, r3
 8002e42:	4603      	mov	r3, r0
 8002e44:	817b      	strh	r3, [r7, #10]
 8002e46:	460b      	mov	r3, r1
 8002e48:	813b      	strh	r3, [r7, #8]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002e4e:	88fb      	ldrh	r3, [r7, #6]
 8002e50:	b2da      	uxtb	r2, r3
 8002e52:	8979      	ldrh	r1, [r7, #10]
 8002e54:	4b20      	ldr	r3, [pc, #128]	; (8002ed8 <I2C_RequestMemoryWrite+0xa4>)
 8002e56:	9300      	str	r3, [sp, #0]
 8002e58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f000 f9d7 	bl	8003210 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e62:	69fa      	ldr	r2, [r7, #28]
 8002e64:	69b9      	ldr	r1, [r7, #24]
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f000 f8f0 	bl	800304c <I2C_WaitOnTXISFlagUntilTimeout>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e02c      	b.n	8002ed0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e76:	88fb      	ldrh	r3, [r7, #6]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d105      	bne.n	8002e88 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e7c:	893b      	ldrh	r3, [r7, #8]
 8002e7e:	b2da      	uxtb	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	629a      	str	r2, [r3, #40]	; 0x28
 8002e86:	e015      	b.n	8002eb4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002e88:	893b      	ldrh	r3, [r7, #8]
 8002e8a:	0a1b      	lsrs	r3, r3, #8
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	b2da      	uxtb	r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e96:	69fa      	ldr	r2, [r7, #28]
 8002e98:	69b9      	ldr	r1, [r7, #24]
 8002e9a:	68f8      	ldr	r0, [r7, #12]
 8002e9c:	f000 f8d6 	bl	800304c <I2C_WaitOnTXISFlagUntilTimeout>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e012      	b.n	8002ed0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002eaa:	893b      	ldrh	r3, [r7, #8]
 8002eac:	b2da      	uxtb	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	9300      	str	r3, [sp, #0]
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	2180      	movs	r1, #128	; 0x80
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f000 f884 	bl	8002fcc <I2C_WaitOnFlagUntilTimeout>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e000      	b.n	8002ed0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	80002000 	.word	0x80002000

08002edc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af02      	add	r7, sp, #8
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	4608      	mov	r0, r1
 8002ee6:	4611      	mov	r1, r2
 8002ee8:	461a      	mov	r2, r3
 8002eea:	4603      	mov	r3, r0
 8002eec:	817b      	strh	r3, [r7, #10]
 8002eee:	460b      	mov	r3, r1
 8002ef0:	813b      	strh	r3, [r7, #8]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002ef6:	88fb      	ldrh	r3, [r7, #6]
 8002ef8:	b2da      	uxtb	r2, r3
 8002efa:	8979      	ldrh	r1, [r7, #10]
 8002efc:	4b20      	ldr	r3, [pc, #128]	; (8002f80 <I2C_RequestMemoryRead+0xa4>)
 8002efe:	9300      	str	r3, [sp, #0]
 8002f00:	2300      	movs	r3, #0
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f000 f984 	bl	8003210 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f08:	69fa      	ldr	r2, [r7, #28]
 8002f0a:	69b9      	ldr	r1, [r7, #24]
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f000 f89d 	bl	800304c <I2C_WaitOnTXISFlagUntilTimeout>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e02c      	b.n	8002f76 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f1c:	88fb      	ldrh	r3, [r7, #6]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d105      	bne.n	8002f2e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f22:	893b      	ldrh	r3, [r7, #8]
 8002f24:	b2da      	uxtb	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	629a      	str	r2, [r3, #40]	; 0x28
 8002f2c:	e015      	b.n	8002f5a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002f2e:	893b      	ldrh	r3, [r7, #8]
 8002f30:	0a1b      	lsrs	r3, r3, #8
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	b2da      	uxtb	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f3c:	69fa      	ldr	r2, [r7, #28]
 8002f3e:	69b9      	ldr	r1, [r7, #24]
 8002f40:	68f8      	ldr	r0, [r7, #12]
 8002f42:	f000 f883 	bl	800304c <I2C_WaitOnTXISFlagUntilTimeout>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e012      	b.n	8002f76 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f50:	893b      	ldrh	r3, [r7, #8]
 8002f52:	b2da      	uxtb	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	9300      	str	r3, [sp, #0]
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	2200      	movs	r2, #0
 8002f62:	2140      	movs	r1, #64	; 0x40
 8002f64:	68f8      	ldr	r0, [r7, #12]
 8002f66:	f000 f831 	bl	8002fcc <I2C_WaitOnFlagUntilTimeout>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d001      	beq.n	8002f74 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e000      	b.n	8002f76 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	80002000 	.word	0x80002000

08002f84 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d103      	bne.n	8002fa2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d007      	beq.n	8002fc0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	699a      	ldr	r2, [r3, #24]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f042 0201 	orr.w	r2, r2, #1
 8002fbe:	619a      	str	r2, [r3, #24]
  }
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	603b      	str	r3, [r7, #0]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fdc:	e022      	b.n	8003024 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe4:	d01e      	beq.n	8003024 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fe6:	f7fe ff3b 	bl	8001e60 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d302      	bcc.n	8002ffc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d113      	bne.n	8003024 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003000:	f043 0220 	orr.w	r2, r3, #32
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2220      	movs	r2, #32
 800300c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e00f      	b.n	8003044 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	699a      	ldr	r2, [r3, #24]
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	4013      	ands	r3, r2
 800302e:	68ba      	ldr	r2, [r7, #8]
 8003030:	429a      	cmp	r2, r3
 8003032:	bf0c      	ite	eq
 8003034:	2301      	moveq	r3, #1
 8003036:	2300      	movne	r3, #0
 8003038:	b2db      	uxtb	r3, r3
 800303a:	461a      	mov	r2, r3
 800303c:	79fb      	ldrb	r3, [r7, #7]
 800303e:	429a      	cmp	r2, r3
 8003040:	d0cd      	beq.n	8002fde <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003058:	e02c      	b.n	80030b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	68b9      	ldr	r1, [r7, #8]
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f000 f870 	bl	8003144 <I2C_IsAcknowledgeFailed>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e02a      	b.n	80030c4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003074:	d01e      	beq.n	80030b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003076:	f7fe fef3 	bl	8001e60 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	68ba      	ldr	r2, [r7, #8]
 8003082:	429a      	cmp	r2, r3
 8003084:	d302      	bcc.n	800308c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d113      	bne.n	80030b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003090:	f043 0220 	orr.w	r2, r3, #32
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2220      	movs	r2, #32
 800309c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e007      	b.n	80030c4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d1cb      	bne.n	800305a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3710      	adds	r7, #16
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030d8:	e028      	b.n	800312c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	68b9      	ldr	r1, [r7, #8]
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f000 f830 	bl	8003144 <I2C_IsAcknowledgeFailed>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e026      	b.n	800313c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ee:	f7fe feb7 	bl	8001e60 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d302      	bcc.n	8003104 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d113      	bne.n	800312c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003108:	f043 0220 	orr.w	r2, r3, #32
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2220      	movs	r2, #32
 8003114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e007      	b.n	800313c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	f003 0320 	and.w	r3, r3, #32
 8003136:	2b20      	cmp	r3, #32
 8003138:	d1cf      	bne.n	80030da <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	3710      	adds	r7, #16
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	f003 0310 	and.w	r3, r3, #16
 800315a:	2b10      	cmp	r3, #16
 800315c:	d151      	bne.n	8003202 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800315e:	e022      	b.n	80031a6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003166:	d01e      	beq.n	80031a6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003168:	f7fe fe7a 	bl	8001e60 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	68ba      	ldr	r2, [r7, #8]
 8003174:	429a      	cmp	r2, r3
 8003176:	d302      	bcc.n	800317e <I2C_IsAcknowledgeFailed+0x3a>
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d113      	bne.n	80031a6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003182:	f043 0220 	orr.w	r2, r3, #32
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2220      	movs	r2, #32
 800318e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e02e      	b.n	8003204 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	f003 0320 	and.w	r3, r3, #32
 80031b0:	2b20      	cmp	r3, #32
 80031b2:	d1d5      	bne.n	8003160 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2210      	movs	r2, #16
 80031ba:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2220      	movs	r2, #32
 80031c2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f7ff fedd 	bl	8002f84 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	6859      	ldr	r1, [r3, #4]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	4b0d      	ldr	r3, [pc, #52]	; (800320c <I2C_IsAcknowledgeFailed+0xc8>)
 80031d6:	400b      	ands	r3, r1
 80031d8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031de:	f043 0204 	orr.w	r2, r3, #4
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2220      	movs	r2, #32
 80031ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e000      	b.n	8003204 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	fe00e800 	.word	0xfe00e800

08003210 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	607b      	str	r3, [r7, #4]
 800321a:	460b      	mov	r3, r1
 800321c:	817b      	strh	r3, [r7, #10]
 800321e:	4613      	mov	r3, r2
 8003220:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	685a      	ldr	r2, [r3, #4]
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	0d5b      	lsrs	r3, r3, #21
 800322c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003230:	4b0d      	ldr	r3, [pc, #52]	; (8003268 <I2C_TransferConfig+0x58>)
 8003232:	430b      	orrs	r3, r1
 8003234:	43db      	mvns	r3, r3
 8003236:	ea02 0103 	and.w	r1, r2, r3
 800323a:	897b      	ldrh	r3, [r7, #10]
 800323c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003240:	7a7b      	ldrb	r3, [r7, #9]
 8003242:	041b      	lsls	r3, r3, #16
 8003244:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003248:	431a      	orrs	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	431a      	orrs	r2, r3
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	431a      	orrs	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	430a      	orrs	r2, r1
 8003258:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800325a:	bf00      	nop
 800325c:	3714      	adds	r7, #20
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	03ff63ff 	.word	0x03ff63ff

0800326c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2b20      	cmp	r3, #32
 8003280:	d138      	bne.n	80032f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003288:	2b01      	cmp	r3, #1
 800328a:	d101      	bne.n	8003290 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800328c:	2302      	movs	r3, #2
 800328e:	e032      	b.n	80032f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2224      	movs	r2, #36	; 0x24
 800329c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f022 0201 	bic.w	r2, r2, #1
 80032ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80032be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6819      	ldr	r1, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	430a      	orrs	r2, r1
 80032ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f042 0201 	orr.w	r2, r2, #1
 80032de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2220      	movs	r2, #32
 80032e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032f0:	2300      	movs	r3, #0
 80032f2:	e000      	b.n	80032f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80032f4:	2302      	movs	r3, #2
  }
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr

08003302 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003302:	b480      	push	{r7}
 8003304:	b085      	sub	sp, #20
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
 800330a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003312:	b2db      	uxtb	r3, r3
 8003314:	2b20      	cmp	r3, #32
 8003316:	d139      	bne.n	800338c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800331e:	2b01      	cmp	r3, #1
 8003320:	d101      	bne.n	8003326 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003322:	2302      	movs	r3, #2
 8003324:	e033      	b.n	800338e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2201      	movs	r2, #1
 800332a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2224      	movs	r2, #36	; 0x24
 8003332:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f022 0201 	bic.w	r2, r2, #1
 8003344:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003354:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	021b      	lsls	r3, r3, #8
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	4313      	orrs	r3, r2
 800335e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f042 0201 	orr.w	r2, r2, #1
 8003376:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2220      	movs	r2, #32
 800337c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003388:	2300      	movs	r3, #0
 800338a:	e000      	b.n	800338e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800338c:	2302      	movs	r3, #2
  }
}
 800338e:	4618      	mov	r0, r3
 8003390:	3714      	adds	r7, #20
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr

0800339a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800339a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800339c:	b08f      	sub	sp, #60	; 0x3c
 800339e:	af0a      	add	r7, sp, #40	; 0x28
 80033a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d101      	bne.n	80033ac <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e116      	b.n	80035da <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d106      	bne.n	80033cc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f7fe f928 	bl	800161c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2203      	movs	r2, #3
 80033d0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d102      	bne.n	80033e6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f002 fda5 	bl	8005f3a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	603b      	str	r3, [r7, #0]
 80033f6:	687e      	ldr	r6, [r7, #4]
 80033f8:	466d      	mov	r5, sp
 80033fa:	f106 0410 	add.w	r4, r6, #16
 80033fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003400:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003402:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003404:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003406:	e894 0003 	ldmia.w	r4, {r0, r1}
 800340a:	e885 0003 	stmia.w	r5, {r0, r1}
 800340e:	1d33      	adds	r3, r6, #4
 8003410:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003412:	6838      	ldr	r0, [r7, #0]
 8003414:	f002 fd3f 	bl	8005e96 <USB_CoreInit>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d005      	beq.n	800342a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2202      	movs	r2, #2
 8003422:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e0d7      	b.n	80035da <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2100      	movs	r1, #0
 8003430:	4618      	mov	r0, r3
 8003432:	f002 fd93 	bl	8005f5c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003436:	2300      	movs	r3, #0
 8003438:	73fb      	strb	r3, [r7, #15]
 800343a:	e04a      	b.n	80034d2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800343c:	7bfa      	ldrb	r2, [r7, #15]
 800343e:	6879      	ldr	r1, [r7, #4]
 8003440:	4613      	mov	r3, r2
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	1a9b      	subs	r3, r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	440b      	add	r3, r1
 800344a:	333d      	adds	r3, #61	; 0x3d
 800344c:	2201      	movs	r2, #1
 800344e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003450:	7bfa      	ldrb	r2, [r7, #15]
 8003452:	6879      	ldr	r1, [r7, #4]
 8003454:	4613      	mov	r3, r2
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	1a9b      	subs	r3, r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	440b      	add	r3, r1
 800345e:	333c      	adds	r3, #60	; 0x3c
 8003460:	7bfa      	ldrb	r2, [r7, #15]
 8003462:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003464:	7bfa      	ldrb	r2, [r7, #15]
 8003466:	7bfb      	ldrb	r3, [r7, #15]
 8003468:	b298      	uxth	r0, r3
 800346a:	6879      	ldr	r1, [r7, #4]
 800346c:	4613      	mov	r3, r2
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	1a9b      	subs	r3, r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	440b      	add	r3, r1
 8003476:	3342      	adds	r3, #66	; 0x42
 8003478:	4602      	mov	r2, r0
 800347a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800347c:	7bfa      	ldrb	r2, [r7, #15]
 800347e:	6879      	ldr	r1, [r7, #4]
 8003480:	4613      	mov	r3, r2
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	1a9b      	subs	r3, r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	440b      	add	r3, r1
 800348a:	333f      	adds	r3, #63	; 0x3f
 800348c:	2200      	movs	r2, #0
 800348e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003490:	7bfa      	ldrb	r2, [r7, #15]
 8003492:	6879      	ldr	r1, [r7, #4]
 8003494:	4613      	mov	r3, r2
 8003496:	00db      	lsls	r3, r3, #3
 8003498:	1a9b      	subs	r3, r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	440b      	add	r3, r1
 800349e:	3344      	adds	r3, #68	; 0x44
 80034a0:	2200      	movs	r2, #0
 80034a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80034a4:	7bfa      	ldrb	r2, [r7, #15]
 80034a6:	6879      	ldr	r1, [r7, #4]
 80034a8:	4613      	mov	r3, r2
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	1a9b      	subs	r3, r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	440b      	add	r3, r1
 80034b2:	3348      	adds	r3, #72	; 0x48
 80034b4:	2200      	movs	r2, #0
 80034b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80034b8:	7bfa      	ldrb	r2, [r7, #15]
 80034ba:	6879      	ldr	r1, [r7, #4]
 80034bc:	4613      	mov	r3, r2
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	1a9b      	subs	r3, r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	440b      	add	r3, r1
 80034c6:	3350      	adds	r3, #80	; 0x50
 80034c8:	2200      	movs	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034cc:	7bfb      	ldrb	r3, [r7, #15]
 80034ce:	3301      	adds	r3, #1
 80034d0:	73fb      	strb	r3, [r7, #15]
 80034d2:	7bfa      	ldrb	r2, [r7, #15]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d3af      	bcc.n	800343c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034dc:	2300      	movs	r3, #0
 80034de:	73fb      	strb	r3, [r7, #15]
 80034e0:	e044      	b.n	800356c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80034e2:	7bfa      	ldrb	r2, [r7, #15]
 80034e4:	6879      	ldr	r1, [r7, #4]
 80034e6:	4613      	mov	r3, r2
 80034e8:	00db      	lsls	r3, r3, #3
 80034ea:	1a9b      	subs	r3, r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	440b      	add	r3, r1
 80034f0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80034f4:	2200      	movs	r2, #0
 80034f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80034f8:	7bfa      	ldrb	r2, [r7, #15]
 80034fa:	6879      	ldr	r1, [r7, #4]
 80034fc:	4613      	mov	r3, r2
 80034fe:	00db      	lsls	r3, r3, #3
 8003500:	1a9b      	subs	r3, r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	440b      	add	r3, r1
 8003506:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800350a:	7bfa      	ldrb	r2, [r7, #15]
 800350c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800350e:	7bfa      	ldrb	r2, [r7, #15]
 8003510:	6879      	ldr	r1, [r7, #4]
 8003512:	4613      	mov	r3, r2
 8003514:	00db      	lsls	r3, r3, #3
 8003516:	1a9b      	subs	r3, r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	440b      	add	r3, r1
 800351c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003520:	2200      	movs	r2, #0
 8003522:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003524:	7bfa      	ldrb	r2, [r7, #15]
 8003526:	6879      	ldr	r1, [r7, #4]
 8003528:	4613      	mov	r3, r2
 800352a:	00db      	lsls	r3, r3, #3
 800352c:	1a9b      	subs	r3, r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	440b      	add	r3, r1
 8003532:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003536:	2200      	movs	r2, #0
 8003538:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800353a:	7bfa      	ldrb	r2, [r7, #15]
 800353c:	6879      	ldr	r1, [r7, #4]
 800353e:	4613      	mov	r3, r2
 8003540:	00db      	lsls	r3, r3, #3
 8003542:	1a9b      	subs	r3, r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	440b      	add	r3, r1
 8003548:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800354c:	2200      	movs	r2, #0
 800354e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003550:	7bfa      	ldrb	r2, [r7, #15]
 8003552:	6879      	ldr	r1, [r7, #4]
 8003554:	4613      	mov	r3, r2
 8003556:	00db      	lsls	r3, r3, #3
 8003558:	1a9b      	subs	r3, r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	440b      	add	r3, r1
 800355e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003562:	2200      	movs	r2, #0
 8003564:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003566:	7bfb      	ldrb	r3, [r7, #15]
 8003568:	3301      	adds	r3, #1
 800356a:	73fb      	strb	r3, [r7, #15]
 800356c:	7bfa      	ldrb	r2, [r7, #15]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	429a      	cmp	r2, r3
 8003574:	d3b5      	bcc.n	80034e2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	603b      	str	r3, [r7, #0]
 800357c:	687e      	ldr	r6, [r7, #4]
 800357e:	466d      	mov	r5, sp
 8003580:	f106 0410 	add.w	r4, r6, #16
 8003584:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003586:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003588:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800358a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800358c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003590:	e885 0003 	stmia.w	r5, {r0, r1}
 8003594:	1d33      	adds	r3, r6, #4
 8003596:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003598:	6838      	ldr	r0, [r7, #0]
 800359a:	f002 fd09 	bl	8005fb0 <USB_DevInit>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d005      	beq.n	80035b0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2202      	movs	r2, #2
 80035a8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e014      	b.n	80035da <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d102      	bne.n	80035ce <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 f80a 	bl	80035e2 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f002 fe8f 	bl	80062f6 <USB_DevDisconnect>

  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3714      	adds	r7, #20
 80035de:	46bd      	mov	sp, r7
 80035e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080035e2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80035e2:	b480      	push	{r7}
 80035e4:	b085      	sub	sp, #20
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003614:	f043 0303 	orr.w	r3, r3, #3
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3714      	adds	r7, #20
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
	...

0800362c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800362c:	b480      	push	{r7}
 800362e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003630:	4b05      	ldr	r3, [pc, #20]	; (8003648 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a04      	ldr	r2, [pc, #16]	; (8003648 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003636:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800363a:	6013      	str	r3, [r2, #0]
}
 800363c:	bf00      	nop
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	40007000 	.word	0x40007000

0800364c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003650:	4b04      	ldr	r3, [pc, #16]	; (8003664 <HAL_PWREx_GetVoltageRange+0x18>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003658:	4618      	mov	r0, r3
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	40007000 	.word	0x40007000

08003668 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003676:	d130      	bne.n	80036da <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003678:	4b23      	ldr	r3, [pc, #140]	; (8003708 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003680:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003684:	d038      	beq.n	80036f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003686:	4b20      	ldr	r3, [pc, #128]	; (8003708 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800368e:	4a1e      	ldr	r2, [pc, #120]	; (8003708 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003690:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003694:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003696:	4b1d      	ldr	r3, [pc, #116]	; (800370c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2232      	movs	r2, #50	; 0x32
 800369c:	fb02 f303 	mul.w	r3, r2, r3
 80036a0:	4a1b      	ldr	r2, [pc, #108]	; (8003710 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80036a2:	fba2 2303 	umull	r2, r3, r2, r3
 80036a6:	0c9b      	lsrs	r3, r3, #18
 80036a8:	3301      	adds	r3, #1
 80036aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036ac:	e002      	b.n	80036b4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	3b01      	subs	r3, #1
 80036b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036b4:	4b14      	ldr	r3, [pc, #80]	; (8003708 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036b6:	695b      	ldr	r3, [r3, #20]
 80036b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036c0:	d102      	bne.n	80036c8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d1f2      	bne.n	80036ae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036c8:	4b0f      	ldr	r3, [pc, #60]	; (8003708 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036ca:	695b      	ldr	r3, [r3, #20]
 80036cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036d4:	d110      	bne.n	80036f8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e00f      	b.n	80036fa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80036da:	4b0b      	ldr	r3, [pc, #44]	; (8003708 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036e6:	d007      	beq.n	80036f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80036e8:	4b07      	ldr	r3, [pc, #28]	; (8003708 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036f0:	4a05      	ldr	r2, [pc, #20]	; (8003708 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036f6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3714      	adds	r7, #20
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	40007000 	.word	0x40007000
 800370c:	2000008c 	.word	0x2000008c
 8003710:	431bde83 	.word	0x431bde83

08003714 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003714:	b480      	push	{r7}
 8003716:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003718:	4b05      	ldr	r3, [pc, #20]	; (8003730 <HAL_PWREx_EnableVddUSB+0x1c>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	4a04      	ldr	r2, [pc, #16]	; (8003730 <HAL_PWREx_EnableVddUSB+0x1c>)
 800371e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003722:	6053      	str	r3, [r2, #4]
}
 8003724:	bf00      	nop
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	40007000 	.word	0x40007000

08003734 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b086      	sub	sp, #24
 8003738:	af02      	add	r7, sp, #8
 800373a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800373c:	f7fe fb90 	bl	8001e60 <HAL_GetTick>
 8003740:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d101      	bne.n	800374c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e06f      	b.n	800382c <HAL_QSPI_Init+0xf8>
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  /* Process locked */
  __HAL_LOCK(hqspi);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003752:	b2db      	uxtb	r3, r3
 8003754:	2b01      	cmp	r3, #1
 8003756:	d101      	bne.n	800375c <HAL_QSPI_Init+0x28>
 8003758:	2302      	movs	r3, #2
 800375a:	e067      	b.n	800382c <HAL_QSPI_Init+0xf8>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800376a:	b2db      	uxtb	r3, r3
 800376c:	2b00      	cmp	r3, #0
 800376e:	d10b      	bne.n	8003788 <HAL_QSPI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f7fd fe51 	bl	8001420 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800377e:	f241 3188 	movw	r1, #5000	; 0x1388
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f858 	bl	8003838 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	3b01      	subs	r3, #1
 8003798:	021a      	lsls	r2, r3, #8
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	430a      	orrs	r2, r1
 80037a0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	9300      	str	r3, [sp, #0]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	2120      	movs	r1, #32
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f850 	bl	8003854 <QSPI_WaitFlagStateUntilTimeout>
 80037b4:	4603      	mov	r3, r0
 80037b6:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80037b8:	7afb      	ldrb	r3, [r7, #11]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d131      	bne.n	8003822 <HAL_QSPI_Init+0xee>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80037c8:	f023 0310 	bic.w	r3, r3, #16
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	6852      	ldr	r2, [r2, #4]
 80037d0:	0611      	lsls	r1, r2, #24
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	68d2      	ldr	r2, [r2, #12]
 80037d6:	4311      	orrs	r1, r2
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	6812      	ldr	r2, [r2, #0]
 80037dc:	430b      	orrs	r3, r1
 80037de:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	685a      	ldr	r2, [r3, #4]
 80037e6:	4b13      	ldr	r3, [pc, #76]	; (8003834 <HAL_QSPI_Init+0x100>)
 80037e8:	4013      	ands	r3, r2
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	6912      	ldr	r2, [r2, #16]
 80037ee:	0411      	lsls	r1, r2, #16
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	6952      	ldr	r2, [r2, #20]
 80037f4:	4311      	orrs	r1, r2
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	6992      	ldr	r2, [r2, #24]
 80037fa:	4311      	orrs	r1, r2
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	6812      	ldr	r2, [r2, #0]
 8003800:	430b      	orrs	r3, r1
 8003802:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f042 0201 	orr.w	r2, r2, #1
 8003812:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800382a:	7afb      	ldrb	r3, [r7, #11]
}
 800382c:	4618      	mov	r0, r3
 800382e:	3710      	adds	r7, #16
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	ffe0f8fe 	.word	0xffe0f8fe

08003838 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	603b      	str	r3, [r7, #0]
 8003860:	4613      	mov	r3, r2
 8003862:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003864:	e01a      	b.n	800389c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800386c:	d016      	beq.n	800389c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800386e:	f7fe faf7 	bl	8001e60 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	429a      	cmp	r2, r3
 800387c:	d302      	bcc.n	8003884 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d10b      	bne.n	800389c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2204      	movs	r2, #4
 8003888:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003890:	f043 0201 	orr.w	r2, r3, #1
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e00e      	b.n	80038ba <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	689a      	ldr	r2, [r3, #8]
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	4013      	ands	r3, r2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	bf14      	ite	ne
 80038aa:	2301      	movne	r3, #1
 80038ac:	2300      	moveq	r3, #0
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	461a      	mov	r2, r3
 80038b2:	79fb      	ldrb	r3, [r7, #7]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d1d6      	bne.n	8003866 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
	...

080038c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b088      	sub	sp, #32
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e39d      	b.n	8004012 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038d6:	4ba4      	ldr	r3, [pc, #656]	; (8003b68 <HAL_RCC_OscConfig+0x2a4>)
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f003 030c 	and.w	r3, r3, #12
 80038de:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038e0:	4ba1      	ldr	r3, [pc, #644]	; (8003b68 <HAL_RCC_OscConfig+0x2a4>)
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	f003 0303 	and.w	r3, r3, #3
 80038e8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0310 	and.w	r3, r3, #16
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	f000 80e1 	beq.w	8003aba <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d007      	beq.n	800390e <HAL_RCC_OscConfig+0x4a>
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	2b0c      	cmp	r3, #12
 8003902:	f040 8088 	bne.w	8003a16 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	2b01      	cmp	r3, #1
 800390a:	f040 8084 	bne.w	8003a16 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800390e:	4b96      	ldr	r3, [pc, #600]	; (8003b68 <HAL_RCC_OscConfig+0x2a4>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d005      	beq.n	8003926 <HAL_RCC_OscConfig+0x62>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e375      	b.n	8004012 <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a1a      	ldr	r2, [r3, #32]
 800392a:	4b8f      	ldr	r3, [pc, #572]	; (8003b68 <HAL_RCC_OscConfig+0x2a4>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0308 	and.w	r3, r3, #8
 8003932:	2b00      	cmp	r3, #0
 8003934:	d004      	beq.n	8003940 <HAL_RCC_OscConfig+0x7c>
 8003936:	4b8c      	ldr	r3, [pc, #560]	; (8003b68 <HAL_RCC_OscConfig+0x2a4>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800393e:	e005      	b.n	800394c <HAL_RCC_OscConfig+0x88>
 8003940:	4b89      	ldr	r3, [pc, #548]	; (8003b68 <HAL_RCC_OscConfig+0x2a4>)
 8003942:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003946:	091b      	lsrs	r3, r3, #4
 8003948:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800394c:	4293      	cmp	r3, r2
 800394e:	d223      	bcs.n	8003998 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a1b      	ldr	r3, [r3, #32]
 8003954:	4618      	mov	r0, r3
 8003956:	f000 fd3b 	bl	80043d0 <RCC_SetFlashLatencyFromMSIRange>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d001      	beq.n	8003964 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e356      	b.n	8004012 <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003964:	4b80      	ldr	r3, [pc, #512]	; (8003b68 <HAL_RCC_OscConfig+0x2a4>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a7f      	ldr	r2, [pc, #508]	; (8003b68 <HAL_RCC_OscConfig+0x2a4>)
 800396a:	f043 0308 	orr.w	r3, r3, #8
 800396e:	6013      	str	r3, [r2, #0]
 8003970:	4b7d      	ldr	r3, [pc, #500]	; (8003b68 <HAL_RCC_OscConfig+0x2a4>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a1b      	ldr	r3, [r3, #32]
 800397c:	497a      	ldr	r1, [pc, #488]	; (8003b68 <HAL_RCC_OscConfig+0x2a4>)
 800397e:	4313      	orrs	r3, r2
 8003980:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003982:	4b79      	ldr	r3, [pc, #484]	; (8003b68 <HAL_RCC_OscConfig+0x2a4>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	69db      	ldr	r3, [r3, #28]
 800398e:	021b      	lsls	r3, r3, #8
 8003990:	4975      	ldr	r1, [pc, #468]	; (8003b68 <HAL_RCC_OscConfig+0x2a4>)
 8003992:	4313      	orrs	r3, r2
 8003994:	604b      	str	r3, [r1, #4]
 8003996:	e022      	b.n	80039de <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003998:	4b73      	ldr	r3, [pc, #460]	; (8003b68 <HAL_RCC_OscConfig+0x2a4>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a72      	ldr	r2, [pc, #456]	; (8003b68 <HAL_RCC_OscConfig+0x2a4>)
 800399e:	f043 0308 	orr.w	r3, r3, #8
 80039a2:	6013      	str	r3, [r2, #0]
 80039a4:	4b70      	ldr	r3, [pc, #448]	; (8003b68 <HAL_RCC_OscConfig+0x2a4>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a1b      	ldr	r3, [r3, #32]
 80039b0:	496d      	ldr	r1, [pc, #436]	; (8003b68 <HAL_RCC_OscConfig+0x2a4>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039b6:	4b6c      	ldr	r3, [pc, #432]	; (8003b68 <HAL_RCC_OscConfig+0x2a4>)
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	69db      	ldr	r3, [r3, #28]
 80039c2:	021b      	lsls	r3, r3, #8
 80039c4:	4968      	ldr	r1, [pc, #416]	; (8003b68 <HAL_RCC_OscConfig+0x2a4>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a1b      	ldr	r3, [r3, #32]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f000 fcfe 	bl	80043d0 <RCC_SetFlashLatencyFromMSIRange>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e319      	b.n	8004012 <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039de:	f000 fc03 	bl	80041e8 <HAL_RCC_GetSysClockFreq>
 80039e2:	4601      	mov	r1, r0
 80039e4:	4b60      	ldr	r3, [pc, #384]	; (8003b68 <HAL_RCC_OscConfig+0x2a4>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	091b      	lsrs	r3, r3, #4
 80039ea:	f003 030f 	and.w	r3, r3, #15
 80039ee:	4a5f      	ldr	r2, [pc, #380]	; (8003b6c <HAL_RCC_OscConfig+0x2a8>)
 80039f0:	5cd3      	ldrb	r3, [r2, r3]
 80039f2:	f003 031f 	and.w	r3, r3, #31
 80039f6:	fa21 f303 	lsr.w	r3, r1, r3
 80039fa:	4a5d      	ldr	r2, [pc, #372]	; (8003b70 <HAL_RCC_OscConfig+0x2ac>)
 80039fc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80039fe:	4b5d      	ldr	r3, [pc, #372]	; (8003b74 <HAL_RCC_OscConfig+0x2b0>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7fd fe76 	bl	80016f4 <HAL_InitTick>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003a0c:	7bfb      	ldrb	r3, [r7, #15]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d052      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8003a12:	7bfb      	ldrb	r3, [r7, #15]
 8003a14:	e2fd      	b.n	8004012 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d032      	beq.n	8003a84 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a1e:	4b52      	ldr	r3, [pc, #328]	; (8003b68 <HAL_RCC_OscConfig+0x2a4>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a51      	ldr	r2, [pc, #324]	; (8003b68 <HAL_RCC_OscConfig+0x2a4>)
 8003a24:	f043 0301 	orr.w	r3, r3, #1
 8003a28:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a2a:	f7fe fa19 	bl	8001e60 <HAL_GetTick>
 8003a2e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a30:	e008      	b.n	8003a44 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a32:	f7fe fa15 	bl	8001e60 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e2e6      	b.n	8004012 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a44:	4b48      	ldr	r3, [pc, #288]	; (8003b68 <HAL_RCC_OscConfig+0x2a4>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d0f0      	beq.n	8003a32 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a50:	4b45      	ldr	r3, [pc, #276]	; (8003b68 <HAL_RCC_OscConfig+0x2a4>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a44      	ldr	r2, [pc, #272]	; (8003b68 <HAL_RCC_OscConfig+0x2a4>)
 8003a56:	f043 0308 	orr.w	r3, r3, #8
 8003a5a:	6013      	str	r3, [r2, #0]
 8003a5c:	4b42      	ldr	r3, [pc, #264]	; (8003b68 <HAL_RCC_OscConfig+0x2a4>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a1b      	ldr	r3, [r3, #32]
 8003a68:	493f      	ldr	r1, [pc, #252]	; (8003b68 <HAL_RCC_OscConfig+0x2a4>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a6e:	4b3e      	ldr	r3, [pc, #248]	; (8003b68 <HAL_RCC_OscConfig+0x2a4>)
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	69db      	ldr	r3, [r3, #28]
 8003a7a:	021b      	lsls	r3, r3, #8
 8003a7c:	493a      	ldr	r1, [pc, #232]	; (8003b68 <HAL_RCC_OscConfig+0x2a4>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	604b      	str	r3, [r1, #4]
 8003a82:	e01a      	b.n	8003aba <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003a84:	4b38      	ldr	r3, [pc, #224]	; (8003b68 <HAL_RCC_OscConfig+0x2a4>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a37      	ldr	r2, [pc, #220]	; (8003b68 <HAL_RCC_OscConfig+0x2a4>)
 8003a8a:	f023 0301 	bic.w	r3, r3, #1
 8003a8e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a90:	f7fe f9e6 	bl	8001e60 <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a96:	e008      	b.n	8003aaa <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a98:	f7fe f9e2 	bl	8001e60 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e2b3      	b.n	8004012 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003aaa:	4b2f      	ldr	r3, [pc, #188]	; (8003b68 <HAL_RCC_OscConfig+0x2a4>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1f0      	bne.n	8003a98 <HAL_RCC_OscConfig+0x1d4>
 8003ab6:	e000      	b.n	8003aba <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ab8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d074      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	2b08      	cmp	r3, #8
 8003aca:	d005      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x214>
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	2b0c      	cmp	r3, #12
 8003ad0:	d10e      	bne.n	8003af0 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	2b03      	cmp	r3, #3
 8003ad6:	d10b      	bne.n	8003af0 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ad8:	4b23      	ldr	r3, [pc, #140]	; (8003b68 <HAL_RCC_OscConfig+0x2a4>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d064      	beq.n	8003bae <HAL_RCC_OscConfig+0x2ea>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d160      	bne.n	8003bae <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e290      	b.n	8004012 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003af8:	d106      	bne.n	8003b08 <HAL_RCC_OscConfig+0x244>
 8003afa:	4b1b      	ldr	r3, [pc, #108]	; (8003b68 <HAL_RCC_OscConfig+0x2a4>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a1a      	ldr	r2, [pc, #104]	; (8003b68 <HAL_RCC_OscConfig+0x2a4>)
 8003b00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b04:	6013      	str	r3, [r2, #0]
 8003b06:	e01d      	b.n	8003b44 <HAL_RCC_OscConfig+0x280>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b10:	d10c      	bne.n	8003b2c <HAL_RCC_OscConfig+0x268>
 8003b12:	4b15      	ldr	r3, [pc, #84]	; (8003b68 <HAL_RCC_OscConfig+0x2a4>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a14      	ldr	r2, [pc, #80]	; (8003b68 <HAL_RCC_OscConfig+0x2a4>)
 8003b18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b1c:	6013      	str	r3, [r2, #0]
 8003b1e:	4b12      	ldr	r3, [pc, #72]	; (8003b68 <HAL_RCC_OscConfig+0x2a4>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a11      	ldr	r2, [pc, #68]	; (8003b68 <HAL_RCC_OscConfig+0x2a4>)
 8003b24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b28:	6013      	str	r3, [r2, #0]
 8003b2a:	e00b      	b.n	8003b44 <HAL_RCC_OscConfig+0x280>
 8003b2c:	4b0e      	ldr	r3, [pc, #56]	; (8003b68 <HAL_RCC_OscConfig+0x2a4>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a0d      	ldr	r2, [pc, #52]	; (8003b68 <HAL_RCC_OscConfig+0x2a4>)
 8003b32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b36:	6013      	str	r3, [r2, #0]
 8003b38:	4b0b      	ldr	r3, [pc, #44]	; (8003b68 <HAL_RCC_OscConfig+0x2a4>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a0a      	ldr	r2, [pc, #40]	; (8003b68 <HAL_RCC_OscConfig+0x2a4>)
 8003b3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d01c      	beq.n	8003b86 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b4c:	f7fe f988 	bl	8001e60 <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b52:	e011      	b.n	8003b78 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b54:	f7fe f984 	bl	8001e60 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b64      	cmp	r3, #100	; 0x64
 8003b60:	d90a      	bls.n	8003b78 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e255      	b.n	8004012 <HAL_RCC_OscConfig+0x74e>
 8003b66:	bf00      	nop
 8003b68:	40021000 	.word	0x40021000
 8003b6c:	0800970c 	.word	0x0800970c
 8003b70:	2000008c 	.word	0x2000008c
 8003b74:	2000009c 	.word	0x2000009c
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b78:	4bae      	ldr	r3, [pc, #696]	; (8003e34 <HAL_RCC_OscConfig+0x570>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d0e7      	beq.n	8003b54 <HAL_RCC_OscConfig+0x290>
 8003b84:	e014      	b.n	8003bb0 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b86:	f7fe f96b 	bl	8001e60 <HAL_GetTick>
 8003b8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b8c:	e008      	b.n	8003ba0 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b8e:	f7fe f967 	bl	8001e60 <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b64      	cmp	r3, #100	; 0x64
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e238      	b.n	8004012 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ba0:	4ba4      	ldr	r3, [pc, #656]	; (8003e34 <HAL_RCC_OscConfig+0x570>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d1f0      	bne.n	8003b8e <HAL_RCC_OscConfig+0x2ca>
 8003bac:	e000      	b.n	8003bb0 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bae:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0302 	and.w	r3, r3, #2
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d060      	beq.n	8003c7e <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	2b04      	cmp	r3, #4
 8003bc0:	d005      	beq.n	8003bce <HAL_RCC_OscConfig+0x30a>
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	2b0c      	cmp	r3, #12
 8003bc6:	d119      	bne.n	8003bfc <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d116      	bne.n	8003bfc <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bce:	4b99      	ldr	r3, [pc, #612]	; (8003e34 <HAL_RCC_OscConfig+0x570>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d005      	beq.n	8003be6 <HAL_RCC_OscConfig+0x322>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d101      	bne.n	8003be6 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e215      	b.n	8004012 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003be6:	4b93      	ldr	r3, [pc, #588]	; (8003e34 <HAL_RCC_OscConfig+0x570>)
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	061b      	lsls	r3, r3, #24
 8003bf4:	498f      	ldr	r1, [pc, #572]	; (8003e34 <HAL_RCC_OscConfig+0x570>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bfa:	e040      	b.n	8003c7e <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d023      	beq.n	8003c4c <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c04:	4b8b      	ldr	r3, [pc, #556]	; (8003e34 <HAL_RCC_OscConfig+0x570>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a8a      	ldr	r2, [pc, #552]	; (8003e34 <HAL_RCC_OscConfig+0x570>)
 8003c0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c10:	f7fe f926 	bl	8001e60 <HAL_GetTick>
 8003c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c16:	e008      	b.n	8003c2a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c18:	f7fe f922 	bl	8001e60 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e1f3      	b.n	8004012 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c2a:	4b82      	ldr	r3, [pc, #520]	; (8003e34 <HAL_RCC_OscConfig+0x570>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d0f0      	beq.n	8003c18 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c36:	4b7f      	ldr	r3, [pc, #508]	; (8003e34 <HAL_RCC_OscConfig+0x570>)
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	061b      	lsls	r3, r3, #24
 8003c44:	497b      	ldr	r1, [pc, #492]	; (8003e34 <HAL_RCC_OscConfig+0x570>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	604b      	str	r3, [r1, #4]
 8003c4a:	e018      	b.n	8003c7e <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c4c:	4b79      	ldr	r3, [pc, #484]	; (8003e34 <HAL_RCC_OscConfig+0x570>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a78      	ldr	r2, [pc, #480]	; (8003e34 <HAL_RCC_OscConfig+0x570>)
 8003c52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c58:	f7fe f902 	bl	8001e60 <HAL_GetTick>
 8003c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c5e:	e008      	b.n	8003c72 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c60:	f7fe f8fe 	bl	8001e60 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e1cf      	b.n	8004012 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c72:	4b70      	ldr	r3, [pc, #448]	; (8003e34 <HAL_RCC_OscConfig+0x570>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d1f0      	bne.n	8003c60 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0308 	and.w	r3, r3, #8
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d03c      	beq.n	8003d04 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d01c      	beq.n	8003ccc <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c92:	4b68      	ldr	r3, [pc, #416]	; (8003e34 <HAL_RCC_OscConfig+0x570>)
 8003c94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c98:	4a66      	ldr	r2, [pc, #408]	; (8003e34 <HAL_RCC_OscConfig+0x570>)
 8003c9a:	f043 0301 	orr.w	r3, r3, #1
 8003c9e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca2:	f7fe f8dd 	bl	8001e60 <HAL_GetTick>
 8003ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ca8:	e008      	b.n	8003cbc <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003caa:	f7fe f8d9 	bl	8001e60 <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d901      	bls.n	8003cbc <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e1aa      	b.n	8004012 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cbc:	4b5d      	ldr	r3, [pc, #372]	; (8003e34 <HAL_RCC_OscConfig+0x570>)
 8003cbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d0ef      	beq.n	8003caa <HAL_RCC_OscConfig+0x3e6>
 8003cca:	e01b      	b.n	8003d04 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ccc:	4b59      	ldr	r3, [pc, #356]	; (8003e34 <HAL_RCC_OscConfig+0x570>)
 8003cce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cd2:	4a58      	ldr	r2, [pc, #352]	; (8003e34 <HAL_RCC_OscConfig+0x570>)
 8003cd4:	f023 0301 	bic.w	r3, r3, #1
 8003cd8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cdc:	f7fe f8c0 	bl	8001e60 <HAL_GetTick>
 8003ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ce2:	e008      	b.n	8003cf6 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ce4:	f7fe f8bc 	bl	8001e60 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e18d      	b.n	8004012 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cf6:	4b4f      	ldr	r3, [pc, #316]	; (8003e34 <HAL_RCC_OscConfig+0x570>)
 8003cf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cfc:	f003 0302 	and.w	r3, r3, #2
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1ef      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0304 	and.w	r3, r3, #4
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f000 80a5 	beq.w	8003e5c <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d12:	2300      	movs	r3, #0
 8003d14:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003d16:	4b47      	ldr	r3, [pc, #284]	; (8003e34 <HAL_RCC_OscConfig+0x570>)
 8003d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10d      	bne.n	8003d3e <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d22:	4b44      	ldr	r3, [pc, #272]	; (8003e34 <HAL_RCC_OscConfig+0x570>)
 8003d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d26:	4a43      	ldr	r2, [pc, #268]	; (8003e34 <HAL_RCC_OscConfig+0x570>)
 8003d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d2c:	6593      	str	r3, [r2, #88]	; 0x58
 8003d2e:	4b41      	ldr	r3, [pc, #260]	; (8003e34 <HAL_RCC_OscConfig+0x570>)
 8003d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d36:	60bb      	str	r3, [r7, #8]
 8003d38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d3e:	4b3e      	ldr	r3, [pc, #248]	; (8003e38 <HAL_RCC_OscConfig+0x574>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d118      	bne.n	8003d7c <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d4a:	4b3b      	ldr	r3, [pc, #236]	; (8003e38 <HAL_RCC_OscConfig+0x574>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a3a      	ldr	r2, [pc, #232]	; (8003e38 <HAL_RCC_OscConfig+0x574>)
 8003d50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d56:	f7fe f883 	bl	8001e60 <HAL_GetTick>
 8003d5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d5c:	e008      	b.n	8003d70 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d5e:	f7fe f87f 	bl	8001e60 <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d901      	bls.n	8003d70 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e150      	b.n	8004012 <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d70:	4b31      	ldr	r3, [pc, #196]	; (8003e38 <HAL_RCC_OscConfig+0x574>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d0f0      	beq.n	8003d5e <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d108      	bne.n	8003d96 <HAL_RCC_OscConfig+0x4d2>
 8003d84:	4b2b      	ldr	r3, [pc, #172]	; (8003e34 <HAL_RCC_OscConfig+0x570>)
 8003d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d8a:	4a2a      	ldr	r2, [pc, #168]	; (8003e34 <HAL_RCC_OscConfig+0x570>)
 8003d8c:	f043 0301 	orr.w	r3, r3, #1
 8003d90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d94:	e024      	b.n	8003de0 <HAL_RCC_OscConfig+0x51c>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	2b05      	cmp	r3, #5
 8003d9c:	d110      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x4fc>
 8003d9e:	4b25      	ldr	r3, [pc, #148]	; (8003e34 <HAL_RCC_OscConfig+0x570>)
 8003da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da4:	4a23      	ldr	r2, [pc, #140]	; (8003e34 <HAL_RCC_OscConfig+0x570>)
 8003da6:	f043 0304 	orr.w	r3, r3, #4
 8003daa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003dae:	4b21      	ldr	r3, [pc, #132]	; (8003e34 <HAL_RCC_OscConfig+0x570>)
 8003db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db4:	4a1f      	ldr	r2, [pc, #124]	; (8003e34 <HAL_RCC_OscConfig+0x570>)
 8003db6:	f043 0301 	orr.w	r3, r3, #1
 8003dba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003dbe:	e00f      	b.n	8003de0 <HAL_RCC_OscConfig+0x51c>
 8003dc0:	4b1c      	ldr	r3, [pc, #112]	; (8003e34 <HAL_RCC_OscConfig+0x570>)
 8003dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc6:	4a1b      	ldr	r2, [pc, #108]	; (8003e34 <HAL_RCC_OscConfig+0x570>)
 8003dc8:	f023 0301 	bic.w	r3, r3, #1
 8003dcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003dd0:	4b18      	ldr	r3, [pc, #96]	; (8003e34 <HAL_RCC_OscConfig+0x570>)
 8003dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd6:	4a17      	ldr	r2, [pc, #92]	; (8003e34 <HAL_RCC_OscConfig+0x570>)
 8003dd8:	f023 0304 	bic.w	r3, r3, #4
 8003ddc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d016      	beq.n	8003e16 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de8:	f7fe f83a 	bl	8001e60 <HAL_GetTick>
 8003dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dee:	e00a      	b.n	8003e06 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003df0:	f7fe f836 	bl	8001e60 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e105      	b.n	8004012 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e06:	4b0b      	ldr	r3, [pc, #44]	; (8003e34 <HAL_RCC_OscConfig+0x570>)
 8003e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e0c:	f003 0302 	and.w	r3, r3, #2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d0ed      	beq.n	8003df0 <HAL_RCC_OscConfig+0x52c>
 8003e14:	e019      	b.n	8003e4a <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e16:	f7fe f823 	bl	8001e60 <HAL_GetTick>
 8003e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e1c:	e00e      	b.n	8003e3c <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e1e:	f7fe f81f 	bl	8001e60 <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d905      	bls.n	8003e3c <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e0ee      	b.n	8004012 <HAL_RCC_OscConfig+0x74e>
 8003e34:	40021000 	.word	0x40021000
 8003e38:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e3c:	4b77      	ldr	r3, [pc, #476]	; (800401c <HAL_RCC_OscConfig+0x758>)
 8003e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d1e9      	bne.n	8003e1e <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e4a:	7ffb      	ldrb	r3, [r7, #31]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d105      	bne.n	8003e5c <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e50:	4b72      	ldr	r3, [pc, #456]	; (800401c <HAL_RCC_OscConfig+0x758>)
 8003e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e54:	4a71      	ldr	r2, [pc, #452]	; (800401c <HAL_RCC_OscConfig+0x758>)
 8003e56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e5a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f000 80d5 	beq.w	8004010 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	2b0c      	cmp	r3, #12
 8003e6a:	f000 808e 	beq.w	8003f8a <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d15b      	bne.n	8003f2e <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e76:	4b69      	ldr	r3, [pc, #420]	; (800401c <HAL_RCC_OscConfig+0x758>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a68      	ldr	r2, [pc, #416]	; (800401c <HAL_RCC_OscConfig+0x758>)
 8003e7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e82:	f7fd ffed 	bl	8001e60 <HAL_GetTick>
 8003e86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e88:	e008      	b.n	8003e9c <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e8a:	f7fd ffe9 	bl	8001e60 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d901      	bls.n	8003e9c <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e0ba      	b.n	8004012 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e9c:	4b5f      	ldr	r3, [pc, #380]	; (800401c <HAL_RCC_OscConfig+0x758>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1f0      	bne.n	8003e8a <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ea8:	4b5c      	ldr	r3, [pc, #368]	; (800401c <HAL_RCC_OscConfig+0x758>)
 8003eaa:	68da      	ldr	r2, [r3, #12]
 8003eac:	4b5c      	ldr	r3, [pc, #368]	; (8004020 <HAL_RCC_OscConfig+0x75c>)
 8003eae:	4013      	ands	r3, r2
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003eb8:	3a01      	subs	r2, #1
 8003eba:	0112      	lsls	r2, r2, #4
 8003ebc:	4311      	orrs	r1, r2
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ec2:	0212      	lsls	r2, r2, #8
 8003ec4:	4311      	orrs	r1, r2
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003eca:	0852      	lsrs	r2, r2, #1
 8003ecc:	3a01      	subs	r2, #1
 8003ece:	0552      	lsls	r2, r2, #21
 8003ed0:	4311      	orrs	r1, r2
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003ed6:	0852      	lsrs	r2, r2, #1
 8003ed8:	3a01      	subs	r2, #1
 8003eda:	0652      	lsls	r2, r2, #25
 8003edc:	4311      	orrs	r1, r2
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ee2:	0912      	lsrs	r2, r2, #4
 8003ee4:	0452      	lsls	r2, r2, #17
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	494c      	ldr	r1, [pc, #304]	; (800401c <HAL_RCC_OscConfig+0x758>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003eee:	4b4b      	ldr	r3, [pc, #300]	; (800401c <HAL_RCC_OscConfig+0x758>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a4a      	ldr	r2, [pc, #296]	; (800401c <HAL_RCC_OscConfig+0x758>)
 8003ef4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ef8:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003efa:	4b48      	ldr	r3, [pc, #288]	; (800401c <HAL_RCC_OscConfig+0x758>)
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	4a47      	ldr	r2, [pc, #284]	; (800401c <HAL_RCC_OscConfig+0x758>)
 8003f00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f04:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f06:	f7fd ffab 	bl	8001e60 <HAL_GetTick>
 8003f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f0c:	e008      	b.n	8003f20 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f0e:	f7fd ffa7 	bl	8001e60 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d901      	bls.n	8003f20 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e078      	b.n	8004012 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f20:	4b3e      	ldr	r3, [pc, #248]	; (800401c <HAL_RCC_OscConfig+0x758>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d0f0      	beq.n	8003f0e <HAL_RCC_OscConfig+0x64a>
 8003f2c:	e070      	b.n	8004010 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f2e:	4b3b      	ldr	r3, [pc, #236]	; (800401c <HAL_RCC_OscConfig+0x758>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a3a      	ldr	r2, [pc, #232]	; (800401c <HAL_RCC_OscConfig+0x758>)
 8003f34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f38:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003f3a:	4b38      	ldr	r3, [pc, #224]	; (800401c <HAL_RCC_OscConfig+0x758>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d105      	bne.n	8003f52 <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003f46:	4b35      	ldr	r3, [pc, #212]	; (800401c <HAL_RCC_OscConfig+0x758>)
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	4a34      	ldr	r2, [pc, #208]	; (800401c <HAL_RCC_OscConfig+0x758>)
 8003f4c:	f023 0303 	bic.w	r3, r3, #3
 8003f50:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003f52:	4b32      	ldr	r3, [pc, #200]	; (800401c <HAL_RCC_OscConfig+0x758>)
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	4a31      	ldr	r2, [pc, #196]	; (800401c <HAL_RCC_OscConfig+0x758>)
 8003f58:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003f5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f60:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f62:	f7fd ff7d 	bl	8001e60 <HAL_GetTick>
 8003f66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f68:	e008      	b.n	8003f7c <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f6a:	f7fd ff79 	bl	8001e60 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d901      	bls.n	8003f7c <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e04a      	b.n	8004012 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f7c:	4b27      	ldr	r3, [pc, #156]	; (800401c <HAL_RCC_OscConfig+0x758>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d1f0      	bne.n	8003f6a <HAL_RCC_OscConfig+0x6a6>
 8003f88:	e042      	b.n	8004010 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d101      	bne.n	8003f96 <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e03d      	b.n	8004012 <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8003f96:	4b21      	ldr	r3, [pc, #132]	; (800401c <HAL_RCC_OscConfig+0x758>)
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	f003 0203 	and.w	r2, r3, #3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d130      	bne.n	800400c <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d127      	bne.n	800400c <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fc6:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d11f      	bne.n	800400c <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003fd6:	2a07      	cmp	r2, #7
 8003fd8:	bf14      	ite	ne
 8003fda:	2201      	movne	r2, #1
 8003fdc:	2200      	moveq	r2, #0
 8003fde:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d113      	bne.n	800400c <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fee:	085b      	lsrs	r3, r3, #1
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d109      	bne.n	800400c <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004002:	085b      	lsrs	r3, r3, #1
 8004004:	3b01      	subs	r3, #1
 8004006:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004008:	429a      	cmp	r2, r3
 800400a:	d001      	beq.n	8004010 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e000      	b.n	8004012 <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3720      	adds	r7, #32
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	40021000 	.word	0x40021000
 8004020:	f99d808c 	.word	0xf99d808c

08004024 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d101      	bne.n	8004038 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e0c8      	b.n	80041ca <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004038:	4b66      	ldr	r3, [pc, #408]	; (80041d4 <HAL_RCC_ClockConfig+0x1b0>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0307 	and.w	r3, r3, #7
 8004040:	683a      	ldr	r2, [r7, #0]
 8004042:	429a      	cmp	r2, r3
 8004044:	d910      	bls.n	8004068 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004046:	4b63      	ldr	r3, [pc, #396]	; (80041d4 <HAL_RCC_ClockConfig+0x1b0>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f023 0207 	bic.w	r2, r3, #7
 800404e:	4961      	ldr	r1, [pc, #388]	; (80041d4 <HAL_RCC_ClockConfig+0x1b0>)
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	4313      	orrs	r3, r2
 8004054:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004056:	4b5f      	ldr	r3, [pc, #380]	; (80041d4 <HAL_RCC_ClockConfig+0x1b0>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0307 	and.w	r3, r3, #7
 800405e:	683a      	ldr	r2, [r7, #0]
 8004060:	429a      	cmp	r2, r3
 8004062:	d001      	beq.n	8004068 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e0b0      	b.n	80041ca <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0301 	and.w	r3, r3, #1
 8004070:	2b00      	cmp	r3, #0
 8004072:	d04c      	beq.n	800410e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	2b03      	cmp	r3, #3
 800407a:	d107      	bne.n	800408c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800407c:	4b56      	ldr	r3, [pc, #344]	; (80041d8 <HAL_RCC_ClockConfig+0x1b4>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d121      	bne.n	80040cc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e09e      	b.n	80041ca <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	2b02      	cmp	r3, #2
 8004092:	d107      	bne.n	80040a4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004094:	4b50      	ldr	r3, [pc, #320]	; (80041d8 <HAL_RCC_ClockConfig+0x1b4>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d115      	bne.n	80040cc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e092      	b.n	80041ca <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d107      	bne.n	80040bc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040ac:	4b4a      	ldr	r3, [pc, #296]	; (80041d8 <HAL_RCC_ClockConfig+0x1b4>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0302 	and.w	r3, r3, #2
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d109      	bne.n	80040cc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e086      	b.n	80041ca <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040bc:	4b46      	ldr	r3, [pc, #280]	; (80041d8 <HAL_RCC_ClockConfig+0x1b4>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d101      	bne.n	80040cc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e07e      	b.n	80041ca <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80040cc:	4b42      	ldr	r3, [pc, #264]	; (80041d8 <HAL_RCC_ClockConfig+0x1b4>)
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f023 0203 	bic.w	r2, r3, #3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	493f      	ldr	r1, [pc, #252]	; (80041d8 <HAL_RCC_ClockConfig+0x1b4>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040de:	f7fd febf 	bl	8001e60 <HAL_GetTick>
 80040e2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040e4:	e00a      	b.n	80040fc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040e6:	f7fd febb 	bl	8001e60 <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d901      	bls.n	80040fc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e066      	b.n	80041ca <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040fc:	4b36      	ldr	r3, [pc, #216]	; (80041d8 <HAL_RCC_ClockConfig+0x1b4>)
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f003 020c 	and.w	r2, r3, #12
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	429a      	cmp	r2, r3
 800410c:	d1eb      	bne.n	80040e6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b00      	cmp	r3, #0
 8004118:	d008      	beq.n	800412c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800411a:	4b2f      	ldr	r3, [pc, #188]	; (80041d8 <HAL_RCC_ClockConfig+0x1b4>)
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	492c      	ldr	r1, [pc, #176]	; (80041d8 <HAL_RCC_ClockConfig+0x1b4>)
 8004128:	4313      	orrs	r3, r2
 800412a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800412c:	4b29      	ldr	r3, [pc, #164]	; (80041d4 <HAL_RCC_ClockConfig+0x1b0>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0307 	and.w	r3, r3, #7
 8004134:	683a      	ldr	r2, [r7, #0]
 8004136:	429a      	cmp	r2, r3
 8004138:	d210      	bcs.n	800415c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800413a:	4b26      	ldr	r3, [pc, #152]	; (80041d4 <HAL_RCC_ClockConfig+0x1b0>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f023 0207 	bic.w	r2, r3, #7
 8004142:	4924      	ldr	r1, [pc, #144]	; (80041d4 <HAL_RCC_ClockConfig+0x1b0>)
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	4313      	orrs	r3, r2
 8004148:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800414a:	4b22      	ldr	r3, [pc, #136]	; (80041d4 <HAL_RCC_ClockConfig+0x1b0>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0307 	and.w	r3, r3, #7
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	429a      	cmp	r2, r3
 8004156:	d001      	beq.n	800415c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e036      	b.n	80041ca <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0304 	and.w	r3, r3, #4
 8004164:	2b00      	cmp	r3, #0
 8004166:	d008      	beq.n	800417a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004168:	4b1b      	ldr	r3, [pc, #108]	; (80041d8 <HAL_RCC_ClockConfig+0x1b4>)
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	4918      	ldr	r1, [pc, #96]	; (80041d8 <HAL_RCC_ClockConfig+0x1b4>)
 8004176:	4313      	orrs	r3, r2
 8004178:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0308 	and.w	r3, r3, #8
 8004182:	2b00      	cmp	r3, #0
 8004184:	d009      	beq.n	800419a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004186:	4b14      	ldr	r3, [pc, #80]	; (80041d8 <HAL_RCC_ClockConfig+0x1b4>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	00db      	lsls	r3, r3, #3
 8004194:	4910      	ldr	r1, [pc, #64]	; (80041d8 <HAL_RCC_ClockConfig+0x1b4>)
 8004196:	4313      	orrs	r3, r2
 8004198:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800419a:	f000 f825 	bl	80041e8 <HAL_RCC_GetSysClockFreq>
 800419e:	4601      	mov	r1, r0
 80041a0:	4b0d      	ldr	r3, [pc, #52]	; (80041d8 <HAL_RCC_ClockConfig+0x1b4>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	091b      	lsrs	r3, r3, #4
 80041a6:	f003 030f 	and.w	r3, r3, #15
 80041aa:	4a0c      	ldr	r2, [pc, #48]	; (80041dc <HAL_RCC_ClockConfig+0x1b8>)
 80041ac:	5cd3      	ldrb	r3, [r2, r3]
 80041ae:	f003 031f 	and.w	r3, r3, #31
 80041b2:	fa21 f303 	lsr.w	r3, r1, r3
 80041b6:	4a0a      	ldr	r2, [pc, #40]	; (80041e0 <HAL_RCC_ClockConfig+0x1bc>)
 80041b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80041ba:	4b0a      	ldr	r3, [pc, #40]	; (80041e4 <HAL_RCC_ClockConfig+0x1c0>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4618      	mov	r0, r3
 80041c0:	f7fd fa98 	bl	80016f4 <HAL_InitTick>
 80041c4:	4603      	mov	r3, r0
 80041c6:	72fb      	strb	r3, [r7, #11]

  return status;
 80041c8:	7afb      	ldrb	r3, [r7, #11]
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	40022000 	.word	0x40022000
 80041d8:	40021000 	.word	0x40021000
 80041dc:	0800970c 	.word	0x0800970c
 80041e0:	2000008c 	.word	0x2000008c
 80041e4:	2000009c 	.word	0x2000009c

080041e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b089      	sub	sp, #36	; 0x24
 80041ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80041ee:	2300      	movs	r3, #0
 80041f0:	61fb      	str	r3, [r7, #28]
 80041f2:	2300      	movs	r3, #0
 80041f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041f6:	4b3d      	ldr	r3, [pc, #244]	; (80042ec <HAL_RCC_GetSysClockFreq+0x104>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f003 030c 	and.w	r3, r3, #12
 80041fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004200:	4b3a      	ldr	r3, [pc, #232]	; (80042ec <HAL_RCC_GetSysClockFreq+0x104>)
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	f003 0303 	and.w	r3, r3, #3
 8004208:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d005      	beq.n	800421c <HAL_RCC_GetSysClockFreq+0x34>
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	2b0c      	cmp	r3, #12
 8004214:	d121      	bne.n	800425a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2b01      	cmp	r3, #1
 800421a:	d11e      	bne.n	800425a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800421c:	4b33      	ldr	r3, [pc, #204]	; (80042ec <HAL_RCC_GetSysClockFreq+0x104>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0308 	and.w	r3, r3, #8
 8004224:	2b00      	cmp	r3, #0
 8004226:	d107      	bne.n	8004238 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004228:	4b30      	ldr	r3, [pc, #192]	; (80042ec <HAL_RCC_GetSysClockFreq+0x104>)
 800422a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800422e:	0a1b      	lsrs	r3, r3, #8
 8004230:	f003 030f 	and.w	r3, r3, #15
 8004234:	61fb      	str	r3, [r7, #28]
 8004236:	e005      	b.n	8004244 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004238:	4b2c      	ldr	r3, [pc, #176]	; (80042ec <HAL_RCC_GetSysClockFreq+0x104>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	091b      	lsrs	r3, r3, #4
 800423e:	f003 030f 	and.w	r3, r3, #15
 8004242:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004244:	4a2a      	ldr	r2, [pc, #168]	; (80042f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800424c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d10d      	bne.n	8004270 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004258:	e00a      	b.n	8004270 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	2b04      	cmp	r3, #4
 800425e:	d102      	bne.n	8004266 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004260:	4b24      	ldr	r3, [pc, #144]	; (80042f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004262:	61bb      	str	r3, [r7, #24]
 8004264:	e004      	b.n	8004270 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	2b08      	cmp	r3, #8
 800426a:	d101      	bne.n	8004270 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800426c:	4b22      	ldr	r3, [pc, #136]	; (80042f8 <HAL_RCC_GetSysClockFreq+0x110>)
 800426e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	2b0c      	cmp	r3, #12
 8004274:	d133      	bne.n	80042de <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004276:	4b1d      	ldr	r3, [pc, #116]	; (80042ec <HAL_RCC_GetSysClockFreq+0x104>)
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	f003 0303 	and.w	r3, r3, #3
 800427e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	2b02      	cmp	r3, #2
 8004284:	d002      	beq.n	800428c <HAL_RCC_GetSysClockFreq+0xa4>
 8004286:	2b03      	cmp	r3, #3
 8004288:	d003      	beq.n	8004292 <HAL_RCC_GetSysClockFreq+0xaa>
 800428a:	e005      	b.n	8004298 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800428c:	4b19      	ldr	r3, [pc, #100]	; (80042f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800428e:	617b      	str	r3, [r7, #20]
      break;
 8004290:	e005      	b.n	800429e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004292:	4b19      	ldr	r3, [pc, #100]	; (80042f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004294:	617b      	str	r3, [r7, #20]
      break;
 8004296:	e002      	b.n	800429e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	617b      	str	r3, [r7, #20]
      break;
 800429c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800429e:	4b13      	ldr	r3, [pc, #76]	; (80042ec <HAL_RCC_GetSysClockFreq+0x104>)
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	091b      	lsrs	r3, r3, #4
 80042a4:	f003 0307 	and.w	r3, r3, #7
 80042a8:	3301      	adds	r3, #1
 80042aa:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80042ac:	4b0f      	ldr	r3, [pc, #60]	; (80042ec <HAL_RCC_GetSysClockFreq+0x104>)
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	0a1b      	lsrs	r3, r3, #8
 80042b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042b6:	697a      	ldr	r2, [r7, #20]
 80042b8:	fb02 f203 	mul.w	r2, r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80042c4:	4b09      	ldr	r3, [pc, #36]	; (80042ec <HAL_RCC_GetSysClockFreq+0x104>)
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	0e5b      	lsrs	r3, r3, #25
 80042ca:	f003 0303 	and.w	r3, r3, #3
 80042ce:	3301      	adds	r3, #1
 80042d0:	005b      	lsls	r3, r3, #1
 80042d2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042dc:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80042de:	69bb      	ldr	r3, [r7, #24]
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3724      	adds	r7, #36	; 0x24
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr
 80042ec:	40021000 	.word	0x40021000
 80042f0:	08009724 	.word	0x08009724
 80042f4:	00f42400 	.word	0x00f42400
 80042f8:	007a1200 	.word	0x007a1200

080042fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042fc:	b480      	push	{r7}
 80042fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004300:	4b03      	ldr	r3, [pc, #12]	; (8004310 <HAL_RCC_GetHCLKFreq+0x14>)
 8004302:	681b      	ldr	r3, [r3, #0]
}
 8004304:	4618      	mov	r0, r3
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	2000008c 	.word	0x2000008c

08004314 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004318:	f7ff fff0 	bl	80042fc <HAL_RCC_GetHCLKFreq>
 800431c:	4601      	mov	r1, r0
 800431e:	4b06      	ldr	r3, [pc, #24]	; (8004338 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	0a1b      	lsrs	r3, r3, #8
 8004324:	f003 0307 	and.w	r3, r3, #7
 8004328:	4a04      	ldr	r2, [pc, #16]	; (800433c <HAL_RCC_GetPCLK1Freq+0x28>)
 800432a:	5cd3      	ldrb	r3, [r2, r3]
 800432c:	f003 031f 	and.w	r3, r3, #31
 8004330:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004334:	4618      	mov	r0, r3
 8004336:	bd80      	pop	{r7, pc}
 8004338:	40021000 	.word	0x40021000
 800433c:	0800971c 	.word	0x0800971c

08004340 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004344:	f7ff ffda 	bl	80042fc <HAL_RCC_GetHCLKFreq>
 8004348:	4601      	mov	r1, r0
 800434a:	4b06      	ldr	r3, [pc, #24]	; (8004364 <HAL_RCC_GetPCLK2Freq+0x24>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	0adb      	lsrs	r3, r3, #11
 8004350:	f003 0307 	and.w	r3, r3, #7
 8004354:	4a04      	ldr	r2, [pc, #16]	; (8004368 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004356:	5cd3      	ldrb	r3, [r2, r3]
 8004358:	f003 031f 	and.w	r3, r3, #31
 800435c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004360:	4618      	mov	r0, r3
 8004362:	bd80      	pop	{r7, pc}
 8004364:	40021000 	.word	0x40021000
 8004368:	0800971c 	.word	0x0800971c

0800436c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	220f      	movs	r2, #15
 800437a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800437c:	4b12      	ldr	r3, [pc, #72]	; (80043c8 <HAL_RCC_GetClockConfig+0x5c>)
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f003 0203 	and.w	r2, r3, #3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004388:	4b0f      	ldr	r3, [pc, #60]	; (80043c8 <HAL_RCC_GetClockConfig+0x5c>)
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004394:	4b0c      	ldr	r3, [pc, #48]	; (80043c8 <HAL_RCC_GetClockConfig+0x5c>)
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80043a0:	4b09      	ldr	r3, [pc, #36]	; (80043c8 <HAL_RCC_GetClockConfig+0x5c>)
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	08db      	lsrs	r3, r3, #3
 80043a6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80043ae:	4b07      	ldr	r3, [pc, #28]	; (80043cc <HAL_RCC_GetClockConfig+0x60>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0207 	and.w	r2, r3, #7
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	601a      	str	r2, [r3, #0]
}
 80043ba:	bf00      	nop
 80043bc:	370c      	adds	r7, #12
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	40021000 	.word	0x40021000
 80043cc:	40022000 	.word	0x40022000

080043d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b086      	sub	sp, #24
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80043d8:	2300      	movs	r3, #0
 80043da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80043dc:	4b2a      	ldr	r3, [pc, #168]	; (8004488 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d003      	beq.n	80043f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80043e8:	f7ff f930 	bl	800364c <HAL_PWREx_GetVoltageRange>
 80043ec:	6178      	str	r0, [r7, #20]
 80043ee:	e014      	b.n	800441a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80043f0:	4b25      	ldr	r3, [pc, #148]	; (8004488 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f4:	4a24      	ldr	r2, [pc, #144]	; (8004488 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043fa:	6593      	str	r3, [r2, #88]	; 0x58
 80043fc:	4b22      	ldr	r3, [pc, #136]	; (8004488 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004404:	60fb      	str	r3, [r7, #12]
 8004406:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004408:	f7ff f920 	bl	800364c <HAL_PWREx_GetVoltageRange>
 800440c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800440e:	4b1e      	ldr	r3, [pc, #120]	; (8004488 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004412:	4a1d      	ldr	r2, [pc, #116]	; (8004488 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004414:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004418:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004420:	d10b      	bne.n	800443a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2b80      	cmp	r3, #128	; 0x80
 8004426:	d919      	bls.n	800445c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2ba0      	cmp	r3, #160	; 0xa0
 800442c:	d902      	bls.n	8004434 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800442e:	2302      	movs	r3, #2
 8004430:	613b      	str	r3, [r7, #16]
 8004432:	e013      	b.n	800445c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004434:	2301      	movs	r3, #1
 8004436:	613b      	str	r3, [r7, #16]
 8004438:	e010      	b.n	800445c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2b80      	cmp	r3, #128	; 0x80
 800443e:	d902      	bls.n	8004446 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004440:	2303      	movs	r3, #3
 8004442:	613b      	str	r3, [r7, #16]
 8004444:	e00a      	b.n	800445c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2b80      	cmp	r3, #128	; 0x80
 800444a:	d102      	bne.n	8004452 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800444c:	2302      	movs	r3, #2
 800444e:	613b      	str	r3, [r7, #16]
 8004450:	e004      	b.n	800445c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2b70      	cmp	r3, #112	; 0x70
 8004456:	d101      	bne.n	800445c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004458:	2301      	movs	r3, #1
 800445a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800445c:	4b0b      	ldr	r3, [pc, #44]	; (800448c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f023 0207 	bic.w	r2, r3, #7
 8004464:	4909      	ldr	r1, [pc, #36]	; (800448c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	4313      	orrs	r3, r2
 800446a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800446c:	4b07      	ldr	r3, [pc, #28]	; (800448c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0307 	and.w	r3, r3, #7
 8004474:	693a      	ldr	r2, [r7, #16]
 8004476:	429a      	cmp	r2, r3
 8004478:	d001      	beq.n	800447e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e000      	b.n	8004480 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3718      	adds	r7, #24
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	40021000 	.word	0x40021000
 800448c:	40022000 	.word	0x40022000

08004490 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b086      	sub	sp, #24
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004498:	2300      	movs	r3, #0
 800449a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800449c:	2300      	movs	r3, #0
 800449e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d03f      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044b4:	d01c      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80044b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044ba:	d802      	bhi.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d00e      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80044c0:	e01f      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80044c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80044c6:	d003      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80044c8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80044cc:	d01c      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80044ce:	e018      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80044d0:	4b85      	ldr	r3, [pc, #532]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	4a84      	ldr	r2, [pc, #528]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80044d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044da:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044dc:	e015      	b.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	3304      	adds	r3, #4
 80044e2:	2100      	movs	r1, #0
 80044e4:	4618      	mov	r0, r3
 80044e6:	f000 fac9 	bl	8004a7c <RCCEx_PLLSAI1_Config>
 80044ea:	4603      	mov	r3, r0
 80044ec:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044ee:	e00c      	b.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	3320      	adds	r3, #32
 80044f4:	2100      	movs	r1, #0
 80044f6:	4618      	mov	r0, r3
 80044f8:	f000 fbb0 	bl	8004c5c <RCCEx_PLLSAI2_Config>
 80044fc:	4603      	mov	r3, r0
 80044fe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004500:	e003      	b.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	74fb      	strb	r3, [r7, #19]
      break;
 8004506:	e000      	b.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004508:	bf00      	nop
    }

    if(ret == HAL_OK)
 800450a:	7cfb      	ldrb	r3, [r7, #19]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d10b      	bne.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004510:	4b75      	ldr	r3, [pc, #468]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004516:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800451e:	4972      	ldr	r1, [pc, #456]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004520:	4313      	orrs	r3, r2
 8004522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004526:	e001      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004528:	7cfb      	ldrb	r3, [r7, #19]
 800452a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d03f      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800453c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004540:	d01c      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004542:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004546:	d802      	bhi.n	800454e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8004548:	2b00      	cmp	r3, #0
 800454a:	d00e      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xda>
 800454c:	e01f      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800454e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004552:	d003      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8004554:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004558:	d01c      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800455a:	e018      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800455c:	4b62      	ldr	r3, [pc, #392]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	4a61      	ldr	r2, [pc, #388]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004562:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004566:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004568:	e015      	b.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	3304      	adds	r3, #4
 800456e:	2100      	movs	r1, #0
 8004570:	4618      	mov	r0, r3
 8004572:	f000 fa83 	bl	8004a7c <RCCEx_PLLSAI1_Config>
 8004576:	4603      	mov	r3, r0
 8004578:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800457a:	e00c      	b.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	3320      	adds	r3, #32
 8004580:	2100      	movs	r1, #0
 8004582:	4618      	mov	r0, r3
 8004584:	f000 fb6a 	bl	8004c5c <RCCEx_PLLSAI2_Config>
 8004588:	4603      	mov	r3, r0
 800458a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800458c:	e003      	b.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	74fb      	strb	r3, [r7, #19]
      break;
 8004592:	e000      	b.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004594:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004596:	7cfb      	ldrb	r3, [r7, #19]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d10b      	bne.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800459c:	4b52      	ldr	r3, [pc, #328]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800459e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045aa:	494f      	ldr	r1, [pc, #316]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80045b2:	e001      	b.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045b4:	7cfb      	ldrb	r3, [r7, #19]
 80045b6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f000 80a0 	beq.w	8004706 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045c6:	2300      	movs	r3, #0
 80045c8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80045ca:	4b47      	ldr	r3, [pc, #284]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80045cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d101      	bne.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80045d6:	2301      	movs	r3, #1
 80045d8:	e000      	b.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80045da:	2300      	movs	r3, #0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00d      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045e0:	4b41      	ldr	r3, [pc, #260]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80045e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e4:	4a40      	ldr	r2, [pc, #256]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80045e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045ea:	6593      	str	r3, [r2, #88]	; 0x58
 80045ec:	4b3e      	ldr	r3, [pc, #248]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80045ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045f4:	60bb      	str	r3, [r7, #8]
 80045f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045f8:	2301      	movs	r3, #1
 80045fa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045fc:	4b3b      	ldr	r3, [pc, #236]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a3a      	ldr	r2, [pc, #232]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004602:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004606:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004608:	f7fd fc2a 	bl	8001e60 <HAL_GetTick>
 800460c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800460e:	e009      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004610:	f7fd fc26 	bl	8001e60 <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b02      	cmp	r3, #2
 800461c:	d902      	bls.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	74fb      	strb	r3, [r7, #19]
        break;
 8004622:	e005      	b.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004624:	4b31      	ldr	r3, [pc, #196]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800462c:	2b00      	cmp	r3, #0
 800462e:	d0ef      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8004630:	7cfb      	ldrb	r3, [r7, #19]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d15c      	bne.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004636:	4b2c      	ldr	r3, [pc, #176]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800463c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004640:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d01f      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	429a      	cmp	r2, r3
 8004652:	d019      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004654:	4b24      	ldr	r3, [pc, #144]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800465a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800465e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004660:	4b21      	ldr	r3, [pc, #132]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004666:	4a20      	ldr	r2, [pc, #128]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800466c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004670:	4b1d      	ldr	r3, [pc, #116]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004676:	4a1c      	ldr	r2, [pc, #112]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004678:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800467c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004680:	4a19      	ldr	r2, [pc, #100]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	2b00      	cmp	r3, #0
 8004690:	d016      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004692:	f7fd fbe5 	bl	8001e60 <HAL_GetTick>
 8004696:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004698:	e00b      	b.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800469a:	f7fd fbe1 	bl	8001e60 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d902      	bls.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	74fb      	strb	r3, [r7, #19]
            break;
 80046b0:	e006      	b.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046b2:	4b0d      	ldr	r3, [pc, #52]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80046b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b8:	f003 0302 	and.w	r3, r3, #2
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d0ec      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80046c0:	7cfb      	ldrb	r3, [r7, #19]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d10c      	bne.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046c6:	4b08      	ldr	r3, [pc, #32]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80046c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046d6:	4904      	ldr	r1, [pc, #16]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80046de:	e009      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80046e0:	7cfb      	ldrb	r3, [r7, #19]
 80046e2:	74bb      	strb	r3, [r7, #18]
 80046e4:	e006      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80046e6:	bf00      	nop
 80046e8:	40021000 	.word	0x40021000
 80046ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046f0:	7cfb      	ldrb	r3, [r7, #19]
 80046f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046f4:	7c7b      	ldrb	r3, [r7, #17]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d105      	bne.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046fa:	4b9e      	ldr	r3, [pc, #632]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046fe:	4a9d      	ldr	r2, [pc, #628]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004700:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004704:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0301 	and.w	r3, r3, #1
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00a      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004712:	4b98      	ldr	r3, [pc, #608]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004718:	f023 0203 	bic.w	r2, r3, #3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004720:	4994      	ldr	r1, [pc, #592]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004722:	4313      	orrs	r3, r2
 8004724:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00a      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004734:	4b8f      	ldr	r3, [pc, #572]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800473a:	f023 020c 	bic.w	r2, r3, #12
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004742:	498c      	ldr	r1, [pc, #560]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004744:	4313      	orrs	r3, r2
 8004746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0304 	and.w	r3, r3, #4
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00a      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004756:	4b87      	ldr	r3, [pc, #540]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800475c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004764:	4983      	ldr	r1, [pc, #524]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004766:	4313      	orrs	r3, r2
 8004768:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0308 	and.w	r3, r3, #8
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00a      	beq.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004778:	4b7e      	ldr	r3, [pc, #504]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800477a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800477e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004786:	497b      	ldr	r1, [pc, #492]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004788:	4313      	orrs	r3, r2
 800478a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0310 	and.w	r3, r3, #16
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00a      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800479a:	4b76      	ldr	r3, [pc, #472]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800479c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047a8:	4972      	ldr	r1, [pc, #456]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0320 	and.w	r3, r3, #32
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00a      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80047bc:	4b6d      	ldr	r3, [pc, #436]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ca:	496a      	ldr	r1, [pc, #424]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00a      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047de:	4b65      	ldr	r3, [pc, #404]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ec:	4961      	ldr	r1, [pc, #388]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00a      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004800:	4b5c      	ldr	r3, [pc, #368]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004806:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800480e:	4959      	ldr	r1, [pc, #356]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004810:	4313      	orrs	r3, r2
 8004812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00a      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004822:	4b54      	ldr	r3, [pc, #336]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004828:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004830:	4950      	ldr	r1, [pc, #320]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004832:	4313      	orrs	r3, r2
 8004834:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00a      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004844:	4b4b      	ldr	r3, [pc, #300]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800484a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004852:	4948      	ldr	r1, [pc, #288]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004854:	4313      	orrs	r3, r2
 8004856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00a      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004866:	4b43      	ldr	r3, [pc, #268]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800486c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004874:	493f      	ldr	r1, [pc, #252]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004876:	4313      	orrs	r3, r2
 8004878:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004884:	2b00      	cmp	r3, #0
 8004886:	d028      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004888:	4b3a      	ldr	r3, [pc, #232]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800488a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800488e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004896:	4937      	ldr	r1, [pc, #220]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004898:	4313      	orrs	r3, r2
 800489a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048a6:	d106      	bne.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048a8:	4b32      	ldr	r3, [pc, #200]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	4a31      	ldr	r2, [pc, #196]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80048ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048b2:	60d3      	str	r3, [r2, #12]
 80048b4:	e011      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048be:	d10c      	bne.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	3304      	adds	r3, #4
 80048c4:	2101      	movs	r1, #1
 80048c6:	4618      	mov	r0, r3
 80048c8:	f000 f8d8 	bl	8004a7c <RCCEx_PLLSAI1_Config>
 80048cc:	4603      	mov	r3, r0
 80048ce:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80048d0:	7cfb      	ldrb	r3, [r7, #19]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d001      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80048d6:	7cfb      	ldrb	r3, [r7, #19]
 80048d8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d028      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80048e6:	4b23      	ldr	r3, [pc, #140]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80048e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f4:	491f      	ldr	r1, [pc, #124]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004900:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004904:	d106      	bne.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004906:	4b1b      	ldr	r3, [pc, #108]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	4a1a      	ldr	r2, [pc, #104]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800490c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004910:	60d3      	str	r3, [r2, #12]
 8004912:	e011      	b.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004918:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800491c:	d10c      	bne.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	3304      	adds	r3, #4
 8004922:	2101      	movs	r1, #1
 8004924:	4618      	mov	r0, r3
 8004926:	f000 f8a9 	bl	8004a7c <RCCEx_PLLSAI1_Config>
 800492a:	4603      	mov	r3, r0
 800492c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800492e:	7cfb      	ldrb	r3, [r7, #19]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d001      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8004934:	7cfb      	ldrb	r3, [r7, #19]
 8004936:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d02b      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004944:	4b0b      	ldr	r3, [pc, #44]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800494a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004952:	4908      	ldr	r1, [pc, #32]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004954:	4313      	orrs	r3, r2
 8004956:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800495e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004962:	d109      	bne.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004964:	4b03      	ldr	r3, [pc, #12]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	4a02      	ldr	r2, [pc, #8]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800496a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800496e:	60d3      	str	r3, [r2, #12]
 8004970:	e014      	b.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004972:	bf00      	nop
 8004974:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800497c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004980:	d10c      	bne.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	3304      	adds	r3, #4
 8004986:	2101      	movs	r1, #1
 8004988:	4618      	mov	r0, r3
 800498a:	f000 f877 	bl	8004a7c <RCCEx_PLLSAI1_Config>
 800498e:	4603      	mov	r3, r0
 8004990:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004992:	7cfb      	ldrb	r3, [r7, #19]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d001      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8004998:	7cfb      	ldrb	r3, [r7, #19]
 800499a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d02f      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80049a8:	4b2b      	ldr	r3, [pc, #172]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049b6:	4928      	ldr	r1, [pc, #160]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049c6:	d10d      	bne.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	3304      	adds	r3, #4
 80049cc:	2102      	movs	r1, #2
 80049ce:	4618      	mov	r0, r3
 80049d0:	f000 f854 	bl	8004a7c <RCCEx_PLLSAI1_Config>
 80049d4:	4603      	mov	r3, r0
 80049d6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049d8:	7cfb      	ldrb	r3, [r7, #19]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d014      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80049de:	7cfb      	ldrb	r3, [r7, #19]
 80049e0:	74bb      	strb	r3, [r7, #18]
 80049e2:	e011      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049ec:	d10c      	bne.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	3320      	adds	r3, #32
 80049f2:	2102      	movs	r1, #2
 80049f4:	4618      	mov	r0, r3
 80049f6:	f000 f931 	bl	8004c5c <RCCEx_PLLSAI2_Config>
 80049fa:	4603      	mov	r3, r0
 80049fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049fe:	7cfb      	ldrb	r3, [r7, #19]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d001      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004a04:	7cfb      	ldrb	r3, [r7, #19]
 8004a06:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d00a      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a14:	4b10      	ldr	r3, [pc, #64]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a1a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a22:	490d      	ldr	r1, [pc, #52]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d00b      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a36:	4b08      	ldr	r3, [pc, #32]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a3c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a46:	4904      	ldr	r1, [pc, #16]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004a4e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3718      	adds	r7, #24
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	40021000 	.word	0x40021000

08004a5c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004a60:	4b05      	ldr	r3, [pc, #20]	; (8004a78 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a04      	ldr	r2, [pc, #16]	; (8004a78 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004a66:	f043 0304 	orr.w	r3, r3, #4
 8004a6a:	6013      	str	r3, [r2, #0]
}
 8004a6c:	bf00      	nop
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	40021000 	.word	0x40021000

08004a7c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a86:	2300      	movs	r3, #0
 8004a88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a8a:	4b73      	ldr	r3, [pc, #460]	; (8004c58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	f003 0303 	and.w	r3, r3, #3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d018      	beq.n	8004ac8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004a96:	4b70      	ldr	r3, [pc, #448]	; (8004c58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	f003 0203 	and.w	r2, r3, #3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d10d      	bne.n	8004ac2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
       ||
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d009      	beq.n	8004ac2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004aae:	4b6a      	ldr	r3, [pc, #424]	; (8004c58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	091b      	lsrs	r3, r3, #4
 8004ab4:	f003 0307 	and.w	r3, r3, #7
 8004ab8:	1c5a      	adds	r2, r3, #1
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
       ||
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d044      	beq.n	8004b4c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	73fb      	strb	r3, [r7, #15]
 8004ac6:	e041      	b.n	8004b4c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	d00c      	beq.n	8004aea <RCCEx_PLLSAI1_Config+0x6e>
 8004ad0:	2b03      	cmp	r3, #3
 8004ad2:	d013      	beq.n	8004afc <RCCEx_PLLSAI1_Config+0x80>
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d120      	bne.n	8004b1a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ad8:	4b5f      	ldr	r3, [pc, #380]	; (8004c58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0302 	and.w	r3, r3, #2
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d11d      	bne.n	8004b20 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ae8:	e01a      	b.n	8004b20 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004aea:	4b5b      	ldr	r3, [pc, #364]	; (8004c58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d116      	bne.n	8004b24 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004afa:	e013      	b.n	8004b24 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004afc:	4b56      	ldr	r3, [pc, #344]	; (8004c58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d10f      	bne.n	8004b28 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b08:	4b53      	ldr	r3, [pc, #332]	; (8004c58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d109      	bne.n	8004b28 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b18:	e006      	b.n	8004b28 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	73fb      	strb	r3, [r7, #15]
      break;
 8004b1e:	e004      	b.n	8004b2a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004b20:	bf00      	nop
 8004b22:	e002      	b.n	8004b2a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004b24:	bf00      	nop
 8004b26:	e000      	b.n	8004b2a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004b28:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b2a:	7bfb      	ldrb	r3, [r7, #15]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d10d      	bne.n	8004b4c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004b30:	4b49      	ldr	r3, [pc, #292]	; (8004c58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6819      	ldr	r1, [r3, #0]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	3b01      	subs	r3, #1
 8004b42:	011b      	lsls	r3, r3, #4
 8004b44:	430b      	orrs	r3, r1
 8004b46:	4944      	ldr	r1, [pc, #272]	; (8004c58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004b4c:	7bfb      	ldrb	r3, [r7, #15]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d17d      	bne.n	8004c4e <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004b52:	4b41      	ldr	r3, [pc, #260]	; (8004c58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a40      	ldr	r2, [pc, #256]	; (8004c58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b58:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b5e:	f7fd f97f 	bl	8001e60 <HAL_GetTick>
 8004b62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b64:	e009      	b.n	8004b7a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b66:	f7fd f97b 	bl	8001e60 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d902      	bls.n	8004b7a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	73fb      	strb	r3, [r7, #15]
        break;
 8004b78:	e005      	b.n	8004b86 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b7a:	4b37      	ldr	r3, [pc, #220]	; (8004c58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1ef      	bne.n	8004b66 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004b86:	7bfb      	ldrb	r3, [r7, #15]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d160      	bne.n	8004c4e <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d111      	bne.n	8004bb6 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b92:	4b31      	ldr	r3, [pc, #196]	; (8004c58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004b9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	6892      	ldr	r2, [r2, #8]
 8004ba2:	0211      	lsls	r1, r2, #8
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	68d2      	ldr	r2, [r2, #12]
 8004ba8:	0912      	lsrs	r2, r2, #4
 8004baa:	0452      	lsls	r2, r2, #17
 8004bac:	430a      	orrs	r2, r1
 8004bae:	492a      	ldr	r1, [pc, #168]	; (8004c58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	610b      	str	r3, [r1, #16]
 8004bb4:	e027      	b.n	8004c06 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d112      	bne.n	8004be2 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004bbc:	4b26      	ldr	r3, [pc, #152]	; (8004c58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004bc4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	6892      	ldr	r2, [r2, #8]
 8004bcc:	0211      	lsls	r1, r2, #8
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	6912      	ldr	r2, [r2, #16]
 8004bd2:	0852      	lsrs	r2, r2, #1
 8004bd4:	3a01      	subs	r2, #1
 8004bd6:	0552      	lsls	r2, r2, #21
 8004bd8:	430a      	orrs	r2, r1
 8004bda:	491f      	ldr	r1, [pc, #124]	; (8004c58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	610b      	str	r3, [r1, #16]
 8004be0:	e011      	b.n	8004c06 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004be2:	4b1d      	ldr	r3, [pc, #116]	; (8004c58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004bea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	6892      	ldr	r2, [r2, #8]
 8004bf2:	0211      	lsls	r1, r2, #8
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	6952      	ldr	r2, [r2, #20]
 8004bf8:	0852      	lsrs	r2, r2, #1
 8004bfa:	3a01      	subs	r2, #1
 8004bfc:	0652      	lsls	r2, r2, #25
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	4915      	ldr	r1, [pc, #84]	; (8004c58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004c06:	4b14      	ldr	r3, [pc, #80]	; (8004c58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a13      	ldr	r2, [pc, #76]	; (8004c58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c0c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c10:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c12:	f7fd f925 	bl	8001e60 <HAL_GetTick>
 8004c16:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c18:	e009      	b.n	8004c2e <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c1a:	f7fd f921 	bl	8001e60 <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d902      	bls.n	8004c2e <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	73fb      	strb	r3, [r7, #15]
          break;
 8004c2c:	e005      	b.n	8004c3a <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c2e:	4b0a      	ldr	r3, [pc, #40]	; (8004c58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d0ef      	beq.n	8004c1a <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8004c3a:	7bfb      	ldrb	r3, [r7, #15]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d106      	bne.n	8004c4e <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004c40:	4b05      	ldr	r3, [pc, #20]	; (8004c58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c42:	691a      	ldr	r2, [r3, #16]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	4903      	ldr	r1, [pc, #12]	; (8004c58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3710      	adds	r7, #16
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	40021000 	.word	0x40021000

08004c5c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c66:	2300      	movs	r3, #0
 8004c68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004c6a:	4b68      	ldr	r3, [pc, #416]	; (8004e0c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	f003 0303 	and.w	r3, r3, #3
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d018      	beq.n	8004ca8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004c76:	4b65      	ldr	r3, [pc, #404]	; (8004e0c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	f003 0203 	and.w	r2, r3, #3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d10d      	bne.n	8004ca2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
       ||
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d009      	beq.n	8004ca2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004c8e:	4b5f      	ldr	r3, [pc, #380]	; (8004e0c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	091b      	lsrs	r3, r3, #4
 8004c94:	f003 0307 	and.w	r3, r3, #7
 8004c98:	1c5a      	adds	r2, r3, #1
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685b      	ldr	r3, [r3, #4]
       ||
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d044      	beq.n	8004d2c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	73fb      	strb	r3, [r7, #15]
 8004ca6:	e041      	b.n	8004d2c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d00c      	beq.n	8004cca <RCCEx_PLLSAI2_Config+0x6e>
 8004cb0:	2b03      	cmp	r3, #3
 8004cb2:	d013      	beq.n	8004cdc <RCCEx_PLLSAI2_Config+0x80>
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d120      	bne.n	8004cfa <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004cb8:	4b54      	ldr	r3, [pc, #336]	; (8004e0c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0302 	and.w	r3, r3, #2
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d11d      	bne.n	8004d00 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cc8:	e01a      	b.n	8004d00 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004cca:	4b50      	ldr	r3, [pc, #320]	; (8004e0c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d116      	bne.n	8004d04 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cda:	e013      	b.n	8004d04 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004cdc:	4b4b      	ldr	r3, [pc, #300]	; (8004e0c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d10f      	bne.n	8004d08 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004ce8:	4b48      	ldr	r3, [pc, #288]	; (8004e0c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d109      	bne.n	8004d08 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004cf8:	e006      	b.n	8004d08 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	73fb      	strb	r3, [r7, #15]
      break;
 8004cfe:	e004      	b.n	8004d0a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004d00:	bf00      	nop
 8004d02:	e002      	b.n	8004d0a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004d04:	bf00      	nop
 8004d06:	e000      	b.n	8004d0a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004d08:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d0a:	7bfb      	ldrb	r3, [r7, #15]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d10d      	bne.n	8004d2c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d10:	4b3e      	ldr	r3, [pc, #248]	; (8004e0c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6819      	ldr	r1, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	3b01      	subs	r3, #1
 8004d22:	011b      	lsls	r3, r3, #4
 8004d24:	430b      	orrs	r3, r1
 8004d26:	4939      	ldr	r1, [pc, #228]	; (8004e0c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004d2c:	7bfb      	ldrb	r3, [r7, #15]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d167      	bne.n	8004e02 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004d32:	4b36      	ldr	r3, [pc, #216]	; (8004e0c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a35      	ldr	r2, [pc, #212]	; (8004e0c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d3e:	f7fd f88f 	bl	8001e60 <HAL_GetTick>
 8004d42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d44:	e009      	b.n	8004d5a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d46:	f7fd f88b 	bl	8001e60 <HAL_GetTick>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d902      	bls.n	8004d5a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	73fb      	strb	r3, [r7, #15]
        break;
 8004d58:	e005      	b.n	8004d66 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d5a:	4b2c      	ldr	r3, [pc, #176]	; (8004e0c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1ef      	bne.n	8004d46 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004d66:	7bfb      	ldrb	r3, [r7, #15]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d14a      	bne.n	8004e02 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d111      	bne.n	8004d96 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d72:	4b26      	ldr	r3, [pc, #152]	; (8004e0c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004d7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	6892      	ldr	r2, [r2, #8]
 8004d82:	0211      	lsls	r1, r2, #8
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	68d2      	ldr	r2, [r2, #12]
 8004d88:	0912      	lsrs	r2, r2, #4
 8004d8a:	0452      	lsls	r2, r2, #17
 8004d8c:	430a      	orrs	r2, r1
 8004d8e:	491f      	ldr	r1, [pc, #124]	; (8004e0c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d90:	4313      	orrs	r3, r2
 8004d92:	614b      	str	r3, [r1, #20]
 8004d94:	e011      	b.n	8004dba <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d96:	4b1d      	ldr	r3, [pc, #116]	; (8004e0c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004d9e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	6892      	ldr	r2, [r2, #8]
 8004da6:	0211      	lsls	r1, r2, #8
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	6912      	ldr	r2, [r2, #16]
 8004dac:	0852      	lsrs	r2, r2, #1
 8004dae:	3a01      	subs	r2, #1
 8004db0:	0652      	lsls	r2, r2, #25
 8004db2:	430a      	orrs	r2, r1
 8004db4:	4915      	ldr	r1, [pc, #84]	; (8004e0c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004dba:	4b14      	ldr	r3, [pc, #80]	; (8004e0c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a13      	ldr	r2, [pc, #76]	; (8004e0c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dc4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dc6:	f7fd f84b 	bl	8001e60 <HAL_GetTick>
 8004dca:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004dcc:	e009      	b.n	8004de2 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004dce:	f7fd f847 	bl	8001e60 <HAL_GetTick>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d902      	bls.n	8004de2 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	73fb      	strb	r3, [r7, #15]
          break;
 8004de0:	e005      	b.n	8004dee <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004de2:	4b0a      	ldr	r3, [pc, #40]	; (8004e0c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d0ef      	beq.n	8004dce <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8004dee:	7bfb      	ldrb	r3, [r7, #15]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d106      	bne.n	8004e02 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004df4:	4b05      	ldr	r3, [pc, #20]	; (8004e0c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004df6:	695a      	ldr	r2, [r3, #20]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	695b      	ldr	r3, [r3, #20]
 8004dfc:	4903      	ldr	r1, [pc, #12]	; (8004e0c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3710      	adds	r7, #16
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	40021000 	.word	0x40021000

08004e10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d101      	bne.n	8004e22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e07c      	b.n	8004f1c <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d106      	bne.n	8004e42 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f7fc fb33 	bl	80014a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2202      	movs	r2, #2
 8004e46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e58:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e62:	d902      	bls.n	8004e6a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004e64:	2300      	movs	r3, #0
 8004e66:	60fb      	str	r3, [r7, #12]
 8004e68:	e002      	b.n	8004e70 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004e6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e6e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004e78:	d007      	beq.n	8004e8a <HAL_SPI_Init+0x7a>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e82:	d002      	beq.n	8004e8a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d10b      	bne.n	8004eaa <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e9a:	d903      	bls.n	8004ea4 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2202      	movs	r2, #2
 8004ea0:	631a      	str	r2, [r3, #48]	; 0x30
 8004ea2:	e002      	b.n	8004eaa <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	685a      	ldr	r2, [r3, #4]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	431a      	orrs	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	431a      	orrs	r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	431a      	orrs	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	699b      	ldr	r3, [r3, #24]
 8004ec4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ec8:	431a      	orrs	r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	69db      	ldr	r3, [r3, #28]
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a1b      	ldr	r3, [r3, #32]
 8004ed4:	ea42 0103 	orr.w	r1, r2, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	430a      	orrs	r2, r1
 8004ee2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	699b      	ldr	r3, [r3, #24]
 8004ee8:	0c1b      	lsrs	r3, r3, #16
 8004eea:	f003 0204 	and.w	r2, r3, #4
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ef8:	431a      	orrs	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	ea42 0103 	orr.w	r1, r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2201      	movs	r2, #1
 8004f16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3710      	adds	r7, #16
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d101      	bne.n	8004f36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e01d      	b.n	8004f72 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d106      	bne.n	8004f50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 f815 	bl	8004f7a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2202      	movs	r2, #2
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	3304      	adds	r3, #4
 8004f60:	4619      	mov	r1, r3
 8004f62:	4610      	mov	r0, r2
 8004f64:	f000 f986 	bl	8005274 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3708      	adds	r7, #8
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}

08004f7a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	b083      	sub	sp, #12
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004f82:	bf00      	nop
 8004f84:	370c      	adds	r7, #12
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
	...

08004f90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b085      	sub	sp, #20
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	68da      	ldr	r2, [r3, #12]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f042 0201 	orr.w	r2, r2, #1
 8004fa6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	689a      	ldr	r2, [r3, #8]
 8004fae:	4b0c      	ldr	r3, [pc, #48]	; (8004fe0 <HAL_TIM_Base_Start_IT+0x50>)
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2b06      	cmp	r3, #6
 8004fb8:	d00b      	beq.n	8004fd2 <HAL_TIM_Base_Start_IT+0x42>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fc0:	d007      	beq.n	8004fd2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f042 0201 	orr.w	r2, r2, #1
 8004fd0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3714      	adds	r7, #20
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr
 8004fe0:	00010007 	.word	0x00010007

08004fe4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	f003 0302 	and.w	r3, r3, #2
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d122      	bne.n	8005040 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	f003 0302 	and.w	r3, r3, #2
 8005004:	2b02      	cmp	r3, #2
 8005006:	d11b      	bne.n	8005040 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f06f 0202 	mvn.w	r2, #2
 8005010:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2201      	movs	r2, #1
 8005016:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	f003 0303 	and.w	r3, r3, #3
 8005022:	2b00      	cmp	r3, #0
 8005024:	d003      	beq.n	800502e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 f905 	bl	8005236 <HAL_TIM_IC_CaptureCallback>
 800502c:	e005      	b.n	800503a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 f8f7 	bl	8005222 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 f908 	bl	800524a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	f003 0304 	and.w	r3, r3, #4
 800504a:	2b04      	cmp	r3, #4
 800504c:	d122      	bne.n	8005094 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	f003 0304 	and.w	r3, r3, #4
 8005058:	2b04      	cmp	r3, #4
 800505a:	d11b      	bne.n	8005094 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f06f 0204 	mvn.w	r2, #4
 8005064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2202      	movs	r2, #2
 800506a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005076:	2b00      	cmp	r3, #0
 8005078:	d003      	beq.n	8005082 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 f8db 	bl	8005236 <HAL_TIM_IC_CaptureCallback>
 8005080:	e005      	b.n	800508e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 f8cd 	bl	8005222 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f000 f8de 	bl	800524a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	f003 0308 	and.w	r3, r3, #8
 800509e:	2b08      	cmp	r3, #8
 80050a0:	d122      	bne.n	80050e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	f003 0308 	and.w	r3, r3, #8
 80050ac:	2b08      	cmp	r3, #8
 80050ae:	d11b      	bne.n	80050e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f06f 0208 	mvn.w	r2, #8
 80050b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2204      	movs	r2, #4
 80050be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	69db      	ldr	r3, [r3, #28]
 80050c6:	f003 0303 	and.w	r3, r3, #3
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d003      	beq.n	80050d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 f8b1 	bl	8005236 <HAL_TIM_IC_CaptureCallback>
 80050d4:	e005      	b.n	80050e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 f8a3 	bl	8005222 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f000 f8b4 	bl	800524a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	f003 0310 	and.w	r3, r3, #16
 80050f2:	2b10      	cmp	r3, #16
 80050f4:	d122      	bne.n	800513c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	f003 0310 	and.w	r3, r3, #16
 8005100:	2b10      	cmp	r3, #16
 8005102:	d11b      	bne.n	800513c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f06f 0210 	mvn.w	r2, #16
 800510c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2208      	movs	r2, #8
 8005112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	69db      	ldr	r3, [r3, #28]
 800511a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800511e:	2b00      	cmp	r3, #0
 8005120:	d003      	beq.n	800512a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 f887 	bl	8005236 <HAL_TIM_IC_CaptureCallback>
 8005128:	e005      	b.n	8005136 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 f879 	bl	8005222 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f000 f88a 	bl	800524a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	f003 0301 	and.w	r3, r3, #1
 8005146:	2b01      	cmp	r3, #1
 8005148:	d10e      	bne.n	8005168 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	f003 0301 	and.w	r3, r3, #1
 8005154:	2b01      	cmp	r3, #1
 8005156:	d107      	bne.n	8005168 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f06f 0201 	mvn.w	r2, #1
 8005160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f7fc f874 	bl	8001250 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005172:	2b80      	cmp	r3, #128	; 0x80
 8005174:	d10e      	bne.n	8005194 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005180:	2b80      	cmp	r3, #128	; 0x80
 8005182:	d107      	bne.n	8005194 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800518c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 f914 	bl	80053bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800519e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051a2:	d10e      	bne.n	80051c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ae:	2b80      	cmp	r3, #128	; 0x80
 80051b0:	d107      	bne.n	80051c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80051ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f000 f907 	bl	80053d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051cc:	2b40      	cmp	r3, #64	; 0x40
 80051ce:	d10e      	bne.n	80051ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051da:	2b40      	cmp	r3, #64	; 0x40
 80051dc:	d107      	bne.n	80051ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80051e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 f838 	bl	800525e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	691b      	ldr	r3, [r3, #16]
 80051f4:	f003 0320 	and.w	r3, r3, #32
 80051f8:	2b20      	cmp	r3, #32
 80051fa:	d10e      	bne.n	800521a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	f003 0320 	and.w	r3, r3, #32
 8005206:	2b20      	cmp	r3, #32
 8005208:	d107      	bne.n	800521a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f06f 0220 	mvn.w	r2, #32
 8005212:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f000 f8c7 	bl	80053a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800521a:	bf00      	nop
 800521c:	3708      	adds	r7, #8
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}

08005222 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005222:	b480      	push	{r7}
 8005224:	b083      	sub	sp, #12
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800522a:	bf00      	nop
 800522c:	370c      	adds	r7, #12
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr

08005236 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005236:	b480      	push	{r7}
 8005238:	b083      	sub	sp, #12
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800523e:	bf00      	nop
 8005240:	370c      	adds	r7, #12
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr

0800524a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800524a:	b480      	push	{r7}
 800524c:	b083      	sub	sp, #12
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005252:	bf00      	nop
 8005254:	370c      	adds	r7, #12
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr

0800525e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800525e:	b480      	push	{r7}
 8005260:	b083      	sub	sp, #12
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005266:	bf00      	nop
 8005268:	370c      	adds	r7, #12
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr
	...

08005274 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005274:	b480      	push	{r7}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a40      	ldr	r2, [pc, #256]	; (8005388 <TIM_Base_SetConfig+0x114>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d013      	beq.n	80052b4 <TIM_Base_SetConfig+0x40>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005292:	d00f      	beq.n	80052b4 <TIM_Base_SetConfig+0x40>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a3d      	ldr	r2, [pc, #244]	; (800538c <TIM_Base_SetConfig+0x118>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d00b      	beq.n	80052b4 <TIM_Base_SetConfig+0x40>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a3c      	ldr	r2, [pc, #240]	; (8005390 <TIM_Base_SetConfig+0x11c>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d007      	beq.n	80052b4 <TIM_Base_SetConfig+0x40>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a3b      	ldr	r2, [pc, #236]	; (8005394 <TIM_Base_SetConfig+0x120>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d003      	beq.n	80052b4 <TIM_Base_SetConfig+0x40>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a3a      	ldr	r2, [pc, #232]	; (8005398 <TIM_Base_SetConfig+0x124>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d108      	bne.n	80052c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a2f      	ldr	r2, [pc, #188]	; (8005388 <TIM_Base_SetConfig+0x114>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d01f      	beq.n	800530e <TIM_Base_SetConfig+0x9a>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052d4:	d01b      	beq.n	800530e <TIM_Base_SetConfig+0x9a>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a2c      	ldr	r2, [pc, #176]	; (800538c <TIM_Base_SetConfig+0x118>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d017      	beq.n	800530e <TIM_Base_SetConfig+0x9a>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a2b      	ldr	r2, [pc, #172]	; (8005390 <TIM_Base_SetConfig+0x11c>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d013      	beq.n	800530e <TIM_Base_SetConfig+0x9a>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a2a      	ldr	r2, [pc, #168]	; (8005394 <TIM_Base_SetConfig+0x120>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d00f      	beq.n	800530e <TIM_Base_SetConfig+0x9a>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a29      	ldr	r2, [pc, #164]	; (8005398 <TIM_Base_SetConfig+0x124>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d00b      	beq.n	800530e <TIM_Base_SetConfig+0x9a>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a28      	ldr	r2, [pc, #160]	; (800539c <TIM_Base_SetConfig+0x128>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d007      	beq.n	800530e <TIM_Base_SetConfig+0x9a>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a27      	ldr	r2, [pc, #156]	; (80053a0 <TIM_Base_SetConfig+0x12c>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d003      	beq.n	800530e <TIM_Base_SetConfig+0x9a>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a26      	ldr	r2, [pc, #152]	; (80053a4 <TIM_Base_SetConfig+0x130>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d108      	bne.n	8005320 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005314:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	4313      	orrs	r3, r2
 800531e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	695b      	ldr	r3, [r3, #20]
 800532a:	4313      	orrs	r3, r2
 800532c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	689a      	ldr	r2, [r3, #8]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a10      	ldr	r2, [pc, #64]	; (8005388 <TIM_Base_SetConfig+0x114>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d00f      	beq.n	800536c <TIM_Base_SetConfig+0xf8>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4a12      	ldr	r2, [pc, #72]	; (8005398 <TIM_Base_SetConfig+0x124>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d00b      	beq.n	800536c <TIM_Base_SetConfig+0xf8>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4a11      	ldr	r2, [pc, #68]	; (800539c <TIM_Base_SetConfig+0x128>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d007      	beq.n	800536c <TIM_Base_SetConfig+0xf8>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a10      	ldr	r2, [pc, #64]	; (80053a0 <TIM_Base_SetConfig+0x12c>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d003      	beq.n	800536c <TIM_Base_SetConfig+0xf8>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a0f      	ldr	r2, [pc, #60]	; (80053a4 <TIM_Base_SetConfig+0x130>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d103      	bne.n	8005374 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	691a      	ldr	r2, [r3, #16]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	615a      	str	r2, [r3, #20]
}
 800537a:	bf00      	nop
 800537c:	3714      	adds	r7, #20
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	40012c00 	.word	0x40012c00
 800538c:	40000400 	.word	0x40000400
 8005390:	40000800 	.word	0x40000800
 8005394:	40000c00 	.word	0x40000c00
 8005398:	40013400 	.word	0x40013400
 800539c:	40014000 	.word	0x40014000
 80053a0:	40014400 	.word	0x40014400
 80053a4:	40014800 	.word	0x40014800

080053a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053c4:	bf00      	nop
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80053d8:	bf00      	nop
 80053da:	370c      	adds	r7, #12
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b082      	sub	sp, #8
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d101      	bne.n	80053f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e040      	b.n	8005478 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d106      	bne.n	800540c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f7fc f892 	bl	8001530 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2224      	movs	r2, #36	; 0x24
 8005410:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f022 0201 	bic.w	r2, r2, #1
 8005420:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 f8c0 	bl	80055a8 <UART_SetConfig>
 8005428:	4603      	mov	r3, r0
 800542a:	2b01      	cmp	r3, #1
 800542c:	d101      	bne.n	8005432 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e022      	b.n	8005478 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005436:	2b00      	cmp	r3, #0
 8005438:	d002      	beq.n	8005440 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 fbfc 	bl	8005c38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	685a      	ldr	r2, [r3, #4]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800544e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	689a      	ldr	r2, [r3, #8]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800545e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f042 0201 	orr.w	r2, r2, #1
 800546e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 fc83 	bl	8005d7c <UART_CheckIdleState>
 8005476:	4603      	mov	r3, r0
}
 8005478:	4618      	mov	r0, r3
 800547a:	3708      	adds	r7, #8
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b08a      	sub	sp, #40	; 0x28
 8005484:	af02      	add	r7, sp, #8
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	603b      	str	r3, [r7, #0]
 800548c:	4613      	mov	r3, r2
 800548e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005494:	2b20      	cmp	r3, #32
 8005496:	f040 8081 	bne.w	800559c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d002      	beq.n	80054a6 <HAL_UART_Transmit+0x26>
 80054a0:	88fb      	ldrh	r3, [r7, #6]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d101      	bne.n	80054aa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e079      	b.n	800559e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d101      	bne.n	80054b8 <HAL_UART_Transmit+0x38>
 80054b4:	2302      	movs	r3, #2
 80054b6:	e072      	b.n	800559e <HAL_UART_Transmit+0x11e>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2200      	movs	r2, #0
 80054c4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2221      	movs	r2, #33	; 0x21
 80054ca:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80054cc:	f7fc fcc8 	bl	8001e60 <HAL_GetTick>
 80054d0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	88fa      	ldrh	r2, [r7, #6]
 80054d6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	88fa      	ldrh	r2, [r7, #6]
 80054de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ea:	d108      	bne.n	80054fe <HAL_UART_Transmit+0x7e>
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d104      	bne.n	80054fe <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80054f4:	2300      	movs	r3, #0
 80054f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	61bb      	str	r3, [r7, #24]
 80054fc:	e003      	b.n	8005506 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005502:	2300      	movs	r3, #0
 8005504:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005506:	e02d      	b.n	8005564 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	9300      	str	r3, [sp, #0]
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	2200      	movs	r2, #0
 8005510:	2180      	movs	r1, #128	; 0x80
 8005512:	68f8      	ldr	r0, [r7, #12]
 8005514:	f000 fc77 	bl	8005e06 <UART_WaitOnFlagUntilTimeout>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d001      	beq.n	8005522 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e03d      	b.n	800559e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d10b      	bne.n	8005540 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	881a      	ldrh	r2, [r3, #0]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005534:	b292      	uxth	r2, r2
 8005536:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	3302      	adds	r3, #2
 800553c:	61bb      	str	r3, [r7, #24]
 800553e:	e008      	b.n	8005552 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	781a      	ldrb	r2, [r3, #0]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	b292      	uxth	r2, r2
 800554a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	3301      	adds	r3, #1
 8005550:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005558:	b29b      	uxth	r3, r3
 800555a:	3b01      	subs	r3, #1
 800555c:	b29a      	uxth	r2, r3
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800556a:	b29b      	uxth	r3, r3
 800556c:	2b00      	cmp	r3, #0
 800556e:	d1cb      	bne.n	8005508 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	9300      	str	r3, [sp, #0]
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	2200      	movs	r2, #0
 8005578:	2140      	movs	r1, #64	; 0x40
 800557a:	68f8      	ldr	r0, [r7, #12]
 800557c:	f000 fc43 	bl	8005e06 <UART_WaitOnFlagUntilTimeout>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d001      	beq.n	800558a <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e009      	b.n	800559e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2220      	movs	r2, #32
 800558e:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2200      	movs	r2, #0
 8005594:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8005598:	2300      	movs	r3, #0
 800559a:	e000      	b.n	800559e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800559c:	2302      	movs	r3, #2
  }
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3720      	adds	r7, #32
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
	...

080055a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055a8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80055ac:	b088      	sub	sp, #32
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80055b2:	2300      	movs	r3, #0
 80055b4:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 80055b6:	2300      	movs	r3, #0
 80055b8:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80055ba:	2300      	movs	r3, #0
 80055bc:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	689a      	ldr	r2, [r3, #8]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	431a      	orrs	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	695b      	ldr	r3, [r3, #20]
 80055cc:	431a      	orrs	r2, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	69db      	ldr	r3, [r3, #28]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	4bac      	ldr	r3, [pc, #688]	; (8005890 <UART_SetConfig+0x2e8>)
 80055de:	4013      	ands	r3, r2
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	6812      	ldr	r2, [r2, #0]
 80055e4:	69f9      	ldr	r1, [r7, #28]
 80055e6:	430b      	orrs	r3, r1
 80055e8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	68da      	ldr	r2, [r3, #12]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	430a      	orrs	r2, r1
 80055fe:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	699b      	ldr	r3, [r3, #24]
 8005604:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4aa2      	ldr	r2, [pc, #648]	; (8005894 <UART_SetConfig+0x2ec>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d004      	beq.n	800561a <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6a1b      	ldr	r3, [r3, #32]
 8005614:	69fa      	ldr	r2, [r7, #28]
 8005616:	4313      	orrs	r3, r2
 8005618:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	69fa      	ldr	r2, [r7, #28]
 800562a:	430a      	orrs	r2, r1
 800562c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a99      	ldr	r2, [pc, #612]	; (8005898 <UART_SetConfig+0x2f0>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d121      	bne.n	800567c <UART_SetConfig+0xd4>
 8005638:	4b98      	ldr	r3, [pc, #608]	; (800589c <UART_SetConfig+0x2f4>)
 800563a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800563e:	f003 0303 	and.w	r3, r3, #3
 8005642:	2b03      	cmp	r3, #3
 8005644:	d816      	bhi.n	8005674 <UART_SetConfig+0xcc>
 8005646:	a201      	add	r2, pc, #4	; (adr r2, 800564c <UART_SetConfig+0xa4>)
 8005648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800564c:	0800565d 	.word	0x0800565d
 8005650:	08005669 	.word	0x08005669
 8005654:	08005663 	.word	0x08005663
 8005658:	0800566f 	.word	0x0800566f
 800565c:	2301      	movs	r3, #1
 800565e:	76fb      	strb	r3, [r7, #27]
 8005660:	e0e8      	b.n	8005834 <UART_SetConfig+0x28c>
 8005662:	2302      	movs	r3, #2
 8005664:	76fb      	strb	r3, [r7, #27]
 8005666:	e0e5      	b.n	8005834 <UART_SetConfig+0x28c>
 8005668:	2304      	movs	r3, #4
 800566a:	76fb      	strb	r3, [r7, #27]
 800566c:	e0e2      	b.n	8005834 <UART_SetConfig+0x28c>
 800566e:	2308      	movs	r3, #8
 8005670:	76fb      	strb	r3, [r7, #27]
 8005672:	e0df      	b.n	8005834 <UART_SetConfig+0x28c>
 8005674:	2310      	movs	r3, #16
 8005676:	76fb      	strb	r3, [r7, #27]
 8005678:	bf00      	nop
 800567a:	e0db      	b.n	8005834 <UART_SetConfig+0x28c>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a87      	ldr	r2, [pc, #540]	; (80058a0 <UART_SetConfig+0x2f8>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d134      	bne.n	80056f0 <UART_SetConfig+0x148>
 8005686:	4b85      	ldr	r3, [pc, #532]	; (800589c <UART_SetConfig+0x2f4>)
 8005688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800568c:	f003 030c 	and.w	r3, r3, #12
 8005690:	2b0c      	cmp	r3, #12
 8005692:	d829      	bhi.n	80056e8 <UART_SetConfig+0x140>
 8005694:	a201      	add	r2, pc, #4	; (adr r2, 800569c <UART_SetConfig+0xf4>)
 8005696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800569a:	bf00      	nop
 800569c:	080056d1 	.word	0x080056d1
 80056a0:	080056e9 	.word	0x080056e9
 80056a4:	080056e9 	.word	0x080056e9
 80056a8:	080056e9 	.word	0x080056e9
 80056ac:	080056dd 	.word	0x080056dd
 80056b0:	080056e9 	.word	0x080056e9
 80056b4:	080056e9 	.word	0x080056e9
 80056b8:	080056e9 	.word	0x080056e9
 80056bc:	080056d7 	.word	0x080056d7
 80056c0:	080056e9 	.word	0x080056e9
 80056c4:	080056e9 	.word	0x080056e9
 80056c8:	080056e9 	.word	0x080056e9
 80056cc:	080056e3 	.word	0x080056e3
 80056d0:	2300      	movs	r3, #0
 80056d2:	76fb      	strb	r3, [r7, #27]
 80056d4:	e0ae      	b.n	8005834 <UART_SetConfig+0x28c>
 80056d6:	2302      	movs	r3, #2
 80056d8:	76fb      	strb	r3, [r7, #27]
 80056da:	e0ab      	b.n	8005834 <UART_SetConfig+0x28c>
 80056dc:	2304      	movs	r3, #4
 80056de:	76fb      	strb	r3, [r7, #27]
 80056e0:	e0a8      	b.n	8005834 <UART_SetConfig+0x28c>
 80056e2:	2308      	movs	r3, #8
 80056e4:	76fb      	strb	r3, [r7, #27]
 80056e6:	e0a5      	b.n	8005834 <UART_SetConfig+0x28c>
 80056e8:	2310      	movs	r3, #16
 80056ea:	76fb      	strb	r3, [r7, #27]
 80056ec:	bf00      	nop
 80056ee:	e0a1      	b.n	8005834 <UART_SetConfig+0x28c>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a6b      	ldr	r2, [pc, #428]	; (80058a4 <UART_SetConfig+0x2fc>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d120      	bne.n	800573c <UART_SetConfig+0x194>
 80056fa:	4b68      	ldr	r3, [pc, #416]	; (800589c <UART_SetConfig+0x2f4>)
 80056fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005700:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005704:	2b10      	cmp	r3, #16
 8005706:	d00f      	beq.n	8005728 <UART_SetConfig+0x180>
 8005708:	2b10      	cmp	r3, #16
 800570a:	d802      	bhi.n	8005712 <UART_SetConfig+0x16a>
 800570c:	2b00      	cmp	r3, #0
 800570e:	d005      	beq.n	800571c <UART_SetConfig+0x174>
 8005710:	e010      	b.n	8005734 <UART_SetConfig+0x18c>
 8005712:	2b20      	cmp	r3, #32
 8005714:	d005      	beq.n	8005722 <UART_SetConfig+0x17a>
 8005716:	2b30      	cmp	r3, #48	; 0x30
 8005718:	d009      	beq.n	800572e <UART_SetConfig+0x186>
 800571a:	e00b      	b.n	8005734 <UART_SetConfig+0x18c>
 800571c:	2300      	movs	r3, #0
 800571e:	76fb      	strb	r3, [r7, #27]
 8005720:	e088      	b.n	8005834 <UART_SetConfig+0x28c>
 8005722:	2302      	movs	r3, #2
 8005724:	76fb      	strb	r3, [r7, #27]
 8005726:	e085      	b.n	8005834 <UART_SetConfig+0x28c>
 8005728:	2304      	movs	r3, #4
 800572a:	76fb      	strb	r3, [r7, #27]
 800572c:	e082      	b.n	8005834 <UART_SetConfig+0x28c>
 800572e:	2308      	movs	r3, #8
 8005730:	76fb      	strb	r3, [r7, #27]
 8005732:	e07f      	b.n	8005834 <UART_SetConfig+0x28c>
 8005734:	2310      	movs	r3, #16
 8005736:	76fb      	strb	r3, [r7, #27]
 8005738:	bf00      	nop
 800573a:	e07b      	b.n	8005834 <UART_SetConfig+0x28c>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a59      	ldr	r2, [pc, #356]	; (80058a8 <UART_SetConfig+0x300>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d120      	bne.n	8005788 <UART_SetConfig+0x1e0>
 8005746:	4b55      	ldr	r3, [pc, #340]	; (800589c <UART_SetConfig+0x2f4>)
 8005748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800574c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005750:	2b40      	cmp	r3, #64	; 0x40
 8005752:	d00f      	beq.n	8005774 <UART_SetConfig+0x1cc>
 8005754:	2b40      	cmp	r3, #64	; 0x40
 8005756:	d802      	bhi.n	800575e <UART_SetConfig+0x1b6>
 8005758:	2b00      	cmp	r3, #0
 800575a:	d005      	beq.n	8005768 <UART_SetConfig+0x1c0>
 800575c:	e010      	b.n	8005780 <UART_SetConfig+0x1d8>
 800575e:	2b80      	cmp	r3, #128	; 0x80
 8005760:	d005      	beq.n	800576e <UART_SetConfig+0x1c6>
 8005762:	2bc0      	cmp	r3, #192	; 0xc0
 8005764:	d009      	beq.n	800577a <UART_SetConfig+0x1d2>
 8005766:	e00b      	b.n	8005780 <UART_SetConfig+0x1d8>
 8005768:	2300      	movs	r3, #0
 800576a:	76fb      	strb	r3, [r7, #27]
 800576c:	e062      	b.n	8005834 <UART_SetConfig+0x28c>
 800576e:	2302      	movs	r3, #2
 8005770:	76fb      	strb	r3, [r7, #27]
 8005772:	e05f      	b.n	8005834 <UART_SetConfig+0x28c>
 8005774:	2304      	movs	r3, #4
 8005776:	76fb      	strb	r3, [r7, #27]
 8005778:	e05c      	b.n	8005834 <UART_SetConfig+0x28c>
 800577a:	2308      	movs	r3, #8
 800577c:	76fb      	strb	r3, [r7, #27]
 800577e:	e059      	b.n	8005834 <UART_SetConfig+0x28c>
 8005780:	2310      	movs	r3, #16
 8005782:	76fb      	strb	r3, [r7, #27]
 8005784:	bf00      	nop
 8005786:	e055      	b.n	8005834 <UART_SetConfig+0x28c>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a47      	ldr	r2, [pc, #284]	; (80058ac <UART_SetConfig+0x304>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d124      	bne.n	80057dc <UART_SetConfig+0x234>
 8005792:	4b42      	ldr	r3, [pc, #264]	; (800589c <UART_SetConfig+0x2f4>)
 8005794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005798:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800579c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057a0:	d012      	beq.n	80057c8 <UART_SetConfig+0x220>
 80057a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057a6:	d802      	bhi.n	80057ae <UART_SetConfig+0x206>
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d007      	beq.n	80057bc <UART_SetConfig+0x214>
 80057ac:	e012      	b.n	80057d4 <UART_SetConfig+0x22c>
 80057ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057b2:	d006      	beq.n	80057c2 <UART_SetConfig+0x21a>
 80057b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057b8:	d009      	beq.n	80057ce <UART_SetConfig+0x226>
 80057ba:	e00b      	b.n	80057d4 <UART_SetConfig+0x22c>
 80057bc:	2300      	movs	r3, #0
 80057be:	76fb      	strb	r3, [r7, #27]
 80057c0:	e038      	b.n	8005834 <UART_SetConfig+0x28c>
 80057c2:	2302      	movs	r3, #2
 80057c4:	76fb      	strb	r3, [r7, #27]
 80057c6:	e035      	b.n	8005834 <UART_SetConfig+0x28c>
 80057c8:	2304      	movs	r3, #4
 80057ca:	76fb      	strb	r3, [r7, #27]
 80057cc:	e032      	b.n	8005834 <UART_SetConfig+0x28c>
 80057ce:	2308      	movs	r3, #8
 80057d0:	76fb      	strb	r3, [r7, #27]
 80057d2:	e02f      	b.n	8005834 <UART_SetConfig+0x28c>
 80057d4:	2310      	movs	r3, #16
 80057d6:	76fb      	strb	r3, [r7, #27]
 80057d8:	bf00      	nop
 80057da:	e02b      	b.n	8005834 <UART_SetConfig+0x28c>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a2c      	ldr	r2, [pc, #176]	; (8005894 <UART_SetConfig+0x2ec>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d124      	bne.n	8005830 <UART_SetConfig+0x288>
 80057e6:	4b2d      	ldr	r3, [pc, #180]	; (800589c <UART_SetConfig+0x2f4>)
 80057e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80057f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057f4:	d012      	beq.n	800581c <UART_SetConfig+0x274>
 80057f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057fa:	d802      	bhi.n	8005802 <UART_SetConfig+0x25a>
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d007      	beq.n	8005810 <UART_SetConfig+0x268>
 8005800:	e012      	b.n	8005828 <UART_SetConfig+0x280>
 8005802:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005806:	d006      	beq.n	8005816 <UART_SetConfig+0x26e>
 8005808:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800580c:	d009      	beq.n	8005822 <UART_SetConfig+0x27a>
 800580e:	e00b      	b.n	8005828 <UART_SetConfig+0x280>
 8005810:	2300      	movs	r3, #0
 8005812:	76fb      	strb	r3, [r7, #27]
 8005814:	e00e      	b.n	8005834 <UART_SetConfig+0x28c>
 8005816:	2302      	movs	r3, #2
 8005818:	76fb      	strb	r3, [r7, #27]
 800581a:	e00b      	b.n	8005834 <UART_SetConfig+0x28c>
 800581c:	2304      	movs	r3, #4
 800581e:	76fb      	strb	r3, [r7, #27]
 8005820:	e008      	b.n	8005834 <UART_SetConfig+0x28c>
 8005822:	2308      	movs	r3, #8
 8005824:	76fb      	strb	r3, [r7, #27]
 8005826:	e005      	b.n	8005834 <UART_SetConfig+0x28c>
 8005828:	2310      	movs	r3, #16
 800582a:	76fb      	strb	r3, [r7, #27]
 800582c:	bf00      	nop
 800582e:	e001      	b.n	8005834 <UART_SetConfig+0x28c>
 8005830:	2310      	movs	r3, #16
 8005832:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a16      	ldr	r2, [pc, #88]	; (8005894 <UART_SetConfig+0x2ec>)
 800583a:	4293      	cmp	r3, r2
 800583c:	f040 80fa 	bne.w	8005a34 <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005840:	7efb      	ldrb	r3, [r7, #27]
 8005842:	2b08      	cmp	r3, #8
 8005844:	d836      	bhi.n	80058b4 <UART_SetConfig+0x30c>
 8005846:	a201      	add	r2, pc, #4	; (adr r2, 800584c <UART_SetConfig+0x2a4>)
 8005848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800584c:	08005871 	.word	0x08005871
 8005850:	080058b5 	.word	0x080058b5
 8005854:	08005879 	.word	0x08005879
 8005858:	080058b5 	.word	0x080058b5
 800585c:	0800587f 	.word	0x0800587f
 8005860:	080058b5 	.word	0x080058b5
 8005864:	080058b5 	.word	0x080058b5
 8005868:	080058b5 	.word	0x080058b5
 800586c:	08005887 	.word	0x08005887
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8005870:	f7fe fd50 	bl	8004314 <HAL_RCC_GetPCLK1Freq>
 8005874:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005876:	e020      	b.n	80058ba <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8005878:	4b0d      	ldr	r3, [pc, #52]	; (80058b0 <UART_SetConfig+0x308>)
 800587a:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 800587c:	e01d      	b.n	80058ba <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800587e:	f7fe fcb3 	bl	80041e8 <HAL_RCC_GetSysClockFreq>
 8005882:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005884:	e019      	b.n	80058ba <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8005886:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800588a:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 800588c:	e015      	b.n	80058ba <UART_SetConfig+0x312>
 800588e:	bf00      	nop
 8005890:	efff69f3 	.word	0xefff69f3
 8005894:	40008000 	.word	0x40008000
 8005898:	40013800 	.word	0x40013800
 800589c:	40021000 	.word	0x40021000
 80058a0:	40004400 	.word	0x40004400
 80058a4:	40004800 	.word	0x40004800
 80058a8:	40004c00 	.word	0x40004c00
 80058ac:	40005000 	.word	0x40005000
 80058b0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	74fb      	strb	r3, [r7, #19]
        break;
 80058b8:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f000 81ac 	beq.w	8005c1a <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	685a      	ldr	r2, [r3, #4]
 80058c6:	4613      	mov	r3, r2
 80058c8:	005b      	lsls	r3, r3, #1
 80058ca:	4413      	add	r3, r2
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d305      	bcc.n	80058de <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d902      	bls.n	80058e4 <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	74fb      	strb	r3, [r7, #19]
 80058e2:	e19a      	b.n	8005c1a <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 80058e4:	7efb      	ldrb	r3, [r7, #27]
 80058e6:	2b08      	cmp	r3, #8
 80058e8:	f200 8091 	bhi.w	8005a0e <UART_SetConfig+0x466>
 80058ec:	a201      	add	r2, pc, #4	; (adr r2, 80058f4 <UART_SetConfig+0x34c>)
 80058ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f2:	bf00      	nop
 80058f4:	08005919 	.word	0x08005919
 80058f8:	08005a0f 	.word	0x08005a0f
 80058fc:	08005965 	.word	0x08005965
 8005900:	08005a0f 	.word	0x08005a0f
 8005904:	08005999 	.word	0x08005999
 8005908:	08005a0f 	.word	0x08005a0f
 800590c:	08005a0f 	.word	0x08005a0f
 8005910:	08005a0f 	.word	0x08005a0f
 8005914:	080059e5 	.word	0x080059e5
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005918:	f7fe fcfc 	bl	8004314 <HAL_RCC_GetPCLK1Freq>
 800591c:	4603      	mov	r3, r0
 800591e:	4619      	mov	r1, r3
 8005920:	f04f 0200 	mov.w	r2, #0
 8005924:	f04f 0300 	mov.w	r3, #0
 8005928:	f04f 0400 	mov.w	r4, #0
 800592c:	0214      	lsls	r4, r2, #8
 800592e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005932:	020b      	lsls	r3, r1, #8
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	6852      	ldr	r2, [r2, #4]
 8005938:	0852      	lsrs	r2, r2, #1
 800593a:	4611      	mov	r1, r2
 800593c:	f04f 0200 	mov.w	r2, #0
 8005940:	eb13 0b01 	adds.w	fp, r3, r1
 8005944:	eb44 0c02 	adc.w	ip, r4, r2
 8005948:	4658      	mov	r0, fp
 800594a:	4661      	mov	r1, ip
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	f04f 0400 	mov.w	r4, #0
 8005954:	461a      	mov	r2, r3
 8005956:	4623      	mov	r3, r4
 8005958:	f7fa fe6e 	bl	8000638 <__aeabi_uldivmod>
 800595c:	4603      	mov	r3, r0
 800595e:	460c      	mov	r4, r1
 8005960:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005962:	e057      	b.n	8005a14 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	085b      	lsrs	r3, r3, #1
 800596a:	f04f 0400 	mov.w	r4, #0
 800596e:	49b1      	ldr	r1, [pc, #708]	; (8005c34 <UART_SetConfig+0x68c>)
 8005970:	f04f 0200 	mov.w	r2, #0
 8005974:	eb13 0b01 	adds.w	fp, r3, r1
 8005978:	eb44 0c02 	adc.w	ip, r4, r2
 800597c:	4658      	mov	r0, fp
 800597e:	4661      	mov	r1, ip
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	f04f 0400 	mov.w	r4, #0
 8005988:	461a      	mov	r2, r3
 800598a:	4623      	mov	r3, r4
 800598c:	f7fa fe54 	bl	8000638 <__aeabi_uldivmod>
 8005990:	4603      	mov	r3, r0
 8005992:	460c      	mov	r4, r1
 8005994:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005996:	e03d      	b.n	8005a14 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005998:	f7fe fc26 	bl	80041e8 <HAL_RCC_GetSysClockFreq>
 800599c:	4603      	mov	r3, r0
 800599e:	4619      	mov	r1, r3
 80059a0:	f04f 0200 	mov.w	r2, #0
 80059a4:	f04f 0300 	mov.w	r3, #0
 80059a8:	f04f 0400 	mov.w	r4, #0
 80059ac:	0214      	lsls	r4, r2, #8
 80059ae:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80059b2:	020b      	lsls	r3, r1, #8
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	6852      	ldr	r2, [r2, #4]
 80059b8:	0852      	lsrs	r2, r2, #1
 80059ba:	4611      	mov	r1, r2
 80059bc:	f04f 0200 	mov.w	r2, #0
 80059c0:	eb13 0b01 	adds.w	fp, r3, r1
 80059c4:	eb44 0c02 	adc.w	ip, r4, r2
 80059c8:	4658      	mov	r0, fp
 80059ca:	4661      	mov	r1, ip
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	f04f 0400 	mov.w	r4, #0
 80059d4:	461a      	mov	r2, r3
 80059d6:	4623      	mov	r3, r4
 80059d8:	f7fa fe2e 	bl	8000638 <__aeabi_uldivmod>
 80059dc:	4603      	mov	r3, r0
 80059de:	460c      	mov	r4, r1
 80059e0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80059e2:	e017      	b.n	8005a14 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	085b      	lsrs	r3, r3, #1
 80059ea:	f04f 0400 	mov.w	r4, #0
 80059ee:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80059f2:	f144 0100 	adc.w	r1, r4, #0
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	f04f 0400 	mov.w	r4, #0
 80059fe:	461a      	mov	r2, r3
 8005a00:	4623      	mov	r3, r4
 8005a02:	f7fa fe19 	bl	8000638 <__aeabi_uldivmod>
 8005a06:	4603      	mov	r3, r0
 8005a08:	460c      	mov	r4, r1
 8005a0a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005a0c:	e002      	b.n	8005a14 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	74fb      	strb	r3, [r7, #19]
            break;
 8005a12:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a1a:	d308      	bcc.n	8005a2e <UART_SetConfig+0x486>
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a22:	d204      	bcs.n	8005a2e <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	697a      	ldr	r2, [r7, #20]
 8005a2a:	60da      	str	r2, [r3, #12]
 8005a2c:	e0f5      	b.n	8005c1a <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	74fb      	strb	r3, [r7, #19]
 8005a32:	e0f2      	b.n	8005c1a <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	69db      	ldr	r3, [r3, #28]
 8005a38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a3c:	d17f      	bne.n	8005b3e <UART_SetConfig+0x596>
  {
    switch (clocksource)
 8005a3e:	7efb      	ldrb	r3, [r7, #27]
 8005a40:	2b08      	cmp	r3, #8
 8005a42:	d85c      	bhi.n	8005afe <UART_SetConfig+0x556>
 8005a44:	a201      	add	r2, pc, #4	; (adr r2, 8005a4c <UART_SetConfig+0x4a4>)
 8005a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a4a:	bf00      	nop
 8005a4c:	08005a71 	.word	0x08005a71
 8005a50:	08005a8f 	.word	0x08005a8f
 8005a54:	08005aad 	.word	0x08005aad
 8005a58:	08005aff 	.word	0x08005aff
 8005a5c:	08005ac9 	.word	0x08005ac9
 8005a60:	08005aff 	.word	0x08005aff
 8005a64:	08005aff 	.word	0x08005aff
 8005a68:	08005aff 	.word	0x08005aff
 8005a6c:	08005ae7 	.word	0x08005ae7
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005a70:	f7fe fc50 	bl	8004314 <HAL_RCC_GetPCLK1Freq>
 8005a74:	4603      	mov	r3, r0
 8005a76:	005a      	lsls	r2, r3, #1
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	085b      	lsrs	r3, r3, #1
 8005a7e:	441a      	add	r2, r3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005a8c:	e03a      	b.n	8005b04 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005a8e:	f7fe fc57 	bl	8004340 <HAL_RCC_GetPCLK2Freq>
 8005a92:	4603      	mov	r3, r0
 8005a94:	005a      	lsls	r2, r3, #1
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	085b      	lsrs	r3, r3, #1
 8005a9c:	441a      	add	r2, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005aaa:	e02b      	b.n	8005b04 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	085b      	lsrs	r3, r3, #1
 8005ab2:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8005ab6:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	6852      	ldr	r2, [r2, #4]
 8005abe:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005ac6:	e01d      	b.n	8005b04 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005ac8:	f7fe fb8e 	bl	80041e8 <HAL_RCC_GetSysClockFreq>
 8005acc:	4603      	mov	r3, r0
 8005ace:	005a      	lsls	r2, r3, #1
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	085b      	lsrs	r3, r3, #1
 8005ad6:	441a      	add	r2, r3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005ae4:	e00e      	b.n	8005b04 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	085b      	lsrs	r3, r3, #1
 8005aec:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005afc:	e002      	b.n	8005b04 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	74fb      	strb	r3, [r7, #19]
        break;
 8005b02:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	2b0f      	cmp	r3, #15
 8005b08:	d916      	bls.n	8005b38 <UART_SetConfig+0x590>
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b10:	d212      	bcs.n	8005b38 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	f023 030f 	bic.w	r3, r3, #15
 8005b1a:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	085b      	lsrs	r3, r3, #1
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	f003 0307 	and.w	r3, r3, #7
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	897b      	ldrh	r3, [r7, #10]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	897a      	ldrh	r2, [r7, #10]
 8005b34:	60da      	str	r2, [r3, #12]
 8005b36:	e070      	b.n	8005c1a <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	74fb      	strb	r3, [r7, #19]
 8005b3c:	e06d      	b.n	8005c1a <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 8005b3e:	7efb      	ldrb	r3, [r7, #27]
 8005b40:	2b08      	cmp	r3, #8
 8005b42:	d859      	bhi.n	8005bf8 <UART_SetConfig+0x650>
 8005b44:	a201      	add	r2, pc, #4	; (adr r2, 8005b4c <UART_SetConfig+0x5a4>)
 8005b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b4a:	bf00      	nop
 8005b4c:	08005b71 	.word	0x08005b71
 8005b50:	08005b8d 	.word	0x08005b8d
 8005b54:	08005ba9 	.word	0x08005ba9
 8005b58:	08005bf9 	.word	0x08005bf9
 8005b5c:	08005bc5 	.word	0x08005bc5
 8005b60:	08005bf9 	.word	0x08005bf9
 8005b64:	08005bf9 	.word	0x08005bf9
 8005b68:	08005bf9 	.word	0x08005bf9
 8005b6c:	08005be1 	.word	0x08005be1
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005b70:	f7fe fbd0 	bl	8004314 <HAL_RCC_GetPCLK1Freq>
 8005b74:	4602      	mov	r2, r0
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	085b      	lsrs	r3, r3, #1
 8005b7c:	441a      	add	r2, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005b8a:	e038      	b.n	8005bfe <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005b8c:	f7fe fbd8 	bl	8004340 <HAL_RCC_GetPCLK2Freq>
 8005b90:	4602      	mov	r2, r0
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	085b      	lsrs	r3, r3, #1
 8005b98:	441a      	add	r2, r3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005ba6:	e02a      	b.n	8005bfe <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	085b      	lsrs	r3, r3, #1
 8005bae:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8005bb2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	6852      	ldr	r2, [r2, #4]
 8005bba:	fbb3 f3f2 	udiv	r3, r3, r2
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005bc2:	e01c      	b.n	8005bfe <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005bc4:	f7fe fb10 	bl	80041e8 <HAL_RCC_GetSysClockFreq>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	085b      	lsrs	r3, r3, #1
 8005bd0:	441a      	add	r2, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005bde:	e00e      	b.n	8005bfe <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	085b      	lsrs	r3, r3, #1
 8005be6:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005bf6:	e002      	b.n	8005bfe <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	74fb      	strb	r3, [r7, #19]
        break;
 8005bfc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	2b0f      	cmp	r3, #15
 8005c02:	d908      	bls.n	8005c16 <UART_SetConfig+0x66e>
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c0a:	d204      	bcs.n	8005c16 <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	697a      	ldr	r2, [r7, #20]
 8005c12:	60da      	str	r2, [r3, #12]
 8005c14:	e001      	b.n	8005c1a <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005c26:	7cfb      	ldrb	r3, [r7, #19]
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3720      	adds	r7, #32
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005c32:	bf00      	nop
 8005c34:	f4240000 	.word	0xf4240000

08005c38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c44:	f003 0301 	and.w	r3, r3, #1
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d00a      	beq.n	8005c62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	430a      	orrs	r2, r1
 8005c60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c66:	f003 0302 	and.w	r3, r3, #2
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d00a      	beq.n	8005c84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	430a      	orrs	r2, r1
 8005c82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c88:	f003 0304 	and.w	r3, r3, #4
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d00a      	beq.n	8005ca6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	430a      	orrs	r2, r1
 8005ca4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005caa:	f003 0308 	and.w	r3, r3, #8
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d00a      	beq.n	8005cc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	430a      	orrs	r2, r1
 8005cc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ccc:	f003 0310 	and.w	r3, r3, #16
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d00a      	beq.n	8005cea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	430a      	orrs	r2, r1
 8005ce8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cee:	f003 0320 	and.w	r3, r3, #32
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00a      	beq.n	8005d0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	430a      	orrs	r2, r1
 8005d0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d01a      	beq.n	8005d4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	430a      	orrs	r2, r1
 8005d2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d36:	d10a      	bne.n	8005d4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	430a      	orrs	r2, r1
 8005d4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00a      	beq.n	8005d70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	430a      	orrs	r2, r1
 8005d6e:	605a      	str	r2, [r3, #4]
  }
}
 8005d70:	bf00      	nop
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b086      	sub	sp, #24
 8005d80:	af02      	add	r7, sp, #8
 8005d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005d8a:	f7fc f869 	bl	8001e60 <HAL_GetTick>
 8005d8e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 0308 	and.w	r3, r3, #8
 8005d9a:	2b08      	cmp	r3, #8
 8005d9c:	d10e      	bne.n	8005dbc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d9e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005da2:	9300      	str	r3, [sp, #0]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2200      	movs	r2, #0
 8005da8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f000 f82a 	bl	8005e06 <UART_WaitOnFlagUntilTimeout>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d001      	beq.n	8005dbc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005db8:	2303      	movs	r3, #3
 8005dba:	e020      	b.n	8005dfe <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 0304 	and.w	r3, r3, #4
 8005dc6:	2b04      	cmp	r3, #4
 8005dc8:	d10e      	bne.n	8005de8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005dca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005dce:	9300      	str	r3, [sp, #0]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 f814 	bl	8005e06 <UART_WaitOnFlagUntilTimeout>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d001      	beq.n	8005de8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005de4:	2303      	movs	r3, #3
 8005de6:	e00a      	b.n	8005dfe <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2220      	movs	r2, #32
 8005dec:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2220      	movs	r2, #32
 8005df2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3710      	adds	r7, #16
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}

08005e06 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e06:	b580      	push	{r7, lr}
 8005e08:	b084      	sub	sp, #16
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	60f8      	str	r0, [r7, #12]
 8005e0e:	60b9      	str	r1, [r7, #8]
 8005e10:	603b      	str	r3, [r7, #0]
 8005e12:	4613      	mov	r3, r2
 8005e14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e16:	e02a      	b.n	8005e6e <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e18:	69bb      	ldr	r3, [r7, #24]
 8005e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e1e:	d026      	beq.n	8005e6e <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e20:	f7fc f81e 	bl	8001e60 <HAL_GetTick>
 8005e24:	4602      	mov	r2, r0
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	69ba      	ldr	r2, [r7, #24]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d302      	bcc.n	8005e36 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d11b      	bne.n	8005e6e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005e44:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	689a      	ldr	r2, [r3, #8]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f022 0201 	bic.w	r2, r2, #1
 8005e54:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2220      	movs	r2, #32
 8005e5a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2220      	movs	r2, #32
 8005e60:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	e00f      	b.n	8005e8e <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	69da      	ldr	r2, [r3, #28]
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	4013      	ands	r3, r2
 8005e78:	68ba      	ldr	r2, [r7, #8]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	bf0c      	ite	eq
 8005e7e:	2301      	moveq	r3, #1
 8005e80:	2300      	movne	r3, #0
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	461a      	mov	r2, r3
 8005e86:	79fb      	ldrb	r3, [r7, #7]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d0c5      	beq.n	8005e18 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3710      	adds	r7, #16
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}

08005e96 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e96:	b084      	sub	sp, #16
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b084      	sub	sp, #16
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	f107 001c 	add.w	r0, r7, #28
 8005ea4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d122      	bne.n	8005ef4 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005ec2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005ed6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d105      	bne.n	8005ee8 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f000 fa1d 	bl	8006328 <USB_CoreReset>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	73fb      	strb	r3, [r7, #15]
 8005ef2:	e01a      	b.n	8005f2a <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f000 fa11 	bl	8006328 <USB_CoreReset>
 8005f06:	4603      	mov	r3, r0
 8005f08:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005f0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d106      	bne.n	8005f1e <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f14:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	639a      	str	r2, [r3, #56]	; 0x38
 8005f1c:	e005      	b.n	8005f2a <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f22:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8005f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3710      	adds	r7, #16
 8005f30:	46bd      	mov	sp, r7
 8005f32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f36:	b004      	add	sp, #16
 8005f38:	4770      	bx	lr

08005f3a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f3a:	b480      	push	{r7}
 8005f3c:	b083      	sub	sp, #12
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	f023 0201 	bic.w	r2, r3, #1
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f4e:	2300      	movs	r3, #0
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	370c      	adds	r7, #12
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b082      	sub	sp, #8
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	460b      	mov	r3, r1
 8005f66:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005f74:	78fb      	ldrb	r3, [r7, #3]
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d106      	bne.n	8005f88 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	60da      	str	r2, [r3, #12]
 8005f86:	e00b      	b.n	8005fa0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005f88:	78fb      	ldrb	r3, [r7, #3]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d106      	bne.n	8005f9c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	60da      	str	r2, [r3, #12]
 8005f9a:	e001      	b.n	8005fa0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e003      	b.n	8005fa8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005fa0:	2032      	movs	r0, #50	; 0x32
 8005fa2:	f7fb ff69 	bl	8001e78 <HAL_Delay>

  return HAL_OK;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3708      	adds	r7, #8
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005fb0:	b084      	sub	sp, #16
 8005fb2:	b580      	push	{r7, lr}
 8005fb4:	b086      	sub	sp, #24
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
 8005fba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005fbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005fca:	2300      	movs	r3, #0
 8005fcc:	613b      	str	r3, [r7, #16]
 8005fce:	e009      	b.n	8005fe4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	3340      	adds	r3, #64	; 0x40
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	4413      	add	r3, r2
 8005fda:	2200      	movs	r2, #0
 8005fdc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	3301      	adds	r3, #1
 8005fe2:	613b      	str	r3, [r7, #16]
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	2b0e      	cmp	r3, #14
 8005fe8:	d9f2      	bls.n	8005fd0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005fea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d112      	bne.n	8006016 <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	601a      	str	r2, [r3, #0]
 8006014:	e005      	b.n	8006022 <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800601a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006028:	461a      	mov	r2, r3
 800602a:	2300      	movs	r3, #0
 800602c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006034:	4619      	mov	r1, r3
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800603c:	461a      	mov	r2, r3
 800603e:	680b      	ldr	r3, [r1, #0]
 8006040:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006042:	2103      	movs	r1, #3
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 f93d 	bl	80062c4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800604a:	2110      	movs	r1, #16
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f000 f8f1 	bl	8006234 <USB_FlushTxFifo>
 8006052:	4603      	mov	r3, r0
 8006054:	2b00      	cmp	r3, #0
 8006056:	d001      	beq.n	800605c <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 f90f 	bl	8006280 <USB_FlushRxFifo>
 8006062:	4603      	mov	r3, r0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d001      	beq.n	800606c <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006072:	461a      	mov	r2, r3
 8006074:	2300      	movs	r3, #0
 8006076:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800607e:	461a      	mov	r2, r3
 8006080:	2300      	movs	r3, #0
 8006082:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800608a:	461a      	mov	r2, r3
 800608c:	2300      	movs	r3, #0
 800608e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006090:	2300      	movs	r3, #0
 8006092:	613b      	str	r3, [r7, #16]
 8006094:	e043      	b.n	800611e <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	015a      	lsls	r2, r3, #5
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	4413      	add	r3, r2
 800609e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060ac:	d118      	bne.n	80060e0 <USB_DevInit+0x130>
    {
      if (i == 0U)
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d10a      	bne.n	80060ca <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	015a      	lsls	r2, r3, #5
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	4413      	add	r3, r2
 80060bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060c0:	461a      	mov	r2, r3
 80060c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80060c6:	6013      	str	r3, [r2, #0]
 80060c8:	e013      	b.n	80060f2 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	015a      	lsls	r2, r3, #5
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	4413      	add	r3, r2
 80060d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060d6:	461a      	mov	r2, r3
 80060d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80060dc:	6013      	str	r3, [r2, #0]
 80060de:	e008      	b.n	80060f2 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	015a      	lsls	r2, r3, #5
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	4413      	add	r3, r2
 80060e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ec:	461a      	mov	r2, r3
 80060ee:	2300      	movs	r3, #0
 80060f0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	015a      	lsls	r2, r3, #5
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	4413      	add	r3, r2
 80060fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060fe:	461a      	mov	r2, r3
 8006100:	2300      	movs	r3, #0
 8006102:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	015a      	lsls	r2, r3, #5
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	4413      	add	r3, r2
 800610c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006110:	461a      	mov	r2, r3
 8006112:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006116:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	3301      	adds	r3, #1
 800611c:	613b      	str	r3, [r7, #16]
 800611e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006120:	693a      	ldr	r2, [r7, #16]
 8006122:	429a      	cmp	r2, r3
 8006124:	d3b7      	bcc.n	8006096 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006126:	2300      	movs	r3, #0
 8006128:	613b      	str	r3, [r7, #16]
 800612a:	e043      	b.n	80061b4 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	015a      	lsls	r2, r3, #5
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	4413      	add	r3, r2
 8006134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800613e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006142:	d118      	bne.n	8006176 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d10a      	bne.n	8006160 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	015a      	lsls	r2, r3, #5
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	4413      	add	r3, r2
 8006152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006156:	461a      	mov	r2, r3
 8006158:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800615c:	6013      	str	r3, [r2, #0]
 800615e:	e013      	b.n	8006188 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	015a      	lsls	r2, r3, #5
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	4413      	add	r3, r2
 8006168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800616c:	461a      	mov	r2, r3
 800616e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006172:	6013      	str	r3, [r2, #0]
 8006174:	e008      	b.n	8006188 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	015a      	lsls	r2, r3, #5
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	4413      	add	r3, r2
 800617e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006182:	461a      	mov	r2, r3
 8006184:	2300      	movs	r3, #0
 8006186:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	015a      	lsls	r2, r3, #5
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	4413      	add	r3, r2
 8006190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006194:	461a      	mov	r2, r3
 8006196:	2300      	movs	r3, #0
 8006198:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	015a      	lsls	r2, r3, #5
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	4413      	add	r3, r2
 80061a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061a6:	461a      	mov	r2, r3
 80061a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80061ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	3301      	adds	r3, #1
 80061b2:	613b      	str	r3, [r7, #16]
 80061b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b6:	693a      	ldr	r2, [r7, #16]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d3b7      	bcc.n	800612c <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061c2:	691b      	ldr	r3, [r3, #16]
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061ce:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80061dc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	699b      	ldr	r3, [r3, #24]
 80061e2:	f043 0210 	orr.w	r2, r3, #16
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	699a      	ldr	r2, [r3, #24]
 80061ee:	4b10      	ldr	r3, [pc, #64]	; (8006230 <USB_DevInit+0x280>)
 80061f0:	4313      	orrs	r3, r2
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80061f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d005      	beq.n	8006208 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	699b      	ldr	r3, [r3, #24]
 8006200:	f043 0208 	orr.w	r2, r3, #8
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006208:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800620a:	2b01      	cmp	r3, #1
 800620c:	d107      	bne.n	800621e <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	699b      	ldr	r3, [r3, #24]
 8006212:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006216:	f043 0304 	orr.w	r3, r3, #4
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800621e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006220:	4618      	mov	r0, r3
 8006222:	3718      	adds	r7, #24
 8006224:	46bd      	mov	sp, r7
 8006226:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800622a:	b004      	add	sp, #16
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop
 8006230:	803c3800 	.word	0x803c3800

08006234 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006234:	b480      	push	{r7}
 8006236:	b085      	sub	sp, #20
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800623e:	2300      	movs	r3, #0
 8006240:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	019b      	lsls	r3, r3, #6
 8006246:	f043 0220 	orr.w	r2, r3, #32
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	3301      	adds	r3, #1
 8006252:	60fb      	str	r3, [r7, #12]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	4a09      	ldr	r2, [pc, #36]	; (800627c <USB_FlushTxFifo+0x48>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d901      	bls.n	8006260 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800625c:	2303      	movs	r3, #3
 800625e:	e006      	b.n	800626e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	f003 0320 	and.w	r3, r3, #32
 8006268:	2b20      	cmp	r3, #32
 800626a:	d0f0      	beq.n	800624e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800626c:	2300      	movs	r3, #0
}
 800626e:	4618      	mov	r0, r3
 8006270:	3714      	adds	r7, #20
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop
 800627c:	00030d40 	.word	0x00030d40

08006280 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006280:	b480      	push	{r7}
 8006282:	b085      	sub	sp, #20
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006288:	2300      	movs	r3, #0
 800628a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2210      	movs	r2, #16
 8006290:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	3301      	adds	r3, #1
 8006296:	60fb      	str	r3, [r7, #12]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	4a09      	ldr	r2, [pc, #36]	; (80062c0 <USB_FlushRxFifo+0x40>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d901      	bls.n	80062a4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80062a0:	2303      	movs	r3, #3
 80062a2:	e006      	b.n	80062b2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	691b      	ldr	r3, [r3, #16]
 80062a8:	f003 0310 	and.w	r3, r3, #16
 80062ac:	2b10      	cmp	r3, #16
 80062ae:	d0f0      	beq.n	8006292 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80062b0:	2300      	movs	r3, #0
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3714      	adds	r7, #20
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr
 80062be:	bf00      	nop
 80062c0:	00030d40 	.word	0x00030d40

080062c4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b085      	sub	sp, #20
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	460b      	mov	r3, r1
 80062ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	78fb      	ldrb	r3, [r7, #3]
 80062de:	68f9      	ldr	r1, [r7, #12]
 80062e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062e4:	4313      	orrs	r3, r2
 80062e6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3714      	adds	r7, #20
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr

080062f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b084      	sub	sp, #16
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	68fa      	ldr	r2, [r7, #12]
 800630c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006310:	f043 0302 	orr.w	r3, r3, #2
 8006314:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8006316:	2003      	movs	r0, #3
 8006318:	f7fb fdae 	bl	8001e78 <HAL_Delay>

  return HAL_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	3710      	adds	r7, #16
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
	...

08006328 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006328:	b480      	push	{r7}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006330:	2300      	movs	r3, #0
 8006332:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	3301      	adds	r3, #1
 8006338:	60fb      	str	r3, [r7, #12]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	4a13      	ldr	r2, [pc, #76]	; (800638c <USB_CoreReset+0x64>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d901      	bls.n	8006346 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	e01b      	b.n	800637e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	2b00      	cmp	r3, #0
 800634c:	daf2      	bge.n	8006334 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800634e:	2300      	movs	r3, #0
 8006350:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	f043 0201 	orr.w	r2, r3, #1
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	3301      	adds	r3, #1
 8006362:	60fb      	str	r3, [r7, #12]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	4a09      	ldr	r2, [pc, #36]	; (800638c <USB_CoreReset+0x64>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d901      	bls.n	8006370 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800636c:	2303      	movs	r3, #3
 800636e:	e006      	b.n	800637e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	691b      	ldr	r3, [r3, #16]
 8006374:	f003 0301 	and.w	r3, r3, #1
 8006378:	2b01      	cmp	r3, #1
 800637a:	d0f0      	beq.n	800635e <USB_CoreReset+0x36>

  return HAL_OK;
 800637c:	2300      	movs	r3, #0
}
 800637e:	4618      	mov	r0, r3
 8006380:	3714      	adds	r7, #20
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr
 800638a:	bf00      	nop
 800638c:	00030d40 	.word	0x00030d40

08006390 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006390:	b480      	push	{r7}
 8006392:	b085      	sub	sp, #20
 8006394:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006396:	f3ef 8305 	mrs	r3, IPSR
 800639a:	60bb      	str	r3, [r7, #8]
  return(result);
 800639c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d10f      	bne.n	80063c2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063a2:	f3ef 8310 	mrs	r3, PRIMASK
 80063a6:	607b      	str	r3, [r7, #4]
  return(result);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d109      	bne.n	80063c2 <osKernelInitialize+0x32>
 80063ae:	4b11      	ldr	r3, [pc, #68]	; (80063f4 <osKernelInitialize+0x64>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2b02      	cmp	r3, #2
 80063b4:	d109      	bne.n	80063ca <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80063b6:	f3ef 8311 	mrs	r3, BASEPRI
 80063ba:	603b      	str	r3, [r7, #0]
  return(result);
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d003      	beq.n	80063ca <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80063c2:	f06f 0305 	mvn.w	r3, #5
 80063c6:	60fb      	str	r3, [r7, #12]
 80063c8:	e00c      	b.n	80063e4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80063ca:	4b0a      	ldr	r3, [pc, #40]	; (80063f4 <osKernelInitialize+0x64>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d105      	bne.n	80063de <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80063d2:	4b08      	ldr	r3, [pc, #32]	; (80063f4 <osKernelInitialize+0x64>)
 80063d4:	2201      	movs	r2, #1
 80063d6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80063d8:	2300      	movs	r3, #0
 80063da:	60fb      	str	r3, [r7, #12]
 80063dc:	e002      	b.n	80063e4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80063de:	f04f 33ff 	mov.w	r3, #4294967295
 80063e2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80063e4:	68fb      	ldr	r3, [r7, #12]
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3714      	adds	r7, #20
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr
 80063f2:	bf00      	nop
 80063f4:	200001c0 	.word	0x200001c0

080063f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063fe:	f3ef 8305 	mrs	r3, IPSR
 8006402:	60bb      	str	r3, [r7, #8]
  return(result);
 8006404:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006406:	2b00      	cmp	r3, #0
 8006408:	d10f      	bne.n	800642a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800640a:	f3ef 8310 	mrs	r3, PRIMASK
 800640e:	607b      	str	r3, [r7, #4]
  return(result);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d109      	bne.n	800642a <osKernelStart+0x32>
 8006416:	4b11      	ldr	r3, [pc, #68]	; (800645c <osKernelStart+0x64>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2b02      	cmp	r3, #2
 800641c:	d109      	bne.n	8006432 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800641e:	f3ef 8311 	mrs	r3, BASEPRI
 8006422:	603b      	str	r3, [r7, #0]
  return(result);
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d003      	beq.n	8006432 <osKernelStart+0x3a>
    stat = osErrorISR;
 800642a:	f06f 0305 	mvn.w	r3, #5
 800642e:	60fb      	str	r3, [r7, #12]
 8006430:	e00e      	b.n	8006450 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8006432:	4b0a      	ldr	r3, [pc, #40]	; (800645c <osKernelStart+0x64>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	2b01      	cmp	r3, #1
 8006438:	d107      	bne.n	800644a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800643a:	4b08      	ldr	r3, [pc, #32]	; (800645c <osKernelStart+0x64>)
 800643c:	2202      	movs	r2, #2
 800643e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8006440:	f001 f86a 	bl	8007518 <vTaskStartScheduler>
      stat = osOK;
 8006444:	2300      	movs	r3, #0
 8006446:	60fb      	str	r3, [r7, #12]
 8006448:	e002      	b.n	8006450 <osKernelStart+0x58>
    } else {
      stat = osError;
 800644a:	f04f 33ff 	mov.w	r3, #4294967295
 800644e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006450:	68fb      	ldr	r3, [r7, #12]
}
 8006452:	4618      	mov	r0, r3
 8006454:	3710      	adds	r7, #16
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	200001c0 	.word	0x200001c0

08006460 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006460:	b580      	push	{r7, lr}
 8006462:	b092      	sub	sp, #72	; 0x48
 8006464:	af04      	add	r7, sp, #16
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800646c:	2300      	movs	r3, #0
 800646e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006470:	f3ef 8305 	mrs	r3, IPSR
 8006474:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006476:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8006478:	2b00      	cmp	r3, #0
 800647a:	f040 8094 	bne.w	80065a6 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800647e:	f3ef 8310 	mrs	r3, PRIMASK
 8006482:	623b      	str	r3, [r7, #32]
  return(result);
 8006484:	6a3b      	ldr	r3, [r7, #32]
 8006486:	2b00      	cmp	r3, #0
 8006488:	f040 808d 	bne.w	80065a6 <osThreadNew+0x146>
 800648c:	4b48      	ldr	r3, [pc, #288]	; (80065b0 <osThreadNew+0x150>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	2b02      	cmp	r3, #2
 8006492:	d106      	bne.n	80064a2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006494:	f3ef 8311 	mrs	r3, BASEPRI
 8006498:	61fb      	str	r3, [r7, #28]
  return(result);
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	2b00      	cmp	r3, #0
 800649e:	f040 8082 	bne.w	80065a6 <osThreadNew+0x146>
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d07e      	beq.n	80065a6 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80064a8:	2380      	movs	r3, #128	; 0x80
 80064aa:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80064ac:	2318      	movs	r3, #24
 80064ae:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80064b0:	2300      	movs	r3, #0
 80064b2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80064b4:	f107 031b 	add.w	r3, r7, #27
 80064b8:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80064ba:	f04f 33ff 	mov.w	r3, #4294967295
 80064be:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d045      	beq.n	8006552 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d002      	beq.n	80064d4 <osThreadNew+0x74>
        name = attr->name;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	699b      	ldr	r3, [r3, #24]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d002      	beq.n	80064e2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	699b      	ldr	r3, [r3, #24]
 80064e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80064e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d008      	beq.n	80064fa <osThreadNew+0x9a>
 80064e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ea:	2b38      	cmp	r3, #56	; 0x38
 80064ec:	d805      	bhi.n	80064fa <osThreadNew+0x9a>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	f003 0301 	and.w	r3, r3, #1
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d001      	beq.n	80064fe <osThreadNew+0x9e>
        return (NULL);
 80064fa:	2300      	movs	r3, #0
 80064fc:	e054      	b.n	80065a8 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	695b      	ldr	r3, [r3, #20]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d003      	beq.n	800650e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	695b      	ldr	r3, [r3, #20]
 800650a:	089b      	lsrs	r3, r3, #2
 800650c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d00e      	beq.n	8006534 <osThreadNew+0xd4>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	2b5b      	cmp	r3, #91	; 0x5b
 800651c:	d90a      	bls.n	8006534 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006522:	2b00      	cmp	r3, #0
 8006524:	d006      	beq.n	8006534 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	695b      	ldr	r3, [r3, #20]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d002      	beq.n	8006534 <osThreadNew+0xd4>
        mem = 1;
 800652e:	2301      	movs	r3, #1
 8006530:	62bb      	str	r3, [r7, #40]	; 0x28
 8006532:	e010      	b.n	8006556 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d10c      	bne.n	8006556 <osThreadNew+0xf6>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d108      	bne.n	8006556 <osThreadNew+0xf6>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	691b      	ldr	r3, [r3, #16]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d104      	bne.n	8006556 <osThreadNew+0xf6>
          mem = 0;
 800654c:	2300      	movs	r3, #0
 800654e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006550:	e001      	b.n	8006556 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8006552:	2300      	movs	r3, #0
 8006554:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8006556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006558:	2b01      	cmp	r3, #1
 800655a:	d110      	bne.n	800657e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006564:	9202      	str	r2, [sp, #8]
 8006566:	9301      	str	r3, [sp, #4]
 8006568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800656a:	9300      	str	r3, [sp, #0]
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006570:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006572:	68f8      	ldr	r0, [r7, #12]
 8006574:	f000 fe08 	bl	8007188 <xTaskCreateStatic>
 8006578:	4603      	mov	r3, r0
 800657a:	617b      	str	r3, [r7, #20]
 800657c:	e013      	b.n	80065a6 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800657e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006580:	2b00      	cmp	r3, #0
 8006582:	d110      	bne.n	80065a6 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006586:	b29a      	uxth	r2, r3
 8006588:	f107 0314 	add.w	r3, r7, #20
 800658c:	9301      	str	r3, [sp, #4]
 800658e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006590:	9300      	str	r3, [sp, #0]
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006596:	68f8      	ldr	r0, [r7, #12]
 8006598:	f000 fe4f 	bl	800723a <xTaskCreate>
 800659c:	4603      	mov	r3, r0
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d001      	beq.n	80065a6 <osThreadNew+0x146>
          hTask = NULL;
 80065a2:	2300      	movs	r3, #0
 80065a4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80065a6:	697b      	ldr	r3, [r7, #20]
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3738      	adds	r7, #56	; 0x38
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}
 80065b0:	200001c0 	.word	0x200001c0

080065b4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b086      	sub	sp, #24
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065bc:	f3ef 8305 	mrs	r3, IPSR
 80065c0:	613b      	str	r3, [r7, #16]
  return(result);
 80065c2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d10f      	bne.n	80065e8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065c8:	f3ef 8310 	mrs	r3, PRIMASK
 80065cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d109      	bne.n	80065e8 <osDelay+0x34>
 80065d4:	4b0d      	ldr	r3, [pc, #52]	; (800660c <osDelay+0x58>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2b02      	cmp	r3, #2
 80065da:	d109      	bne.n	80065f0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80065dc:	f3ef 8311 	mrs	r3, BASEPRI
 80065e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d003      	beq.n	80065f0 <osDelay+0x3c>
    stat = osErrorISR;
 80065e8:	f06f 0305 	mvn.w	r3, #5
 80065ec:	617b      	str	r3, [r7, #20]
 80065ee:	e007      	b.n	8006600 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80065f0:	2300      	movs	r3, #0
 80065f2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d002      	beq.n	8006600 <osDelay+0x4c>
      vTaskDelay(ticks);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 ff58 	bl	80074b0 <vTaskDelay>
    }
  }

  return (stat);
 8006600:	697b      	ldr	r3, [r7, #20]
}
 8006602:	4618      	mov	r0, r3
 8006604:	3718      	adds	r7, #24
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
 800660a:	bf00      	nop
 800660c:	200001c0 	.word	0x200001c0

08006610 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006610:	b480      	push	{r7}
 8006612:	b085      	sub	sp, #20
 8006614:	af00      	add	r7, sp, #0
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	60b9      	str	r1, [r7, #8]
 800661a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	4a07      	ldr	r2, [pc, #28]	; (800663c <vApplicationGetIdleTaskMemory+0x2c>)
 8006620:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	4a06      	ldr	r2, [pc, #24]	; (8006640 <vApplicationGetIdleTaskMemory+0x30>)
 8006626:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2280      	movs	r2, #128	; 0x80
 800662c:	601a      	str	r2, [r3, #0]
}
 800662e:	bf00      	nop
 8006630:	3714      	adds	r7, #20
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop
 800663c:	200001c4 	.word	0x200001c4
 8006640:	20000220 	.word	0x20000220

08006644 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006644:	b480      	push	{r7}
 8006646:	b085      	sub	sp, #20
 8006648:	af00      	add	r7, sp, #0
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	60b9      	str	r1, [r7, #8]
 800664e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	4a07      	ldr	r2, [pc, #28]	; (8006670 <vApplicationGetTimerTaskMemory+0x2c>)
 8006654:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	4a06      	ldr	r2, [pc, #24]	; (8006674 <vApplicationGetTimerTaskMemory+0x30>)
 800665a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006662:	601a      	str	r2, [r3, #0]
}
 8006664:	bf00      	nop
 8006666:	3714      	adds	r7, #20
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr
 8006670:	20000420 	.word	0x20000420
 8006674:	2000047c 	.word	0x2000047c

08006678 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f103 0208 	add.w	r2, r3, #8
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f04f 32ff 	mov.w	r2, #4294967295
 8006690:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f103 0208 	add.w	r2, r3, #8
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f103 0208 	add.w	r2, r3, #8
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80066ac:	bf00      	nop
 80066ae:	370c      	adds	r7, #12
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80066c6:	bf00      	nop
 80066c8:	370c      	adds	r7, #12
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr

080066d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80066d2:	b480      	push	{r7}
 80066d4:	b085      	sub	sp, #20
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
 80066da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	68fa      	ldr	r2, [r7, #12]
 80066e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	689a      	ldr	r2, [r3, #8]
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	683a      	ldr	r2, [r7, #0]
 80066f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	683a      	ldr	r2, [r7, #0]
 80066fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	1c5a      	adds	r2, r3, #1
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	601a      	str	r2, [r3, #0]
}
 800670e:	bf00      	nop
 8006710:	3714      	adds	r7, #20
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr

0800671a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800671a:	b480      	push	{r7}
 800671c:	b085      	sub	sp, #20
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
 8006722:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006730:	d103      	bne.n	800673a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	691b      	ldr	r3, [r3, #16]
 8006736:	60fb      	str	r3, [r7, #12]
 8006738:	e00c      	b.n	8006754 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	3308      	adds	r3, #8
 800673e:	60fb      	str	r3, [r7, #12]
 8006740:	e002      	b.n	8006748 <vListInsert+0x2e>
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	60fb      	str	r3, [r7, #12]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68ba      	ldr	r2, [r7, #8]
 8006750:	429a      	cmp	r2, r3
 8006752:	d2f6      	bcs.n	8006742 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	685a      	ldr	r2, [r3, #4]
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	683a      	ldr	r2, [r7, #0]
 8006762:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	68fa      	ldr	r2, [r7, #12]
 8006768:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	683a      	ldr	r2, [r7, #0]
 800676e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	1c5a      	adds	r2, r3, #1
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	601a      	str	r2, [r3, #0]
}
 8006780:	bf00      	nop
 8006782:	3714      	adds	r7, #20
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr

0800678c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800678c:	b480      	push	{r7}
 800678e:	b085      	sub	sp, #20
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	691b      	ldr	r3, [r3, #16]
 8006798:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	6892      	ldr	r2, [r2, #8]
 80067a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	6852      	ldr	r2, [r2, #4]
 80067ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d103      	bne.n	80067c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	689a      	ldr	r2, [r3, #8]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	1e5a      	subs	r2, r3, #1
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3714      	adds	r7, #20
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr

080067e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d109      	bne.n	8006808 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80067f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f8:	f383 8811 	msr	BASEPRI, r3
 80067fc:	f3bf 8f6f 	isb	sy
 8006800:	f3bf 8f4f 	dsb	sy
 8006804:	60bb      	str	r3, [r7, #8]
 8006806:	e7fe      	b.n	8006806 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8006808:	f001 ffd8 	bl	80087bc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006814:	68f9      	ldr	r1, [r7, #12]
 8006816:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006818:	fb01 f303 	mul.w	r3, r1, r3
 800681c:	441a      	add	r2, r3
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2200      	movs	r2, #0
 8006826:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006838:	3b01      	subs	r3, #1
 800683a:	68f9      	ldr	r1, [r7, #12]
 800683c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800683e:	fb01 f303 	mul.w	r3, r1, r3
 8006842:	441a      	add	r2, r3
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	22ff      	movs	r2, #255	; 0xff
 800684c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	22ff      	movs	r2, #255	; 0xff
 8006854:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d114      	bne.n	8006888 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d01a      	beq.n	800689c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	3310      	adds	r3, #16
 800686a:	4618      	mov	r0, r3
 800686c:	f001 f8da 	bl	8007a24 <xTaskRemoveFromEventList>
 8006870:	4603      	mov	r3, r0
 8006872:	2b00      	cmp	r3, #0
 8006874:	d012      	beq.n	800689c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006876:	4b0d      	ldr	r3, [pc, #52]	; (80068ac <xQueueGenericReset+0xcc>)
 8006878:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800687c:	601a      	str	r2, [r3, #0]
 800687e:	f3bf 8f4f 	dsb	sy
 8006882:	f3bf 8f6f 	isb	sy
 8006886:	e009      	b.n	800689c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	3310      	adds	r3, #16
 800688c:	4618      	mov	r0, r3
 800688e:	f7ff fef3 	bl	8006678 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	3324      	adds	r3, #36	; 0x24
 8006896:	4618      	mov	r0, r3
 8006898:	f7ff feee 	bl	8006678 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800689c:	f001 ffbc 	bl	8008818 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80068a0:	2301      	movs	r3, #1
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3710      	adds	r7, #16
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop
 80068ac:	e000ed04 	.word	0xe000ed04

080068b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b08e      	sub	sp, #56	; 0x38
 80068b4:	af02      	add	r7, sp, #8
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	607a      	str	r2, [r7, #4]
 80068bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d109      	bne.n	80068d8 <xQueueGenericCreateStatic+0x28>
 80068c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c8:	f383 8811 	msr	BASEPRI, r3
 80068cc:	f3bf 8f6f 	isb	sy
 80068d0:	f3bf 8f4f 	dsb	sy
 80068d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80068d6:	e7fe      	b.n	80068d6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d109      	bne.n	80068f2 <xQueueGenericCreateStatic+0x42>
 80068de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e2:	f383 8811 	msr	BASEPRI, r3
 80068e6:	f3bf 8f6f 	isb	sy
 80068ea:	f3bf 8f4f 	dsb	sy
 80068ee:	627b      	str	r3, [r7, #36]	; 0x24
 80068f0:	e7fe      	b.n	80068f0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d002      	beq.n	80068fe <xQueueGenericCreateStatic+0x4e>
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d001      	beq.n	8006902 <xQueueGenericCreateStatic+0x52>
 80068fe:	2301      	movs	r3, #1
 8006900:	e000      	b.n	8006904 <xQueueGenericCreateStatic+0x54>
 8006902:	2300      	movs	r3, #0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d109      	bne.n	800691c <xQueueGenericCreateStatic+0x6c>
 8006908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690c:	f383 8811 	msr	BASEPRI, r3
 8006910:	f3bf 8f6f 	isb	sy
 8006914:	f3bf 8f4f 	dsb	sy
 8006918:	623b      	str	r3, [r7, #32]
 800691a:	e7fe      	b.n	800691a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d102      	bne.n	8006928 <xQueueGenericCreateStatic+0x78>
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d101      	bne.n	800692c <xQueueGenericCreateStatic+0x7c>
 8006928:	2301      	movs	r3, #1
 800692a:	e000      	b.n	800692e <xQueueGenericCreateStatic+0x7e>
 800692c:	2300      	movs	r3, #0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d109      	bne.n	8006946 <xQueueGenericCreateStatic+0x96>
 8006932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006936:	f383 8811 	msr	BASEPRI, r3
 800693a:	f3bf 8f6f 	isb	sy
 800693e:	f3bf 8f4f 	dsb	sy
 8006942:	61fb      	str	r3, [r7, #28]
 8006944:	e7fe      	b.n	8006944 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006946:	2350      	movs	r3, #80	; 0x50
 8006948:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	2b50      	cmp	r3, #80	; 0x50
 800694e:	d009      	beq.n	8006964 <xQueueGenericCreateStatic+0xb4>
 8006950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006954:	f383 8811 	msr	BASEPRI, r3
 8006958:	f3bf 8f6f 	isb	sy
 800695c:	f3bf 8f4f 	dsb	sy
 8006960:	61bb      	str	r3, [r7, #24]
 8006962:	e7fe      	b.n	8006962 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800696a:	2b00      	cmp	r3, #0
 800696c:	d00d      	beq.n	800698a <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800696e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006970:	2201      	movs	r2, #1
 8006972:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006976:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800697a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800697c:	9300      	str	r3, [sp, #0]
 800697e:	4613      	mov	r3, r2
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	68b9      	ldr	r1, [r7, #8]
 8006984:	68f8      	ldr	r0, [r7, #12]
 8006986:	f000 f805 	bl	8006994 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800698a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800698c:	4618      	mov	r0, r3
 800698e:	3730      	adds	r7, #48	; 0x30
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	607a      	str	r2, [r7, #4]
 80069a0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d103      	bne.n	80069b0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80069a8:	69bb      	ldr	r3, [r7, #24]
 80069aa:	69ba      	ldr	r2, [r7, #24]
 80069ac:	601a      	str	r2, [r3, #0]
 80069ae:	e002      	b.n	80069b6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80069b0:	69bb      	ldr	r3, [r7, #24]
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	68fa      	ldr	r2, [r7, #12]
 80069ba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80069bc:	69bb      	ldr	r3, [r7, #24]
 80069be:	68ba      	ldr	r2, [r7, #8]
 80069c0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80069c2:	2101      	movs	r1, #1
 80069c4:	69b8      	ldr	r0, [r7, #24]
 80069c6:	f7ff ff0b 	bl	80067e0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	78fa      	ldrb	r2, [r7, #3]
 80069ce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80069d2:	bf00      	nop
 80069d4:	3710      	adds	r7, #16
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
	...

080069dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b08e      	sub	sp, #56	; 0x38
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	607a      	str	r2, [r7, #4]
 80069e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80069ea:	2300      	movs	r3, #0
 80069ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80069f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d109      	bne.n	8006a0c <xQueueGenericSend+0x30>
 80069f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069fc:	f383 8811 	msr	BASEPRI, r3
 8006a00:	f3bf 8f6f 	isb	sy
 8006a04:	f3bf 8f4f 	dsb	sy
 8006a08:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a0a:	e7fe      	b.n	8006a0a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d103      	bne.n	8006a1a <xQueueGenericSend+0x3e>
 8006a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d101      	bne.n	8006a1e <xQueueGenericSend+0x42>
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e000      	b.n	8006a20 <xQueueGenericSend+0x44>
 8006a1e:	2300      	movs	r3, #0
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d109      	bne.n	8006a38 <xQueueGenericSend+0x5c>
 8006a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a28:	f383 8811 	msr	BASEPRI, r3
 8006a2c:	f3bf 8f6f 	isb	sy
 8006a30:	f3bf 8f4f 	dsb	sy
 8006a34:	627b      	str	r3, [r7, #36]	; 0x24
 8006a36:	e7fe      	b.n	8006a36 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d103      	bne.n	8006a46 <xQueueGenericSend+0x6a>
 8006a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d101      	bne.n	8006a4a <xQueueGenericSend+0x6e>
 8006a46:	2301      	movs	r3, #1
 8006a48:	e000      	b.n	8006a4c <xQueueGenericSend+0x70>
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d109      	bne.n	8006a64 <xQueueGenericSend+0x88>
 8006a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a54:	f383 8811 	msr	BASEPRI, r3
 8006a58:	f3bf 8f6f 	isb	sy
 8006a5c:	f3bf 8f4f 	dsb	sy
 8006a60:	623b      	str	r3, [r7, #32]
 8006a62:	e7fe      	b.n	8006a62 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a64:	f001 f99a 	bl	8007d9c <xTaskGetSchedulerState>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d102      	bne.n	8006a74 <xQueueGenericSend+0x98>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d101      	bne.n	8006a78 <xQueueGenericSend+0x9c>
 8006a74:	2301      	movs	r3, #1
 8006a76:	e000      	b.n	8006a7a <xQueueGenericSend+0x9e>
 8006a78:	2300      	movs	r3, #0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d109      	bne.n	8006a92 <xQueueGenericSend+0xb6>
 8006a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a82:	f383 8811 	msr	BASEPRI, r3
 8006a86:	f3bf 8f6f 	isb	sy
 8006a8a:	f3bf 8f4f 	dsb	sy
 8006a8e:	61fb      	str	r3, [r7, #28]
 8006a90:	e7fe      	b.n	8006a90 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a92:	f001 fe93 	bl	80087bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d302      	bcc.n	8006aa8 <xQueueGenericSend+0xcc>
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	2b02      	cmp	r3, #2
 8006aa6:	d129      	bne.n	8006afc <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006aa8:	683a      	ldr	r2, [r7, #0]
 8006aaa:	68b9      	ldr	r1, [r7, #8]
 8006aac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006aae:	f000 f9ff 	bl	8006eb0 <prvCopyDataToQueue>
 8006ab2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d010      	beq.n	8006ade <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006abe:	3324      	adds	r3, #36	; 0x24
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f000 ffaf 	bl	8007a24 <xTaskRemoveFromEventList>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d013      	beq.n	8006af4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006acc:	4b3f      	ldr	r3, [pc, #252]	; (8006bcc <xQueueGenericSend+0x1f0>)
 8006ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ad2:	601a      	str	r2, [r3, #0]
 8006ad4:	f3bf 8f4f 	dsb	sy
 8006ad8:	f3bf 8f6f 	isb	sy
 8006adc:	e00a      	b.n	8006af4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d007      	beq.n	8006af4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006ae4:	4b39      	ldr	r3, [pc, #228]	; (8006bcc <xQueueGenericSend+0x1f0>)
 8006ae6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006aea:	601a      	str	r2, [r3, #0]
 8006aec:	f3bf 8f4f 	dsb	sy
 8006af0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006af4:	f001 fe90 	bl	8008818 <vPortExitCritical>
				return pdPASS;
 8006af8:	2301      	movs	r3, #1
 8006afa:	e063      	b.n	8006bc4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d103      	bne.n	8006b0a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006b02:	f001 fe89 	bl	8008818 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006b06:	2300      	movs	r3, #0
 8006b08:	e05c      	b.n	8006bc4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d106      	bne.n	8006b1e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006b10:	f107 0314 	add.w	r3, r7, #20
 8006b14:	4618      	mov	r0, r3
 8006b16:	f000 ffe7 	bl	8007ae8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006b1e:	f001 fe7b 	bl	8008818 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006b22:	f000 fd5d 	bl	80075e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006b26:	f001 fe49 	bl	80087bc <vPortEnterCritical>
 8006b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b30:	b25b      	sxtb	r3, r3
 8006b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b36:	d103      	bne.n	8006b40 <xQueueGenericSend+0x164>
 8006b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b46:	b25b      	sxtb	r3, r3
 8006b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b4c:	d103      	bne.n	8006b56 <xQueueGenericSend+0x17a>
 8006b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b50:	2200      	movs	r2, #0
 8006b52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b56:	f001 fe5f 	bl	8008818 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006b5a:	1d3a      	adds	r2, r7, #4
 8006b5c:	f107 0314 	add.w	r3, r7, #20
 8006b60:	4611      	mov	r1, r2
 8006b62:	4618      	mov	r0, r3
 8006b64:	f000 ffd6 	bl	8007b14 <xTaskCheckForTimeOut>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d124      	bne.n	8006bb8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006b6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b70:	f000 fa96 	bl	80070a0 <prvIsQueueFull>
 8006b74:	4603      	mov	r3, r0
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d018      	beq.n	8006bac <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b7c:	3310      	adds	r3, #16
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	4611      	mov	r1, r2
 8006b82:	4618      	mov	r0, r3
 8006b84:	f000 ff00 	bl	8007988 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006b88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b8a:	f000 fa21 	bl	8006fd0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006b8e:	f000 fd35 	bl	80075fc <xTaskResumeAll>
 8006b92:	4603      	mov	r3, r0
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	f47f af7c 	bne.w	8006a92 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8006b9a:	4b0c      	ldr	r3, [pc, #48]	; (8006bcc <xQueueGenericSend+0x1f0>)
 8006b9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ba0:	601a      	str	r2, [r3, #0]
 8006ba2:	f3bf 8f4f 	dsb	sy
 8006ba6:	f3bf 8f6f 	isb	sy
 8006baa:	e772      	b.n	8006a92 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006bac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bae:	f000 fa0f 	bl	8006fd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006bb2:	f000 fd23 	bl	80075fc <xTaskResumeAll>
 8006bb6:	e76c      	b.n	8006a92 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006bb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bba:	f000 fa09 	bl	8006fd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006bbe:	f000 fd1d 	bl	80075fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006bc2:	2300      	movs	r3, #0
		}
	}
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3738      	adds	r7, #56	; 0x38
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}
 8006bcc:	e000ed04 	.word	0xe000ed04

08006bd0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b08e      	sub	sp, #56	; 0x38
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	60b9      	str	r1, [r7, #8]
 8006bda:	607a      	str	r2, [r7, #4]
 8006bdc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d109      	bne.n	8006bfc <xQueueGenericSendFromISR+0x2c>
 8006be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bec:	f383 8811 	msr	BASEPRI, r3
 8006bf0:	f3bf 8f6f 	isb	sy
 8006bf4:	f3bf 8f4f 	dsb	sy
 8006bf8:	627b      	str	r3, [r7, #36]	; 0x24
 8006bfa:	e7fe      	b.n	8006bfa <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d103      	bne.n	8006c0a <xQueueGenericSendFromISR+0x3a>
 8006c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d101      	bne.n	8006c0e <xQueueGenericSendFromISR+0x3e>
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e000      	b.n	8006c10 <xQueueGenericSendFromISR+0x40>
 8006c0e:	2300      	movs	r3, #0
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d109      	bne.n	8006c28 <xQueueGenericSendFromISR+0x58>
 8006c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c18:	f383 8811 	msr	BASEPRI, r3
 8006c1c:	f3bf 8f6f 	isb	sy
 8006c20:	f3bf 8f4f 	dsb	sy
 8006c24:	623b      	str	r3, [r7, #32]
 8006c26:	e7fe      	b.n	8006c26 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	2b02      	cmp	r3, #2
 8006c2c:	d103      	bne.n	8006c36 <xQueueGenericSendFromISR+0x66>
 8006c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d101      	bne.n	8006c3a <xQueueGenericSendFromISR+0x6a>
 8006c36:	2301      	movs	r3, #1
 8006c38:	e000      	b.n	8006c3c <xQueueGenericSendFromISR+0x6c>
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d109      	bne.n	8006c54 <xQueueGenericSendFromISR+0x84>
 8006c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c44:	f383 8811 	msr	BASEPRI, r3
 8006c48:	f3bf 8f6f 	isb	sy
 8006c4c:	f3bf 8f4f 	dsb	sy
 8006c50:	61fb      	str	r3, [r7, #28]
 8006c52:	e7fe      	b.n	8006c52 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c54:	f001 fe8e 	bl	8008974 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006c58:	f3ef 8211 	mrs	r2, BASEPRI
 8006c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c60:	f383 8811 	msr	BASEPRI, r3
 8006c64:	f3bf 8f6f 	isb	sy
 8006c68:	f3bf 8f4f 	dsb	sy
 8006c6c:	61ba      	str	r2, [r7, #24]
 8006c6e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006c70:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c72:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d302      	bcc.n	8006c86 <xQueueGenericSendFromISR+0xb6>
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d12c      	bne.n	8006ce0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006c90:	683a      	ldr	r2, [r7, #0]
 8006c92:	68b9      	ldr	r1, [r7, #8]
 8006c94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c96:	f000 f90b 	bl	8006eb0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006c9a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca2:	d112      	bne.n	8006cca <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d016      	beq.n	8006cda <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cae:	3324      	adds	r3, #36	; 0x24
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f000 feb7 	bl	8007a24 <xTaskRemoveFromEventList>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d00e      	beq.n	8006cda <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00b      	beq.n	8006cda <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	601a      	str	r2, [r3, #0]
 8006cc8:	e007      	b.n	8006cda <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006cca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006cce:	3301      	adds	r3, #1
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	b25a      	sxtb	r2, r3
 8006cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006cde:	e001      	b.n	8006ce4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	637b      	str	r3, [r7, #52]	; 0x34
 8006ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3738      	adds	r7, #56	; 0x38
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b08c      	sub	sp, #48	; 0x30
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	60b9      	str	r1, [r7, #8]
 8006d02:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006d04:	2300      	movs	r3, #0
 8006d06:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d109      	bne.n	8006d26 <xQueueReceive+0x2e>
	__asm volatile
 8006d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d16:	f383 8811 	msr	BASEPRI, r3
 8006d1a:	f3bf 8f6f 	isb	sy
 8006d1e:	f3bf 8f4f 	dsb	sy
 8006d22:	623b      	str	r3, [r7, #32]
 8006d24:	e7fe      	b.n	8006d24 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d103      	bne.n	8006d34 <xQueueReceive+0x3c>
 8006d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d101      	bne.n	8006d38 <xQueueReceive+0x40>
 8006d34:	2301      	movs	r3, #1
 8006d36:	e000      	b.n	8006d3a <xQueueReceive+0x42>
 8006d38:	2300      	movs	r3, #0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d109      	bne.n	8006d52 <xQueueReceive+0x5a>
 8006d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d42:	f383 8811 	msr	BASEPRI, r3
 8006d46:	f3bf 8f6f 	isb	sy
 8006d4a:	f3bf 8f4f 	dsb	sy
 8006d4e:	61fb      	str	r3, [r7, #28]
 8006d50:	e7fe      	b.n	8006d50 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d52:	f001 f823 	bl	8007d9c <xTaskGetSchedulerState>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d102      	bne.n	8006d62 <xQueueReceive+0x6a>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d101      	bne.n	8006d66 <xQueueReceive+0x6e>
 8006d62:	2301      	movs	r3, #1
 8006d64:	e000      	b.n	8006d68 <xQueueReceive+0x70>
 8006d66:	2300      	movs	r3, #0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d109      	bne.n	8006d80 <xQueueReceive+0x88>
 8006d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d70:	f383 8811 	msr	BASEPRI, r3
 8006d74:	f3bf 8f6f 	isb	sy
 8006d78:	f3bf 8f4f 	dsb	sy
 8006d7c:	61bb      	str	r3, [r7, #24]
 8006d7e:	e7fe      	b.n	8006d7e <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d80:	f001 fd1c 	bl	80087bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d88:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d01f      	beq.n	8006dd0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006d90:	68b9      	ldr	r1, [r7, #8]
 8006d92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d94:	f000 f8f6 	bl	8006f84 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9a:	1e5a      	subs	r2, r3, #1
 8006d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d9e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da2:	691b      	ldr	r3, [r3, #16]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d00f      	beq.n	8006dc8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006daa:	3310      	adds	r3, #16
 8006dac:	4618      	mov	r0, r3
 8006dae:	f000 fe39 	bl	8007a24 <xTaskRemoveFromEventList>
 8006db2:	4603      	mov	r3, r0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d007      	beq.n	8006dc8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006db8:	4b3c      	ldr	r3, [pc, #240]	; (8006eac <xQueueReceive+0x1b4>)
 8006dba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dbe:	601a      	str	r2, [r3, #0]
 8006dc0:	f3bf 8f4f 	dsb	sy
 8006dc4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006dc8:	f001 fd26 	bl	8008818 <vPortExitCritical>
				return pdPASS;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e069      	b.n	8006ea4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d103      	bne.n	8006dde <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006dd6:	f001 fd1f 	bl	8008818 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	e062      	b.n	8006ea4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d106      	bne.n	8006df2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006de4:	f107 0310 	add.w	r3, r7, #16
 8006de8:	4618      	mov	r0, r3
 8006dea:	f000 fe7d 	bl	8007ae8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006dee:	2301      	movs	r3, #1
 8006df0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006df2:	f001 fd11 	bl	8008818 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006df6:	f000 fbf3 	bl	80075e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006dfa:	f001 fcdf 	bl	80087bc <vPortEnterCritical>
 8006dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e04:	b25b      	sxtb	r3, r3
 8006e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e0a:	d103      	bne.n	8006e14 <xQueueReceive+0x11c>
 8006e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e1a:	b25b      	sxtb	r3, r3
 8006e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e20:	d103      	bne.n	8006e2a <xQueueReceive+0x132>
 8006e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e24:	2200      	movs	r2, #0
 8006e26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e2a:	f001 fcf5 	bl	8008818 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e2e:	1d3a      	adds	r2, r7, #4
 8006e30:	f107 0310 	add.w	r3, r7, #16
 8006e34:	4611      	mov	r1, r2
 8006e36:	4618      	mov	r0, r3
 8006e38:	f000 fe6c 	bl	8007b14 <xTaskCheckForTimeOut>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d123      	bne.n	8006e8a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e44:	f000 f916 	bl	8007074 <prvIsQueueEmpty>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d017      	beq.n	8006e7e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e50:	3324      	adds	r3, #36	; 0x24
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	4611      	mov	r1, r2
 8006e56:	4618      	mov	r0, r3
 8006e58:	f000 fd96 	bl	8007988 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006e5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e5e:	f000 f8b7 	bl	8006fd0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006e62:	f000 fbcb 	bl	80075fc <xTaskResumeAll>
 8006e66:	4603      	mov	r3, r0
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d189      	bne.n	8006d80 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8006e6c:	4b0f      	ldr	r3, [pc, #60]	; (8006eac <xQueueReceive+0x1b4>)
 8006e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e72:	601a      	str	r2, [r3, #0]
 8006e74:	f3bf 8f4f 	dsb	sy
 8006e78:	f3bf 8f6f 	isb	sy
 8006e7c:	e780      	b.n	8006d80 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006e7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e80:	f000 f8a6 	bl	8006fd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e84:	f000 fbba 	bl	80075fc <xTaskResumeAll>
 8006e88:	e77a      	b.n	8006d80 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006e8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e8c:	f000 f8a0 	bl	8006fd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e90:	f000 fbb4 	bl	80075fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e96:	f000 f8ed 	bl	8007074 <prvIsQueueEmpty>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	f43f af6f 	beq.w	8006d80 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006ea2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3730      	adds	r7, #48	; 0x30
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}
 8006eac:	e000ed04 	.word	0xe000ed04

08006eb0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b086      	sub	sp, #24
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d10d      	bne.n	8006eea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d14d      	bne.n	8006f72 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	4618      	mov	r0, r3
 8006edc:	f000 ff7c 	bl	8007dd8 <xTaskPriorityDisinherit>
 8006ee0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	605a      	str	r2, [r3, #4]
 8006ee8:	e043      	b.n	8006f72 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d119      	bne.n	8006f24 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	6898      	ldr	r0, [r3, #8]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef8:	461a      	mov	r2, r3
 8006efa:	68b9      	ldr	r1, [r7, #8]
 8006efc:	f001 ff78 	bl	8008df0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	689a      	ldr	r2, [r3, #8]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f08:	441a      	add	r2, r3
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	689a      	ldr	r2, [r3, #8]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d32b      	bcc.n	8006f72 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	609a      	str	r2, [r3, #8]
 8006f22:	e026      	b.n	8006f72 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	68d8      	ldr	r0, [r3, #12]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	68b9      	ldr	r1, [r7, #8]
 8006f30:	f001 ff5e 	bl	8008df0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	68da      	ldr	r2, [r3, #12]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f3c:	425b      	negs	r3, r3
 8006f3e:	441a      	add	r2, r3
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	68da      	ldr	r2, [r3, #12]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d207      	bcs.n	8006f60 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	685a      	ldr	r2, [r3, #4]
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f58:	425b      	negs	r3, r3
 8006f5a:	441a      	add	r2, r3
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2b02      	cmp	r3, #2
 8006f64:	d105      	bne.n	8006f72 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d002      	beq.n	8006f72 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	3b01      	subs	r3, #1
 8006f70:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	1c5a      	adds	r2, r3, #1
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006f7a:	697b      	ldr	r3, [r7, #20]
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3718      	adds	r7, #24
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b082      	sub	sp, #8
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d018      	beq.n	8006fc8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	68da      	ldr	r2, [r3, #12]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f9e:	441a      	add	r2, r3
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	68da      	ldr	r2, [r3, #12]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d303      	bcc.n	8006fb8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	68d9      	ldr	r1, [r3, #12]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	6838      	ldr	r0, [r7, #0]
 8006fc4:	f001 ff14 	bl	8008df0 <memcpy>
	}
}
 8006fc8:	bf00      	nop
 8006fca:	3708      	adds	r7, #8
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006fd8:	f001 fbf0 	bl	80087bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fe2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006fe4:	e011      	b.n	800700a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d012      	beq.n	8007014 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	3324      	adds	r3, #36	; 0x24
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f000 fd16 	bl	8007a24 <xTaskRemoveFromEventList>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d001      	beq.n	8007002 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006ffe:	f000 fde9 	bl	8007bd4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007002:	7bfb      	ldrb	r3, [r7, #15]
 8007004:	3b01      	subs	r3, #1
 8007006:	b2db      	uxtb	r3, r3
 8007008:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800700a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800700e:	2b00      	cmp	r3, #0
 8007010:	dce9      	bgt.n	8006fe6 <prvUnlockQueue+0x16>
 8007012:	e000      	b.n	8007016 <prvUnlockQueue+0x46>
					break;
 8007014:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	22ff      	movs	r2, #255	; 0xff
 800701a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800701e:	f001 fbfb 	bl	8008818 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007022:	f001 fbcb 	bl	80087bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800702c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800702e:	e011      	b.n	8007054 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d012      	beq.n	800705e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	3310      	adds	r3, #16
 800703c:	4618      	mov	r0, r3
 800703e:	f000 fcf1 	bl	8007a24 <xTaskRemoveFromEventList>
 8007042:	4603      	mov	r3, r0
 8007044:	2b00      	cmp	r3, #0
 8007046:	d001      	beq.n	800704c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007048:	f000 fdc4 	bl	8007bd4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800704c:	7bbb      	ldrb	r3, [r7, #14]
 800704e:	3b01      	subs	r3, #1
 8007050:	b2db      	uxtb	r3, r3
 8007052:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007054:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007058:	2b00      	cmp	r3, #0
 800705a:	dce9      	bgt.n	8007030 <prvUnlockQueue+0x60>
 800705c:	e000      	b.n	8007060 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800705e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	22ff      	movs	r2, #255	; 0xff
 8007064:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007068:	f001 fbd6 	bl	8008818 <vPortExitCritical>
}
 800706c:	bf00      	nop
 800706e:	3710      	adds	r7, #16
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b084      	sub	sp, #16
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800707c:	f001 fb9e 	bl	80087bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007084:	2b00      	cmp	r3, #0
 8007086:	d102      	bne.n	800708e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007088:	2301      	movs	r3, #1
 800708a:	60fb      	str	r3, [r7, #12]
 800708c:	e001      	b.n	8007092 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800708e:	2300      	movs	r3, #0
 8007090:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007092:	f001 fbc1 	bl	8008818 <vPortExitCritical>

	return xReturn;
 8007096:	68fb      	ldr	r3, [r7, #12]
}
 8007098:	4618      	mov	r0, r3
 800709a:	3710      	adds	r7, #16
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80070a8:	f001 fb88 	bl	80087bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d102      	bne.n	80070be <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80070b8:	2301      	movs	r3, #1
 80070ba:	60fb      	str	r3, [r7, #12]
 80070bc:	e001      	b.n	80070c2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80070be:	2300      	movs	r3, #0
 80070c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80070c2:	f001 fba9 	bl	8008818 <vPortExitCritical>

	return xReturn;
 80070c6:	68fb      	ldr	r3, [r7, #12]
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3710      	adds	r7, #16
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80070d0:	b480      	push	{r7}
 80070d2:	b085      	sub	sp, #20
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80070da:	2300      	movs	r3, #0
 80070dc:	60fb      	str	r3, [r7, #12]
 80070de:	e014      	b.n	800710a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80070e0:	4a0e      	ldr	r2, [pc, #56]	; (800711c <vQueueAddToRegistry+0x4c>)
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d10b      	bne.n	8007104 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80070ec:	490b      	ldr	r1, [pc, #44]	; (800711c <vQueueAddToRegistry+0x4c>)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	683a      	ldr	r2, [r7, #0]
 80070f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80070f6:	4a09      	ldr	r2, [pc, #36]	; (800711c <vQueueAddToRegistry+0x4c>)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	00db      	lsls	r3, r3, #3
 80070fc:	4413      	add	r3, r2
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007102:	e005      	b.n	8007110 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	3301      	adds	r3, #1
 8007108:	60fb      	str	r3, [r7, #12]
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2b07      	cmp	r3, #7
 800710e:	d9e7      	bls.n	80070e0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007110:	bf00      	nop
 8007112:	3714      	adds	r7, #20
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr
 800711c:	200021d4 	.word	0x200021d4

08007120 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007120:	b580      	push	{r7, lr}
 8007122:	b086      	sub	sp, #24
 8007124:	af00      	add	r7, sp, #0
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	60b9      	str	r1, [r7, #8]
 800712a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007130:	f001 fb44 	bl	80087bc <vPortEnterCritical>
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800713a:	b25b      	sxtb	r3, r3
 800713c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007140:	d103      	bne.n	800714a <vQueueWaitForMessageRestricted+0x2a>
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	2200      	movs	r2, #0
 8007146:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007150:	b25b      	sxtb	r3, r3
 8007152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007156:	d103      	bne.n	8007160 <vQueueWaitForMessageRestricted+0x40>
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	2200      	movs	r2, #0
 800715c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007160:	f001 fb5a 	bl	8008818 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007168:	2b00      	cmp	r3, #0
 800716a:	d106      	bne.n	800717a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	3324      	adds	r3, #36	; 0x24
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	68b9      	ldr	r1, [r7, #8]
 8007174:	4618      	mov	r0, r3
 8007176:	f000 fc2b 	bl	80079d0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800717a:	6978      	ldr	r0, [r7, #20]
 800717c:	f7ff ff28 	bl	8006fd0 <prvUnlockQueue>
	}
 8007180:	bf00      	nop
 8007182:	3718      	adds	r7, #24
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007188:	b580      	push	{r7, lr}
 800718a:	b08e      	sub	sp, #56	; 0x38
 800718c:	af04      	add	r7, sp, #16
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	607a      	str	r2, [r7, #4]
 8007194:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007198:	2b00      	cmp	r3, #0
 800719a:	d109      	bne.n	80071b0 <xTaskCreateStatic+0x28>
 800719c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a0:	f383 8811 	msr	BASEPRI, r3
 80071a4:	f3bf 8f6f 	isb	sy
 80071a8:	f3bf 8f4f 	dsb	sy
 80071ac:	623b      	str	r3, [r7, #32]
 80071ae:	e7fe      	b.n	80071ae <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80071b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d109      	bne.n	80071ca <xTaskCreateStatic+0x42>
 80071b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ba:	f383 8811 	msr	BASEPRI, r3
 80071be:	f3bf 8f6f 	isb	sy
 80071c2:	f3bf 8f4f 	dsb	sy
 80071c6:	61fb      	str	r3, [r7, #28]
 80071c8:	e7fe      	b.n	80071c8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80071ca:	235c      	movs	r3, #92	; 0x5c
 80071cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	2b5c      	cmp	r3, #92	; 0x5c
 80071d2:	d009      	beq.n	80071e8 <xTaskCreateStatic+0x60>
 80071d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d8:	f383 8811 	msr	BASEPRI, r3
 80071dc:	f3bf 8f6f 	isb	sy
 80071e0:	f3bf 8f4f 	dsb	sy
 80071e4:	61bb      	str	r3, [r7, #24]
 80071e6:	e7fe      	b.n	80071e6 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80071e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d01e      	beq.n	800722c <xTaskCreateStatic+0xa4>
 80071ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d01b      	beq.n	800722c <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80071f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80071f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071fc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80071fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007200:	2202      	movs	r2, #2
 8007202:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007206:	2300      	movs	r3, #0
 8007208:	9303      	str	r3, [sp, #12]
 800720a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720c:	9302      	str	r3, [sp, #8]
 800720e:	f107 0314 	add.w	r3, r7, #20
 8007212:	9301      	str	r3, [sp, #4]
 8007214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007216:	9300      	str	r3, [sp, #0]
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	68b9      	ldr	r1, [r7, #8]
 800721e:	68f8      	ldr	r0, [r7, #12]
 8007220:	f000 f850 	bl	80072c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007224:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007226:	f000 f8d3 	bl	80073d0 <prvAddNewTaskToReadyList>
 800722a:	e001      	b.n	8007230 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800722c:	2300      	movs	r3, #0
 800722e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007230:	697b      	ldr	r3, [r7, #20]
	}
 8007232:	4618      	mov	r0, r3
 8007234:	3728      	adds	r7, #40	; 0x28
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}

0800723a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800723a:	b580      	push	{r7, lr}
 800723c:	b08c      	sub	sp, #48	; 0x30
 800723e:	af04      	add	r7, sp, #16
 8007240:	60f8      	str	r0, [r7, #12]
 8007242:	60b9      	str	r1, [r7, #8]
 8007244:	603b      	str	r3, [r7, #0]
 8007246:	4613      	mov	r3, r2
 8007248:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800724a:	88fb      	ldrh	r3, [r7, #6]
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	4618      	mov	r0, r3
 8007250:	f001 fbce 	bl	80089f0 <pvPortMalloc>
 8007254:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d00e      	beq.n	800727a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800725c:	205c      	movs	r0, #92	; 0x5c
 800725e:	f001 fbc7 	bl	80089f0 <pvPortMalloc>
 8007262:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007264:	69fb      	ldr	r3, [r7, #28]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d003      	beq.n	8007272 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	697a      	ldr	r2, [r7, #20]
 800726e:	631a      	str	r2, [r3, #48]	; 0x30
 8007270:	e005      	b.n	800727e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007272:	6978      	ldr	r0, [r7, #20]
 8007274:	f001 fc7e 	bl	8008b74 <vPortFree>
 8007278:	e001      	b.n	800727e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800727a:	2300      	movs	r3, #0
 800727c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800727e:	69fb      	ldr	r3, [r7, #28]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d017      	beq.n	80072b4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007284:	69fb      	ldr	r3, [r7, #28]
 8007286:	2200      	movs	r2, #0
 8007288:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800728c:	88fa      	ldrh	r2, [r7, #6]
 800728e:	2300      	movs	r3, #0
 8007290:	9303      	str	r3, [sp, #12]
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	9302      	str	r3, [sp, #8]
 8007296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007298:	9301      	str	r3, [sp, #4]
 800729a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800729c:	9300      	str	r3, [sp, #0]
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	68b9      	ldr	r1, [r7, #8]
 80072a2:	68f8      	ldr	r0, [r7, #12]
 80072a4:	f000 f80e 	bl	80072c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80072a8:	69f8      	ldr	r0, [r7, #28]
 80072aa:	f000 f891 	bl	80073d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80072ae:	2301      	movs	r3, #1
 80072b0:	61bb      	str	r3, [r7, #24]
 80072b2:	e002      	b.n	80072ba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80072b4:	f04f 33ff 	mov.w	r3, #4294967295
 80072b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80072ba:	69bb      	ldr	r3, [r7, #24]
	}
 80072bc:	4618      	mov	r0, r3
 80072be:	3720      	adds	r7, #32
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b088      	sub	sp, #32
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	60b9      	str	r1, [r7, #8]
 80072ce:	607a      	str	r2, [r7, #4]
 80072d0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80072d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	461a      	mov	r2, r3
 80072dc:	21a5      	movs	r1, #165	; 0xa5
 80072de:	f001 fd92 	bl	8008e06 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80072e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80072ec:	3b01      	subs	r3, #1
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	4413      	add	r3, r2
 80072f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80072f4:	69bb      	ldr	r3, [r7, #24]
 80072f6:	f023 0307 	bic.w	r3, r3, #7
 80072fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80072fc:	69bb      	ldr	r3, [r7, #24]
 80072fe:	f003 0307 	and.w	r3, r3, #7
 8007302:	2b00      	cmp	r3, #0
 8007304:	d009      	beq.n	800731a <prvInitialiseNewTask+0x56>
 8007306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800730a:	f383 8811 	msr	BASEPRI, r3
 800730e:	f3bf 8f6f 	isb	sy
 8007312:	f3bf 8f4f 	dsb	sy
 8007316:	617b      	str	r3, [r7, #20]
 8007318:	e7fe      	b.n	8007318 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800731a:	2300      	movs	r3, #0
 800731c:	61fb      	str	r3, [r7, #28]
 800731e:	e012      	b.n	8007346 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007320:	68ba      	ldr	r2, [r7, #8]
 8007322:	69fb      	ldr	r3, [r7, #28]
 8007324:	4413      	add	r3, r2
 8007326:	7819      	ldrb	r1, [r3, #0]
 8007328:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800732a:	69fb      	ldr	r3, [r7, #28]
 800732c:	4413      	add	r3, r2
 800732e:	3334      	adds	r3, #52	; 0x34
 8007330:	460a      	mov	r2, r1
 8007332:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007334:	68ba      	ldr	r2, [r7, #8]
 8007336:	69fb      	ldr	r3, [r7, #28]
 8007338:	4413      	add	r3, r2
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d006      	beq.n	800734e <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007340:	69fb      	ldr	r3, [r7, #28]
 8007342:	3301      	adds	r3, #1
 8007344:	61fb      	str	r3, [r7, #28]
 8007346:	69fb      	ldr	r3, [r7, #28]
 8007348:	2b0f      	cmp	r3, #15
 800734a:	d9e9      	bls.n	8007320 <prvInitialiseNewTask+0x5c>
 800734c:	e000      	b.n	8007350 <prvInitialiseNewTask+0x8c>
		{
			break;
 800734e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007352:	2200      	movs	r2, #0
 8007354:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800735a:	2b37      	cmp	r3, #55	; 0x37
 800735c:	d901      	bls.n	8007362 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800735e:	2337      	movs	r3, #55	; 0x37
 8007360:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007364:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007366:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800736a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800736c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800736e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007370:	2200      	movs	r2, #0
 8007372:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007376:	3304      	adds	r3, #4
 8007378:	4618      	mov	r0, r3
 800737a:	f7ff f99d 	bl	80066b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800737e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007380:	3318      	adds	r3, #24
 8007382:	4618      	mov	r0, r3
 8007384:	f7ff f998 	bl	80066b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800738c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800738e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007390:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007396:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800739c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800739e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a0:	2200      	movs	r2, #0
 80073a2:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80073a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a6:	2200      	movs	r2, #0
 80073a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80073ac:	683a      	ldr	r2, [r7, #0]
 80073ae:	68f9      	ldr	r1, [r7, #12]
 80073b0:	69b8      	ldr	r0, [r7, #24]
 80073b2:	f001 f8db 	bl	800856c <pxPortInitialiseStack>
 80073b6:	4602      	mov	r2, r0
 80073b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ba:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80073bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d002      	beq.n	80073c8 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80073c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073c6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073c8:	bf00      	nop
 80073ca:	3720      	adds	r7, #32
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b082      	sub	sp, #8
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80073d8:	f001 f9f0 	bl	80087bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80073dc:	4b2d      	ldr	r3, [pc, #180]	; (8007494 <prvAddNewTaskToReadyList+0xc4>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	3301      	adds	r3, #1
 80073e2:	4a2c      	ldr	r2, [pc, #176]	; (8007494 <prvAddNewTaskToReadyList+0xc4>)
 80073e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80073e6:	4b2c      	ldr	r3, [pc, #176]	; (8007498 <prvAddNewTaskToReadyList+0xc8>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d109      	bne.n	8007402 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80073ee:	4a2a      	ldr	r2, [pc, #168]	; (8007498 <prvAddNewTaskToReadyList+0xc8>)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80073f4:	4b27      	ldr	r3, [pc, #156]	; (8007494 <prvAddNewTaskToReadyList+0xc4>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d110      	bne.n	800741e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80073fc:	f000 fc0e 	bl	8007c1c <prvInitialiseTaskLists>
 8007400:	e00d      	b.n	800741e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007402:	4b26      	ldr	r3, [pc, #152]	; (800749c <prvAddNewTaskToReadyList+0xcc>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d109      	bne.n	800741e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800740a:	4b23      	ldr	r3, [pc, #140]	; (8007498 <prvAddNewTaskToReadyList+0xc8>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007414:	429a      	cmp	r2, r3
 8007416:	d802      	bhi.n	800741e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007418:	4a1f      	ldr	r2, [pc, #124]	; (8007498 <prvAddNewTaskToReadyList+0xc8>)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800741e:	4b20      	ldr	r3, [pc, #128]	; (80074a0 <prvAddNewTaskToReadyList+0xd0>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	3301      	adds	r3, #1
 8007424:	4a1e      	ldr	r2, [pc, #120]	; (80074a0 <prvAddNewTaskToReadyList+0xd0>)
 8007426:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007428:	4b1d      	ldr	r3, [pc, #116]	; (80074a0 <prvAddNewTaskToReadyList+0xd0>)
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007434:	4b1b      	ldr	r3, [pc, #108]	; (80074a4 <prvAddNewTaskToReadyList+0xd4>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	429a      	cmp	r2, r3
 800743a:	d903      	bls.n	8007444 <prvAddNewTaskToReadyList+0x74>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007440:	4a18      	ldr	r2, [pc, #96]	; (80074a4 <prvAddNewTaskToReadyList+0xd4>)
 8007442:	6013      	str	r3, [r2, #0]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007448:	4613      	mov	r3, r2
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	4413      	add	r3, r2
 800744e:	009b      	lsls	r3, r3, #2
 8007450:	4a15      	ldr	r2, [pc, #84]	; (80074a8 <prvAddNewTaskToReadyList+0xd8>)
 8007452:	441a      	add	r2, r3
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	3304      	adds	r3, #4
 8007458:	4619      	mov	r1, r3
 800745a:	4610      	mov	r0, r2
 800745c:	f7ff f939 	bl	80066d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007460:	f001 f9da 	bl	8008818 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007464:	4b0d      	ldr	r3, [pc, #52]	; (800749c <prvAddNewTaskToReadyList+0xcc>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d00e      	beq.n	800748a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800746c:	4b0a      	ldr	r3, [pc, #40]	; (8007498 <prvAddNewTaskToReadyList+0xc8>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007476:	429a      	cmp	r2, r3
 8007478:	d207      	bcs.n	800748a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800747a:	4b0c      	ldr	r3, [pc, #48]	; (80074ac <prvAddNewTaskToReadyList+0xdc>)
 800747c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007480:	601a      	str	r2, [r3, #0]
 8007482:	f3bf 8f4f 	dsb	sy
 8007486:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800748a:	bf00      	nop
 800748c:	3708      	adds	r7, #8
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
 8007492:	bf00      	nop
 8007494:	20000d50 	.word	0x20000d50
 8007498:	2000087c 	.word	0x2000087c
 800749c:	20000d5c 	.word	0x20000d5c
 80074a0:	20000d6c 	.word	0x20000d6c
 80074a4:	20000d58 	.word	0x20000d58
 80074a8:	20000880 	.word	0x20000880
 80074ac:	e000ed04 	.word	0xe000ed04

080074b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b084      	sub	sp, #16
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80074b8:	2300      	movs	r3, #0
 80074ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d016      	beq.n	80074f0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80074c2:	4b13      	ldr	r3, [pc, #76]	; (8007510 <vTaskDelay+0x60>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d009      	beq.n	80074de <vTaskDelay+0x2e>
 80074ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ce:	f383 8811 	msr	BASEPRI, r3
 80074d2:	f3bf 8f6f 	isb	sy
 80074d6:	f3bf 8f4f 	dsb	sy
 80074da:	60bb      	str	r3, [r7, #8]
 80074dc:	e7fe      	b.n	80074dc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80074de:	f000 f87f 	bl	80075e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80074e2:	2100      	movs	r1, #0
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 fce3 	bl	8007eb0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80074ea:	f000 f887 	bl	80075fc <xTaskResumeAll>
 80074ee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d107      	bne.n	8007506 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80074f6:	4b07      	ldr	r3, [pc, #28]	; (8007514 <vTaskDelay+0x64>)
 80074f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074fc:	601a      	str	r2, [r3, #0]
 80074fe:	f3bf 8f4f 	dsb	sy
 8007502:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007506:	bf00      	nop
 8007508:	3710      	adds	r7, #16
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
 800750e:	bf00      	nop
 8007510:	20000d78 	.word	0x20000d78
 8007514:	e000ed04 	.word	0xe000ed04

08007518 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b08a      	sub	sp, #40	; 0x28
 800751c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800751e:	2300      	movs	r3, #0
 8007520:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007522:	2300      	movs	r3, #0
 8007524:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007526:	463a      	mov	r2, r7
 8007528:	1d39      	adds	r1, r7, #4
 800752a:	f107 0308 	add.w	r3, r7, #8
 800752e:	4618      	mov	r0, r3
 8007530:	f7ff f86e 	bl	8006610 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007534:	6839      	ldr	r1, [r7, #0]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	68ba      	ldr	r2, [r7, #8]
 800753a:	9202      	str	r2, [sp, #8]
 800753c:	9301      	str	r3, [sp, #4]
 800753e:	2300      	movs	r3, #0
 8007540:	9300      	str	r3, [sp, #0]
 8007542:	2300      	movs	r3, #0
 8007544:	460a      	mov	r2, r1
 8007546:	4920      	ldr	r1, [pc, #128]	; (80075c8 <vTaskStartScheduler+0xb0>)
 8007548:	4820      	ldr	r0, [pc, #128]	; (80075cc <vTaskStartScheduler+0xb4>)
 800754a:	f7ff fe1d 	bl	8007188 <xTaskCreateStatic>
 800754e:	4602      	mov	r2, r0
 8007550:	4b1f      	ldr	r3, [pc, #124]	; (80075d0 <vTaskStartScheduler+0xb8>)
 8007552:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007554:	4b1e      	ldr	r3, [pc, #120]	; (80075d0 <vTaskStartScheduler+0xb8>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d002      	beq.n	8007562 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800755c:	2301      	movs	r3, #1
 800755e:	617b      	str	r3, [r7, #20]
 8007560:	e001      	b.n	8007566 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007562:	2300      	movs	r3, #0
 8007564:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	2b01      	cmp	r3, #1
 800756a:	d102      	bne.n	8007572 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800756c:	f000 fcf4 	bl	8007f58 <xTimerCreateTimerTask>
 8007570:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	2b01      	cmp	r3, #1
 8007576:	d115      	bne.n	80075a4 <vTaskStartScheduler+0x8c>
 8007578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800757c:	f383 8811 	msr	BASEPRI, r3
 8007580:	f3bf 8f6f 	isb	sy
 8007584:	f3bf 8f4f 	dsb	sy
 8007588:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800758a:	4b12      	ldr	r3, [pc, #72]	; (80075d4 <vTaskStartScheduler+0xbc>)
 800758c:	f04f 32ff 	mov.w	r2, #4294967295
 8007590:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007592:	4b11      	ldr	r3, [pc, #68]	; (80075d8 <vTaskStartScheduler+0xc0>)
 8007594:	2201      	movs	r2, #1
 8007596:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007598:	4b10      	ldr	r3, [pc, #64]	; (80075dc <vTaskStartScheduler+0xc4>)
 800759a:	2200      	movs	r2, #0
 800759c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800759e:	f001 f86f 	bl	8008680 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80075a2:	e00d      	b.n	80075c0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075aa:	d109      	bne.n	80075c0 <vTaskStartScheduler+0xa8>
 80075ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b0:	f383 8811 	msr	BASEPRI, r3
 80075b4:	f3bf 8f6f 	isb	sy
 80075b8:	f3bf 8f4f 	dsb	sy
 80075bc:	60fb      	str	r3, [r7, #12]
 80075be:	e7fe      	b.n	80075be <vTaskStartScheduler+0xa6>
}
 80075c0:	bf00      	nop
 80075c2:	3718      	adds	r7, #24
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}
 80075c8:	080096f4 	.word	0x080096f4
 80075cc:	08007bed 	.word	0x08007bed
 80075d0:	20000d74 	.word	0x20000d74
 80075d4:	20000d70 	.word	0x20000d70
 80075d8:	20000d5c 	.word	0x20000d5c
 80075dc:	20000d54 	.word	0x20000d54

080075e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80075e0:	b480      	push	{r7}
 80075e2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80075e4:	4b04      	ldr	r3, [pc, #16]	; (80075f8 <vTaskSuspendAll+0x18>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	3301      	adds	r3, #1
 80075ea:	4a03      	ldr	r2, [pc, #12]	; (80075f8 <vTaskSuspendAll+0x18>)
 80075ec:	6013      	str	r3, [r2, #0]
}
 80075ee:	bf00      	nop
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr
 80075f8:	20000d78 	.word	0x20000d78

080075fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007602:	2300      	movs	r3, #0
 8007604:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007606:	2300      	movs	r3, #0
 8007608:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800760a:	4b41      	ldr	r3, [pc, #260]	; (8007710 <xTaskResumeAll+0x114>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d109      	bne.n	8007626 <xTaskResumeAll+0x2a>
 8007612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007616:	f383 8811 	msr	BASEPRI, r3
 800761a:	f3bf 8f6f 	isb	sy
 800761e:	f3bf 8f4f 	dsb	sy
 8007622:	603b      	str	r3, [r7, #0]
 8007624:	e7fe      	b.n	8007624 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007626:	f001 f8c9 	bl	80087bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800762a:	4b39      	ldr	r3, [pc, #228]	; (8007710 <xTaskResumeAll+0x114>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	3b01      	subs	r3, #1
 8007630:	4a37      	ldr	r2, [pc, #220]	; (8007710 <xTaskResumeAll+0x114>)
 8007632:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007634:	4b36      	ldr	r3, [pc, #216]	; (8007710 <xTaskResumeAll+0x114>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d162      	bne.n	8007702 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800763c:	4b35      	ldr	r3, [pc, #212]	; (8007714 <xTaskResumeAll+0x118>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d05e      	beq.n	8007702 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007644:	e02f      	b.n	80076a6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007646:	4b34      	ldr	r3, [pc, #208]	; (8007718 <xTaskResumeAll+0x11c>)
 8007648:	68db      	ldr	r3, [r3, #12]
 800764a:	68db      	ldr	r3, [r3, #12]
 800764c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	3318      	adds	r3, #24
 8007652:	4618      	mov	r0, r3
 8007654:	f7ff f89a 	bl	800678c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	3304      	adds	r3, #4
 800765c:	4618      	mov	r0, r3
 800765e:	f7ff f895 	bl	800678c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007666:	4b2d      	ldr	r3, [pc, #180]	; (800771c <xTaskResumeAll+0x120>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	429a      	cmp	r2, r3
 800766c:	d903      	bls.n	8007676 <xTaskResumeAll+0x7a>
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007672:	4a2a      	ldr	r2, [pc, #168]	; (800771c <xTaskResumeAll+0x120>)
 8007674:	6013      	str	r3, [r2, #0]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800767a:	4613      	mov	r3, r2
 800767c:	009b      	lsls	r3, r3, #2
 800767e:	4413      	add	r3, r2
 8007680:	009b      	lsls	r3, r3, #2
 8007682:	4a27      	ldr	r2, [pc, #156]	; (8007720 <xTaskResumeAll+0x124>)
 8007684:	441a      	add	r2, r3
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	3304      	adds	r3, #4
 800768a:	4619      	mov	r1, r3
 800768c:	4610      	mov	r0, r2
 800768e:	f7ff f820 	bl	80066d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007696:	4b23      	ldr	r3, [pc, #140]	; (8007724 <xTaskResumeAll+0x128>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800769c:	429a      	cmp	r2, r3
 800769e:	d302      	bcc.n	80076a6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80076a0:	4b21      	ldr	r3, [pc, #132]	; (8007728 <xTaskResumeAll+0x12c>)
 80076a2:	2201      	movs	r2, #1
 80076a4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80076a6:	4b1c      	ldr	r3, [pc, #112]	; (8007718 <xTaskResumeAll+0x11c>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d1cb      	bne.n	8007646 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d001      	beq.n	80076b8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80076b4:	f000 fb4c 	bl	8007d50 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80076b8:	4b1c      	ldr	r3, [pc, #112]	; (800772c <xTaskResumeAll+0x130>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d010      	beq.n	80076e6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80076c4:	f000 f846 	bl	8007754 <xTaskIncrementTick>
 80076c8:	4603      	mov	r3, r0
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d002      	beq.n	80076d4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80076ce:	4b16      	ldr	r3, [pc, #88]	; (8007728 <xTaskResumeAll+0x12c>)
 80076d0:	2201      	movs	r2, #1
 80076d2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	3b01      	subs	r3, #1
 80076d8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d1f1      	bne.n	80076c4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80076e0:	4b12      	ldr	r3, [pc, #72]	; (800772c <xTaskResumeAll+0x130>)
 80076e2:	2200      	movs	r2, #0
 80076e4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80076e6:	4b10      	ldr	r3, [pc, #64]	; (8007728 <xTaskResumeAll+0x12c>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d009      	beq.n	8007702 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80076ee:	2301      	movs	r3, #1
 80076f0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80076f2:	4b0f      	ldr	r3, [pc, #60]	; (8007730 <xTaskResumeAll+0x134>)
 80076f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076f8:	601a      	str	r2, [r3, #0]
 80076fa:	f3bf 8f4f 	dsb	sy
 80076fe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007702:	f001 f889 	bl	8008818 <vPortExitCritical>

	return xAlreadyYielded;
 8007706:	68bb      	ldr	r3, [r7, #8]
}
 8007708:	4618      	mov	r0, r3
 800770a:	3710      	adds	r7, #16
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}
 8007710:	20000d78 	.word	0x20000d78
 8007714:	20000d50 	.word	0x20000d50
 8007718:	20000d10 	.word	0x20000d10
 800771c:	20000d58 	.word	0x20000d58
 8007720:	20000880 	.word	0x20000880
 8007724:	2000087c 	.word	0x2000087c
 8007728:	20000d64 	.word	0x20000d64
 800772c:	20000d60 	.word	0x20000d60
 8007730:	e000ed04 	.word	0xe000ed04

08007734 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800773a:	4b05      	ldr	r3, [pc, #20]	; (8007750 <xTaskGetTickCount+0x1c>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007740:	687b      	ldr	r3, [r7, #4]
}
 8007742:	4618      	mov	r0, r3
 8007744:	370c      	adds	r7, #12
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr
 800774e:	bf00      	nop
 8007750:	20000d54 	.word	0x20000d54

08007754 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b086      	sub	sp, #24
 8007758:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800775a:	2300      	movs	r3, #0
 800775c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800775e:	4b51      	ldr	r3, [pc, #324]	; (80078a4 <xTaskIncrementTick+0x150>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	2b00      	cmp	r3, #0
 8007764:	f040 808d 	bne.w	8007882 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007768:	4b4f      	ldr	r3, [pc, #316]	; (80078a8 <xTaskIncrementTick+0x154>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	3301      	adds	r3, #1
 800776e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007770:	4a4d      	ldr	r2, [pc, #308]	; (80078a8 <xTaskIncrementTick+0x154>)
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d11f      	bne.n	80077bc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800777c:	4b4b      	ldr	r3, [pc, #300]	; (80078ac <xTaskIncrementTick+0x158>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d009      	beq.n	800779a <xTaskIncrementTick+0x46>
 8007786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800778a:	f383 8811 	msr	BASEPRI, r3
 800778e:	f3bf 8f6f 	isb	sy
 8007792:	f3bf 8f4f 	dsb	sy
 8007796:	603b      	str	r3, [r7, #0]
 8007798:	e7fe      	b.n	8007798 <xTaskIncrementTick+0x44>
 800779a:	4b44      	ldr	r3, [pc, #272]	; (80078ac <xTaskIncrementTick+0x158>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	60fb      	str	r3, [r7, #12]
 80077a0:	4b43      	ldr	r3, [pc, #268]	; (80078b0 <xTaskIncrementTick+0x15c>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a41      	ldr	r2, [pc, #260]	; (80078ac <xTaskIncrementTick+0x158>)
 80077a6:	6013      	str	r3, [r2, #0]
 80077a8:	4a41      	ldr	r2, [pc, #260]	; (80078b0 <xTaskIncrementTick+0x15c>)
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	6013      	str	r3, [r2, #0]
 80077ae:	4b41      	ldr	r3, [pc, #260]	; (80078b4 <xTaskIncrementTick+0x160>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	3301      	adds	r3, #1
 80077b4:	4a3f      	ldr	r2, [pc, #252]	; (80078b4 <xTaskIncrementTick+0x160>)
 80077b6:	6013      	str	r3, [r2, #0]
 80077b8:	f000 faca 	bl	8007d50 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80077bc:	4b3e      	ldr	r3, [pc, #248]	; (80078b8 <xTaskIncrementTick+0x164>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	693a      	ldr	r2, [r7, #16]
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d34e      	bcc.n	8007864 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80077c6:	4b39      	ldr	r3, [pc, #228]	; (80078ac <xTaskIncrementTick+0x158>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d101      	bne.n	80077d4 <xTaskIncrementTick+0x80>
 80077d0:	2301      	movs	r3, #1
 80077d2:	e000      	b.n	80077d6 <xTaskIncrementTick+0x82>
 80077d4:	2300      	movs	r3, #0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d004      	beq.n	80077e4 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077da:	4b37      	ldr	r3, [pc, #220]	; (80078b8 <xTaskIncrementTick+0x164>)
 80077dc:	f04f 32ff 	mov.w	r2, #4294967295
 80077e0:	601a      	str	r2, [r3, #0]
					break;
 80077e2:	e03f      	b.n	8007864 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80077e4:	4b31      	ldr	r3, [pc, #196]	; (80078ac <xTaskIncrementTick+0x158>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	68db      	ldr	r3, [r3, #12]
 80077ec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80077f4:	693a      	ldr	r2, [r7, #16]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d203      	bcs.n	8007804 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80077fc:	4a2e      	ldr	r2, [pc, #184]	; (80078b8 <xTaskIncrementTick+0x164>)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6013      	str	r3, [r2, #0]
						break;
 8007802:	e02f      	b.n	8007864 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	3304      	adds	r3, #4
 8007808:	4618      	mov	r0, r3
 800780a:	f7fe ffbf 	bl	800678c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007812:	2b00      	cmp	r3, #0
 8007814:	d004      	beq.n	8007820 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	3318      	adds	r3, #24
 800781a:	4618      	mov	r0, r3
 800781c:	f7fe ffb6 	bl	800678c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007824:	4b25      	ldr	r3, [pc, #148]	; (80078bc <xTaskIncrementTick+0x168>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	429a      	cmp	r2, r3
 800782a:	d903      	bls.n	8007834 <xTaskIncrementTick+0xe0>
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007830:	4a22      	ldr	r2, [pc, #136]	; (80078bc <xTaskIncrementTick+0x168>)
 8007832:	6013      	str	r3, [r2, #0]
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007838:	4613      	mov	r3, r2
 800783a:	009b      	lsls	r3, r3, #2
 800783c:	4413      	add	r3, r2
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	4a1f      	ldr	r2, [pc, #124]	; (80078c0 <xTaskIncrementTick+0x16c>)
 8007842:	441a      	add	r2, r3
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	3304      	adds	r3, #4
 8007848:	4619      	mov	r1, r3
 800784a:	4610      	mov	r0, r2
 800784c:	f7fe ff41 	bl	80066d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007854:	4b1b      	ldr	r3, [pc, #108]	; (80078c4 <xTaskIncrementTick+0x170>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800785a:	429a      	cmp	r2, r3
 800785c:	d3b3      	bcc.n	80077c6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800785e:	2301      	movs	r3, #1
 8007860:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007862:	e7b0      	b.n	80077c6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007864:	4b17      	ldr	r3, [pc, #92]	; (80078c4 <xTaskIncrementTick+0x170>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800786a:	4915      	ldr	r1, [pc, #84]	; (80078c0 <xTaskIncrementTick+0x16c>)
 800786c:	4613      	mov	r3, r2
 800786e:	009b      	lsls	r3, r3, #2
 8007870:	4413      	add	r3, r2
 8007872:	009b      	lsls	r3, r3, #2
 8007874:	440b      	add	r3, r1
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	2b01      	cmp	r3, #1
 800787a:	d907      	bls.n	800788c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800787c:	2301      	movs	r3, #1
 800787e:	617b      	str	r3, [r7, #20]
 8007880:	e004      	b.n	800788c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007882:	4b11      	ldr	r3, [pc, #68]	; (80078c8 <xTaskIncrementTick+0x174>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	3301      	adds	r3, #1
 8007888:	4a0f      	ldr	r2, [pc, #60]	; (80078c8 <xTaskIncrementTick+0x174>)
 800788a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800788c:	4b0f      	ldr	r3, [pc, #60]	; (80078cc <xTaskIncrementTick+0x178>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d001      	beq.n	8007898 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8007894:	2301      	movs	r3, #1
 8007896:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007898:	697b      	ldr	r3, [r7, #20]
}
 800789a:	4618      	mov	r0, r3
 800789c:	3718      	adds	r7, #24
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
 80078a2:	bf00      	nop
 80078a4:	20000d78 	.word	0x20000d78
 80078a8:	20000d54 	.word	0x20000d54
 80078ac:	20000d08 	.word	0x20000d08
 80078b0:	20000d0c 	.word	0x20000d0c
 80078b4:	20000d68 	.word	0x20000d68
 80078b8:	20000d70 	.word	0x20000d70
 80078bc:	20000d58 	.word	0x20000d58
 80078c0:	20000880 	.word	0x20000880
 80078c4:	2000087c 	.word	0x2000087c
 80078c8:	20000d60 	.word	0x20000d60
 80078cc:	20000d64 	.word	0x20000d64

080078d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80078d0:	b480      	push	{r7}
 80078d2:	b085      	sub	sp, #20
 80078d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80078d6:	4b27      	ldr	r3, [pc, #156]	; (8007974 <vTaskSwitchContext+0xa4>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d003      	beq.n	80078e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80078de:	4b26      	ldr	r3, [pc, #152]	; (8007978 <vTaskSwitchContext+0xa8>)
 80078e0:	2201      	movs	r2, #1
 80078e2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80078e4:	e040      	b.n	8007968 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80078e6:	4b24      	ldr	r3, [pc, #144]	; (8007978 <vTaskSwitchContext+0xa8>)
 80078e8:	2200      	movs	r2, #0
 80078ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80078ec:	4b23      	ldr	r3, [pc, #140]	; (800797c <vTaskSwitchContext+0xac>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	60fb      	str	r3, [r7, #12]
 80078f2:	e00f      	b.n	8007914 <vTaskSwitchContext+0x44>
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d109      	bne.n	800790e <vTaskSwitchContext+0x3e>
 80078fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078fe:	f383 8811 	msr	BASEPRI, r3
 8007902:	f3bf 8f6f 	isb	sy
 8007906:	f3bf 8f4f 	dsb	sy
 800790a:	607b      	str	r3, [r7, #4]
 800790c:	e7fe      	b.n	800790c <vTaskSwitchContext+0x3c>
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	3b01      	subs	r3, #1
 8007912:	60fb      	str	r3, [r7, #12]
 8007914:	491a      	ldr	r1, [pc, #104]	; (8007980 <vTaskSwitchContext+0xb0>)
 8007916:	68fa      	ldr	r2, [r7, #12]
 8007918:	4613      	mov	r3, r2
 800791a:	009b      	lsls	r3, r3, #2
 800791c:	4413      	add	r3, r2
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	440b      	add	r3, r1
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d0e5      	beq.n	80078f4 <vTaskSwitchContext+0x24>
 8007928:	68fa      	ldr	r2, [r7, #12]
 800792a:	4613      	mov	r3, r2
 800792c:	009b      	lsls	r3, r3, #2
 800792e:	4413      	add	r3, r2
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	4a13      	ldr	r2, [pc, #76]	; (8007980 <vTaskSwitchContext+0xb0>)
 8007934:	4413      	add	r3, r2
 8007936:	60bb      	str	r3, [r7, #8]
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	685a      	ldr	r2, [r3, #4]
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	605a      	str	r2, [r3, #4]
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	685a      	ldr	r2, [r3, #4]
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	3308      	adds	r3, #8
 800794a:	429a      	cmp	r2, r3
 800794c:	d104      	bne.n	8007958 <vTaskSwitchContext+0x88>
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	685a      	ldr	r2, [r3, #4]
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	605a      	str	r2, [r3, #4]
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	4a09      	ldr	r2, [pc, #36]	; (8007984 <vTaskSwitchContext+0xb4>)
 8007960:	6013      	str	r3, [r2, #0]
 8007962:	4a06      	ldr	r2, [pc, #24]	; (800797c <vTaskSwitchContext+0xac>)
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	6013      	str	r3, [r2, #0]
}
 8007968:	bf00      	nop
 800796a:	3714      	adds	r7, #20
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr
 8007974:	20000d78 	.word	0x20000d78
 8007978:	20000d64 	.word	0x20000d64
 800797c:	20000d58 	.word	0x20000d58
 8007980:	20000880 	.word	0x20000880
 8007984:	2000087c 	.word	0x2000087c

08007988 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d109      	bne.n	80079ac <vTaskPlaceOnEventList+0x24>
 8007998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800799c:	f383 8811 	msr	BASEPRI, r3
 80079a0:	f3bf 8f6f 	isb	sy
 80079a4:	f3bf 8f4f 	dsb	sy
 80079a8:	60fb      	str	r3, [r7, #12]
 80079aa:	e7fe      	b.n	80079aa <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80079ac:	4b07      	ldr	r3, [pc, #28]	; (80079cc <vTaskPlaceOnEventList+0x44>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	3318      	adds	r3, #24
 80079b2:	4619      	mov	r1, r3
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f7fe feb0 	bl	800671a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80079ba:	2101      	movs	r1, #1
 80079bc:	6838      	ldr	r0, [r7, #0]
 80079be:	f000 fa77 	bl	8007eb0 <prvAddCurrentTaskToDelayedList>
}
 80079c2:	bf00      	nop
 80079c4:	3710      	adds	r7, #16
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	2000087c 	.word	0x2000087c

080079d0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b086      	sub	sp, #24
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	60f8      	str	r0, [r7, #12]
 80079d8:	60b9      	str	r1, [r7, #8]
 80079da:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d109      	bne.n	80079f6 <vTaskPlaceOnEventListRestricted+0x26>
 80079e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e6:	f383 8811 	msr	BASEPRI, r3
 80079ea:	f3bf 8f6f 	isb	sy
 80079ee:	f3bf 8f4f 	dsb	sy
 80079f2:	617b      	str	r3, [r7, #20]
 80079f4:	e7fe      	b.n	80079f4 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80079f6:	4b0a      	ldr	r3, [pc, #40]	; (8007a20 <vTaskPlaceOnEventListRestricted+0x50>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	3318      	adds	r3, #24
 80079fc:	4619      	mov	r1, r3
 80079fe:	68f8      	ldr	r0, [r7, #12]
 8007a00:	f7fe fe67 	bl	80066d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d002      	beq.n	8007a10 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8007a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a0e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007a10:	6879      	ldr	r1, [r7, #4]
 8007a12:	68b8      	ldr	r0, [r7, #8]
 8007a14:	f000 fa4c 	bl	8007eb0 <prvAddCurrentTaskToDelayedList>
	}
 8007a18:	bf00      	nop
 8007a1a:	3718      	adds	r7, #24
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}
 8007a20:	2000087c 	.word	0x2000087c

08007a24 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b086      	sub	sp, #24
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	68db      	ldr	r3, [r3, #12]
 8007a32:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d109      	bne.n	8007a4e <xTaskRemoveFromEventList+0x2a>
 8007a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a3e:	f383 8811 	msr	BASEPRI, r3
 8007a42:	f3bf 8f6f 	isb	sy
 8007a46:	f3bf 8f4f 	dsb	sy
 8007a4a:	60fb      	str	r3, [r7, #12]
 8007a4c:	e7fe      	b.n	8007a4c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	3318      	adds	r3, #24
 8007a52:	4618      	mov	r0, r3
 8007a54:	f7fe fe9a 	bl	800678c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a58:	4b1d      	ldr	r3, [pc, #116]	; (8007ad0 <xTaskRemoveFromEventList+0xac>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d11d      	bne.n	8007a9c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	3304      	adds	r3, #4
 8007a64:	4618      	mov	r0, r3
 8007a66:	f7fe fe91 	bl	800678c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a6e:	4b19      	ldr	r3, [pc, #100]	; (8007ad4 <xTaskRemoveFromEventList+0xb0>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d903      	bls.n	8007a7e <xTaskRemoveFromEventList+0x5a>
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a7a:	4a16      	ldr	r2, [pc, #88]	; (8007ad4 <xTaskRemoveFromEventList+0xb0>)
 8007a7c:	6013      	str	r3, [r2, #0]
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a82:	4613      	mov	r3, r2
 8007a84:	009b      	lsls	r3, r3, #2
 8007a86:	4413      	add	r3, r2
 8007a88:	009b      	lsls	r3, r3, #2
 8007a8a:	4a13      	ldr	r2, [pc, #76]	; (8007ad8 <xTaskRemoveFromEventList+0xb4>)
 8007a8c:	441a      	add	r2, r3
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	3304      	adds	r3, #4
 8007a92:	4619      	mov	r1, r3
 8007a94:	4610      	mov	r0, r2
 8007a96:	f7fe fe1c 	bl	80066d2 <vListInsertEnd>
 8007a9a:	e005      	b.n	8007aa8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	3318      	adds	r3, #24
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	480e      	ldr	r0, [pc, #56]	; (8007adc <xTaskRemoveFromEventList+0xb8>)
 8007aa4:	f7fe fe15 	bl	80066d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aac:	4b0c      	ldr	r3, [pc, #48]	; (8007ae0 <xTaskRemoveFromEventList+0xbc>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	d905      	bls.n	8007ac2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007aba:	4b0a      	ldr	r3, [pc, #40]	; (8007ae4 <xTaskRemoveFromEventList+0xc0>)
 8007abc:	2201      	movs	r2, #1
 8007abe:	601a      	str	r2, [r3, #0]
 8007ac0:	e001      	b.n	8007ac6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007ac6:	697b      	ldr	r3, [r7, #20]
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3718      	adds	r7, #24
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}
 8007ad0:	20000d78 	.word	0x20000d78
 8007ad4:	20000d58 	.word	0x20000d58
 8007ad8:	20000880 	.word	0x20000880
 8007adc:	20000d10 	.word	0x20000d10
 8007ae0:	2000087c 	.word	0x2000087c
 8007ae4:	20000d64 	.word	0x20000d64

08007ae8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b083      	sub	sp, #12
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007af0:	4b06      	ldr	r3, [pc, #24]	; (8007b0c <vTaskInternalSetTimeOutState+0x24>)
 8007af2:	681a      	ldr	r2, [r3, #0]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007af8:	4b05      	ldr	r3, [pc, #20]	; (8007b10 <vTaskInternalSetTimeOutState+0x28>)
 8007afa:	681a      	ldr	r2, [r3, #0]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	605a      	str	r2, [r3, #4]
}
 8007b00:	bf00      	nop
 8007b02:	370c      	adds	r7, #12
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr
 8007b0c:	20000d68 	.word	0x20000d68
 8007b10:	20000d54 	.word	0x20000d54

08007b14 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b088      	sub	sp, #32
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d109      	bne.n	8007b38 <xTaskCheckForTimeOut+0x24>
 8007b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b28:	f383 8811 	msr	BASEPRI, r3
 8007b2c:	f3bf 8f6f 	isb	sy
 8007b30:	f3bf 8f4f 	dsb	sy
 8007b34:	613b      	str	r3, [r7, #16]
 8007b36:	e7fe      	b.n	8007b36 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d109      	bne.n	8007b52 <xTaskCheckForTimeOut+0x3e>
 8007b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b42:	f383 8811 	msr	BASEPRI, r3
 8007b46:	f3bf 8f6f 	isb	sy
 8007b4a:	f3bf 8f4f 	dsb	sy
 8007b4e:	60fb      	str	r3, [r7, #12]
 8007b50:	e7fe      	b.n	8007b50 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8007b52:	f000 fe33 	bl	80087bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007b56:	4b1d      	ldr	r3, [pc, #116]	; (8007bcc <xTaskCheckForTimeOut+0xb8>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	69ba      	ldr	r2, [r7, #24]
 8007b62:	1ad3      	subs	r3, r2, r3
 8007b64:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b6e:	d102      	bne.n	8007b76 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007b70:	2300      	movs	r3, #0
 8007b72:	61fb      	str	r3, [r7, #28]
 8007b74:	e023      	b.n	8007bbe <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	4b15      	ldr	r3, [pc, #84]	; (8007bd0 <xTaskCheckForTimeOut+0xbc>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d007      	beq.n	8007b92 <xTaskCheckForTimeOut+0x7e>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	69ba      	ldr	r2, [r7, #24]
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d302      	bcc.n	8007b92 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	61fb      	str	r3, [r7, #28]
 8007b90:	e015      	b.n	8007bbe <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	697a      	ldr	r2, [r7, #20]
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d20b      	bcs.n	8007bb4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	681a      	ldr	r2, [r3, #0]
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	1ad2      	subs	r2, r2, r3
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f7ff ff9d 	bl	8007ae8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	61fb      	str	r3, [r7, #28]
 8007bb2:	e004      	b.n	8007bbe <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007bbe:	f000 fe2b 	bl	8008818 <vPortExitCritical>

	return xReturn;
 8007bc2:	69fb      	ldr	r3, [r7, #28]
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3720      	adds	r7, #32
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}
 8007bcc:	20000d54 	.word	0x20000d54
 8007bd0:	20000d68 	.word	0x20000d68

08007bd4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007bd8:	4b03      	ldr	r3, [pc, #12]	; (8007be8 <vTaskMissedYield+0x14>)
 8007bda:	2201      	movs	r2, #1
 8007bdc:	601a      	str	r2, [r3, #0]
}
 8007bde:	bf00      	nop
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr
 8007be8:	20000d64 	.word	0x20000d64

08007bec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b082      	sub	sp, #8
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007bf4:	f000 f852 	bl	8007c9c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007bf8:	4b06      	ldr	r3, [pc, #24]	; (8007c14 <prvIdleTask+0x28>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	d9f9      	bls.n	8007bf4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007c00:	4b05      	ldr	r3, [pc, #20]	; (8007c18 <prvIdleTask+0x2c>)
 8007c02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c06:	601a      	str	r2, [r3, #0]
 8007c08:	f3bf 8f4f 	dsb	sy
 8007c0c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007c10:	e7f0      	b.n	8007bf4 <prvIdleTask+0x8>
 8007c12:	bf00      	nop
 8007c14:	20000880 	.word	0x20000880
 8007c18:	e000ed04 	.word	0xe000ed04

08007c1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b082      	sub	sp, #8
 8007c20:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c22:	2300      	movs	r3, #0
 8007c24:	607b      	str	r3, [r7, #4]
 8007c26:	e00c      	b.n	8007c42 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007c28:	687a      	ldr	r2, [r7, #4]
 8007c2a:	4613      	mov	r3, r2
 8007c2c:	009b      	lsls	r3, r3, #2
 8007c2e:	4413      	add	r3, r2
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	4a12      	ldr	r2, [pc, #72]	; (8007c7c <prvInitialiseTaskLists+0x60>)
 8007c34:	4413      	add	r3, r2
 8007c36:	4618      	mov	r0, r3
 8007c38:	f7fe fd1e 	bl	8006678 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	3301      	adds	r3, #1
 8007c40:	607b      	str	r3, [r7, #4]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2b37      	cmp	r3, #55	; 0x37
 8007c46:	d9ef      	bls.n	8007c28 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007c48:	480d      	ldr	r0, [pc, #52]	; (8007c80 <prvInitialiseTaskLists+0x64>)
 8007c4a:	f7fe fd15 	bl	8006678 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007c4e:	480d      	ldr	r0, [pc, #52]	; (8007c84 <prvInitialiseTaskLists+0x68>)
 8007c50:	f7fe fd12 	bl	8006678 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007c54:	480c      	ldr	r0, [pc, #48]	; (8007c88 <prvInitialiseTaskLists+0x6c>)
 8007c56:	f7fe fd0f 	bl	8006678 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007c5a:	480c      	ldr	r0, [pc, #48]	; (8007c8c <prvInitialiseTaskLists+0x70>)
 8007c5c:	f7fe fd0c 	bl	8006678 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007c60:	480b      	ldr	r0, [pc, #44]	; (8007c90 <prvInitialiseTaskLists+0x74>)
 8007c62:	f7fe fd09 	bl	8006678 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007c66:	4b0b      	ldr	r3, [pc, #44]	; (8007c94 <prvInitialiseTaskLists+0x78>)
 8007c68:	4a05      	ldr	r2, [pc, #20]	; (8007c80 <prvInitialiseTaskLists+0x64>)
 8007c6a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007c6c:	4b0a      	ldr	r3, [pc, #40]	; (8007c98 <prvInitialiseTaskLists+0x7c>)
 8007c6e:	4a05      	ldr	r2, [pc, #20]	; (8007c84 <prvInitialiseTaskLists+0x68>)
 8007c70:	601a      	str	r2, [r3, #0]
}
 8007c72:	bf00      	nop
 8007c74:	3708      	adds	r7, #8
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
 8007c7a:	bf00      	nop
 8007c7c:	20000880 	.word	0x20000880
 8007c80:	20000ce0 	.word	0x20000ce0
 8007c84:	20000cf4 	.word	0x20000cf4
 8007c88:	20000d10 	.word	0x20000d10
 8007c8c:	20000d24 	.word	0x20000d24
 8007c90:	20000d3c 	.word	0x20000d3c
 8007c94:	20000d08 	.word	0x20000d08
 8007c98:	20000d0c 	.word	0x20000d0c

08007c9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b082      	sub	sp, #8
 8007ca0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ca2:	e019      	b.n	8007cd8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007ca4:	f000 fd8a 	bl	80087bc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007ca8:	4b0f      	ldr	r3, [pc, #60]	; (8007ce8 <prvCheckTasksWaitingTermination+0x4c>)
 8007caa:	68db      	ldr	r3, [r3, #12]
 8007cac:	68db      	ldr	r3, [r3, #12]
 8007cae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	3304      	adds	r3, #4
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f7fe fd69 	bl	800678c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007cba:	4b0c      	ldr	r3, [pc, #48]	; (8007cec <prvCheckTasksWaitingTermination+0x50>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	3b01      	subs	r3, #1
 8007cc0:	4a0a      	ldr	r2, [pc, #40]	; (8007cec <prvCheckTasksWaitingTermination+0x50>)
 8007cc2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007cc4:	4b0a      	ldr	r3, [pc, #40]	; (8007cf0 <prvCheckTasksWaitingTermination+0x54>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	3b01      	subs	r3, #1
 8007cca:	4a09      	ldr	r2, [pc, #36]	; (8007cf0 <prvCheckTasksWaitingTermination+0x54>)
 8007ccc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007cce:	f000 fda3 	bl	8008818 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 f80e 	bl	8007cf4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007cd8:	4b05      	ldr	r3, [pc, #20]	; (8007cf0 <prvCheckTasksWaitingTermination+0x54>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d1e1      	bne.n	8007ca4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007ce0:	bf00      	nop
 8007ce2:	3708      	adds	r7, #8
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}
 8007ce8:	20000d24 	.word	0x20000d24
 8007cec:	20000d50 	.word	0x20000d50
 8007cf0:	20000d38 	.word	0x20000d38

08007cf4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d108      	bne.n	8007d18 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f000 ff32 	bl	8008b74 <vPortFree>
				vPortFree( pxTCB );
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 ff2f 	bl	8008b74 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007d16:	e017      	b.n	8007d48 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d103      	bne.n	8007d2a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 ff26 	bl	8008b74 <vPortFree>
	}
 8007d28:	e00e      	b.n	8007d48 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007d30:	2b02      	cmp	r3, #2
 8007d32:	d009      	beq.n	8007d48 <prvDeleteTCB+0x54>
 8007d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d38:	f383 8811 	msr	BASEPRI, r3
 8007d3c:	f3bf 8f6f 	isb	sy
 8007d40:	f3bf 8f4f 	dsb	sy
 8007d44:	60fb      	str	r3, [r7, #12]
 8007d46:	e7fe      	b.n	8007d46 <prvDeleteTCB+0x52>
	}
 8007d48:	bf00      	nop
 8007d4a:	3710      	adds	r7, #16
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007d50:	b480      	push	{r7}
 8007d52:	b083      	sub	sp, #12
 8007d54:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d56:	4b0f      	ldr	r3, [pc, #60]	; (8007d94 <prvResetNextTaskUnblockTime+0x44>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d101      	bne.n	8007d64 <prvResetNextTaskUnblockTime+0x14>
 8007d60:	2301      	movs	r3, #1
 8007d62:	e000      	b.n	8007d66 <prvResetNextTaskUnblockTime+0x16>
 8007d64:	2300      	movs	r3, #0
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d004      	beq.n	8007d74 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007d6a:	4b0b      	ldr	r3, [pc, #44]	; (8007d98 <prvResetNextTaskUnblockTime+0x48>)
 8007d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8007d70:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007d72:	e008      	b.n	8007d86 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007d74:	4b07      	ldr	r3, [pc, #28]	; (8007d94 <prvResetNextTaskUnblockTime+0x44>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	68db      	ldr	r3, [r3, #12]
 8007d7a:	68db      	ldr	r3, [r3, #12]
 8007d7c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	4a05      	ldr	r2, [pc, #20]	; (8007d98 <prvResetNextTaskUnblockTime+0x48>)
 8007d84:	6013      	str	r3, [r2, #0]
}
 8007d86:	bf00      	nop
 8007d88:	370c      	adds	r7, #12
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr
 8007d92:	bf00      	nop
 8007d94:	20000d08 	.word	0x20000d08
 8007d98:	20000d70 	.word	0x20000d70

08007d9c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b083      	sub	sp, #12
 8007da0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007da2:	4b0b      	ldr	r3, [pc, #44]	; (8007dd0 <xTaskGetSchedulerState+0x34>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d102      	bne.n	8007db0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007daa:	2301      	movs	r3, #1
 8007dac:	607b      	str	r3, [r7, #4]
 8007dae:	e008      	b.n	8007dc2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007db0:	4b08      	ldr	r3, [pc, #32]	; (8007dd4 <xTaskGetSchedulerState+0x38>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d102      	bne.n	8007dbe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007db8:	2302      	movs	r3, #2
 8007dba:	607b      	str	r3, [r7, #4]
 8007dbc:	e001      	b.n	8007dc2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007dc2:	687b      	ldr	r3, [r7, #4]
	}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	370c      	adds	r7, #12
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr
 8007dd0:	20000d5c 	.word	0x20000d5c
 8007dd4:	20000d78 	.word	0x20000d78

08007dd8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b086      	sub	sp, #24
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007de4:	2300      	movs	r3, #0
 8007de6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d054      	beq.n	8007e98 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007dee:	4b2d      	ldr	r3, [pc, #180]	; (8007ea4 <xTaskPriorityDisinherit+0xcc>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	693a      	ldr	r2, [r7, #16]
 8007df4:	429a      	cmp	r2, r3
 8007df6:	d009      	beq.n	8007e0c <xTaskPriorityDisinherit+0x34>
 8007df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dfc:	f383 8811 	msr	BASEPRI, r3
 8007e00:	f3bf 8f6f 	isb	sy
 8007e04:	f3bf 8f4f 	dsb	sy
 8007e08:	60fb      	str	r3, [r7, #12]
 8007e0a:	e7fe      	b.n	8007e0a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d109      	bne.n	8007e28 <xTaskPriorityDisinherit+0x50>
 8007e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e18:	f383 8811 	msr	BASEPRI, r3
 8007e1c:	f3bf 8f6f 	isb	sy
 8007e20:	f3bf 8f4f 	dsb	sy
 8007e24:	60bb      	str	r3, [r7, #8]
 8007e26:	e7fe      	b.n	8007e26 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e2c:	1e5a      	subs	r2, r3, #1
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e3a:	429a      	cmp	r2, r3
 8007e3c:	d02c      	beq.n	8007e98 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d128      	bne.n	8007e98 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	3304      	adds	r3, #4
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f7fe fc9e 	bl	800678c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e5c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e68:	4b0f      	ldr	r3, [pc, #60]	; (8007ea8 <xTaskPriorityDisinherit+0xd0>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d903      	bls.n	8007e78 <xTaskPriorityDisinherit+0xa0>
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e74:	4a0c      	ldr	r2, [pc, #48]	; (8007ea8 <xTaskPriorityDisinherit+0xd0>)
 8007e76:	6013      	str	r3, [r2, #0]
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e7c:	4613      	mov	r3, r2
 8007e7e:	009b      	lsls	r3, r3, #2
 8007e80:	4413      	add	r3, r2
 8007e82:	009b      	lsls	r3, r3, #2
 8007e84:	4a09      	ldr	r2, [pc, #36]	; (8007eac <xTaskPriorityDisinherit+0xd4>)
 8007e86:	441a      	add	r2, r3
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	3304      	adds	r3, #4
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	4610      	mov	r0, r2
 8007e90:	f7fe fc1f 	bl	80066d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007e94:	2301      	movs	r3, #1
 8007e96:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007e98:	697b      	ldr	r3, [r7, #20]
	}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3718      	adds	r7, #24
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}
 8007ea2:	bf00      	nop
 8007ea4:	2000087c 	.word	0x2000087c
 8007ea8:	20000d58 	.word	0x20000d58
 8007eac:	20000880 	.word	0x20000880

08007eb0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b084      	sub	sp, #16
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007eba:	4b21      	ldr	r3, [pc, #132]	; (8007f40 <prvAddCurrentTaskToDelayedList+0x90>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ec0:	4b20      	ldr	r3, [pc, #128]	; (8007f44 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	3304      	adds	r3, #4
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f7fe fc60 	bl	800678c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ed2:	d10a      	bne.n	8007eea <prvAddCurrentTaskToDelayedList+0x3a>
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d007      	beq.n	8007eea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007eda:	4b1a      	ldr	r3, [pc, #104]	; (8007f44 <prvAddCurrentTaskToDelayedList+0x94>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	3304      	adds	r3, #4
 8007ee0:	4619      	mov	r1, r3
 8007ee2:	4819      	ldr	r0, [pc, #100]	; (8007f48 <prvAddCurrentTaskToDelayedList+0x98>)
 8007ee4:	f7fe fbf5 	bl	80066d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007ee8:	e026      	b.n	8007f38 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007eea:	68fa      	ldr	r2, [r7, #12]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	4413      	add	r3, r2
 8007ef0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007ef2:	4b14      	ldr	r3, [pc, #80]	; (8007f44 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	68ba      	ldr	r2, [r7, #8]
 8007ef8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007efa:	68ba      	ldr	r2, [r7, #8]
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	429a      	cmp	r2, r3
 8007f00:	d209      	bcs.n	8007f16 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f02:	4b12      	ldr	r3, [pc, #72]	; (8007f4c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	4b0f      	ldr	r3, [pc, #60]	; (8007f44 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	3304      	adds	r3, #4
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	4610      	mov	r0, r2
 8007f10:	f7fe fc03 	bl	800671a <vListInsert>
}
 8007f14:	e010      	b.n	8007f38 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f16:	4b0e      	ldr	r3, [pc, #56]	; (8007f50 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007f18:	681a      	ldr	r2, [r3, #0]
 8007f1a:	4b0a      	ldr	r3, [pc, #40]	; (8007f44 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	3304      	adds	r3, #4
 8007f20:	4619      	mov	r1, r3
 8007f22:	4610      	mov	r0, r2
 8007f24:	f7fe fbf9 	bl	800671a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007f28:	4b0a      	ldr	r3, [pc, #40]	; (8007f54 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	68ba      	ldr	r2, [r7, #8]
 8007f2e:	429a      	cmp	r2, r3
 8007f30:	d202      	bcs.n	8007f38 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007f32:	4a08      	ldr	r2, [pc, #32]	; (8007f54 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	6013      	str	r3, [r2, #0]
}
 8007f38:	bf00      	nop
 8007f3a:	3710      	adds	r7, #16
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}
 8007f40:	20000d54 	.word	0x20000d54
 8007f44:	2000087c 	.word	0x2000087c
 8007f48:	20000d3c 	.word	0x20000d3c
 8007f4c:	20000d0c 	.word	0x20000d0c
 8007f50:	20000d08 	.word	0x20000d08
 8007f54:	20000d70 	.word	0x20000d70

08007f58 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b08a      	sub	sp, #40	; 0x28
 8007f5c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007f62:	f000 fac3 	bl	80084ec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007f66:	4b1c      	ldr	r3, [pc, #112]	; (8007fd8 <xTimerCreateTimerTask+0x80>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d021      	beq.n	8007fb2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007f72:	2300      	movs	r3, #0
 8007f74:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007f76:	1d3a      	adds	r2, r7, #4
 8007f78:	f107 0108 	add.w	r1, r7, #8
 8007f7c:	f107 030c 	add.w	r3, r7, #12
 8007f80:	4618      	mov	r0, r3
 8007f82:	f7fe fb5f 	bl	8006644 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007f86:	6879      	ldr	r1, [r7, #4]
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	68fa      	ldr	r2, [r7, #12]
 8007f8c:	9202      	str	r2, [sp, #8]
 8007f8e:	9301      	str	r3, [sp, #4]
 8007f90:	2302      	movs	r3, #2
 8007f92:	9300      	str	r3, [sp, #0]
 8007f94:	2300      	movs	r3, #0
 8007f96:	460a      	mov	r2, r1
 8007f98:	4910      	ldr	r1, [pc, #64]	; (8007fdc <xTimerCreateTimerTask+0x84>)
 8007f9a:	4811      	ldr	r0, [pc, #68]	; (8007fe0 <xTimerCreateTimerTask+0x88>)
 8007f9c:	f7ff f8f4 	bl	8007188 <xTaskCreateStatic>
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	4b10      	ldr	r3, [pc, #64]	; (8007fe4 <xTimerCreateTimerTask+0x8c>)
 8007fa4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007fa6:	4b0f      	ldr	r3, [pc, #60]	; (8007fe4 <xTimerCreateTimerTask+0x8c>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d001      	beq.n	8007fb2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d109      	bne.n	8007fcc <xTimerCreateTimerTask+0x74>
 8007fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fbc:	f383 8811 	msr	BASEPRI, r3
 8007fc0:	f3bf 8f6f 	isb	sy
 8007fc4:	f3bf 8f4f 	dsb	sy
 8007fc8:	613b      	str	r3, [r7, #16]
 8007fca:	e7fe      	b.n	8007fca <xTimerCreateTimerTask+0x72>
	return xReturn;
 8007fcc:	697b      	ldr	r3, [r7, #20]
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3718      	adds	r7, #24
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}
 8007fd6:	bf00      	nop
 8007fd8:	20000dac 	.word	0x20000dac
 8007fdc:	080096fc 	.word	0x080096fc
 8007fe0:	08008101 	.word	0x08008101
 8007fe4:	20000db0 	.word	0x20000db0

08007fe8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b08a      	sub	sp, #40	; 0x28
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	60b9      	str	r1, [r7, #8]
 8007ff2:	607a      	str	r2, [r7, #4]
 8007ff4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d109      	bne.n	8008014 <xTimerGenericCommand+0x2c>
 8008000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008004:	f383 8811 	msr	BASEPRI, r3
 8008008:	f3bf 8f6f 	isb	sy
 800800c:	f3bf 8f4f 	dsb	sy
 8008010:	623b      	str	r3, [r7, #32]
 8008012:	e7fe      	b.n	8008012 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008014:	4b19      	ldr	r3, [pc, #100]	; (800807c <xTimerGenericCommand+0x94>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d02a      	beq.n	8008072 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	2b05      	cmp	r3, #5
 800802c:	dc18      	bgt.n	8008060 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800802e:	f7ff feb5 	bl	8007d9c <xTaskGetSchedulerState>
 8008032:	4603      	mov	r3, r0
 8008034:	2b02      	cmp	r3, #2
 8008036:	d109      	bne.n	800804c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008038:	4b10      	ldr	r3, [pc, #64]	; (800807c <xTimerGenericCommand+0x94>)
 800803a:	6818      	ldr	r0, [r3, #0]
 800803c:	f107 0110 	add.w	r1, r7, #16
 8008040:	2300      	movs	r3, #0
 8008042:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008044:	f7fe fcca 	bl	80069dc <xQueueGenericSend>
 8008048:	6278      	str	r0, [r7, #36]	; 0x24
 800804a:	e012      	b.n	8008072 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800804c:	4b0b      	ldr	r3, [pc, #44]	; (800807c <xTimerGenericCommand+0x94>)
 800804e:	6818      	ldr	r0, [r3, #0]
 8008050:	f107 0110 	add.w	r1, r7, #16
 8008054:	2300      	movs	r3, #0
 8008056:	2200      	movs	r2, #0
 8008058:	f7fe fcc0 	bl	80069dc <xQueueGenericSend>
 800805c:	6278      	str	r0, [r7, #36]	; 0x24
 800805e:	e008      	b.n	8008072 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008060:	4b06      	ldr	r3, [pc, #24]	; (800807c <xTimerGenericCommand+0x94>)
 8008062:	6818      	ldr	r0, [r3, #0]
 8008064:	f107 0110 	add.w	r1, r7, #16
 8008068:	2300      	movs	r3, #0
 800806a:	683a      	ldr	r2, [r7, #0]
 800806c:	f7fe fdb0 	bl	8006bd0 <xQueueGenericSendFromISR>
 8008070:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008074:	4618      	mov	r0, r3
 8008076:	3728      	adds	r7, #40	; 0x28
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}
 800807c:	20000dac 	.word	0x20000dac

08008080 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b088      	sub	sp, #32
 8008084:	af02      	add	r7, sp, #8
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800808a:	4b1c      	ldr	r3, [pc, #112]	; (80080fc <prvProcessExpiredTimer+0x7c>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	68db      	ldr	r3, [r3, #12]
 8008090:	68db      	ldr	r3, [r3, #12]
 8008092:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	3304      	adds	r3, #4
 8008098:	4618      	mov	r0, r3
 800809a:	f7fe fb77 	bl	800678c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	69db      	ldr	r3, [r3, #28]
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	d121      	bne.n	80080ea <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	699a      	ldr	r2, [r3, #24]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	18d1      	adds	r1, r2, r3
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	683a      	ldr	r2, [r7, #0]
 80080b2:	6978      	ldr	r0, [r7, #20]
 80080b4:	f000 f8c8 	bl	8008248 <prvInsertTimerInActiveList>
 80080b8:	4603      	mov	r3, r0
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d015      	beq.n	80080ea <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80080be:	2300      	movs	r3, #0
 80080c0:	9300      	str	r3, [sp, #0]
 80080c2:	2300      	movs	r3, #0
 80080c4:	687a      	ldr	r2, [r7, #4]
 80080c6:	2100      	movs	r1, #0
 80080c8:	6978      	ldr	r0, [r7, #20]
 80080ca:	f7ff ff8d 	bl	8007fe8 <xTimerGenericCommand>
 80080ce:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d109      	bne.n	80080ea <prvProcessExpiredTimer+0x6a>
 80080d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080da:	f383 8811 	msr	BASEPRI, r3
 80080de:	f3bf 8f6f 	isb	sy
 80080e2:	f3bf 8f4f 	dsb	sy
 80080e6:	60fb      	str	r3, [r7, #12]
 80080e8:	e7fe      	b.n	80080e8 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ee:	6978      	ldr	r0, [r7, #20]
 80080f0:	4798      	blx	r3
}
 80080f2:	bf00      	nop
 80080f4:	3718      	adds	r7, #24
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
 80080fa:	bf00      	nop
 80080fc:	20000da4 	.word	0x20000da4

08008100 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b084      	sub	sp, #16
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008108:	f107 0308 	add.w	r3, r7, #8
 800810c:	4618      	mov	r0, r3
 800810e:	f000 f857 	bl	80081c0 <prvGetNextExpireTime>
 8008112:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	4619      	mov	r1, r3
 8008118:	68f8      	ldr	r0, [r7, #12]
 800811a:	f000 f803 	bl	8008124 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800811e:	f000 f8d5 	bl	80082cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008122:	e7f1      	b.n	8008108 <prvTimerTask+0x8>

08008124 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b084      	sub	sp, #16
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800812e:	f7ff fa57 	bl	80075e0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008132:	f107 0308 	add.w	r3, r7, #8
 8008136:	4618      	mov	r0, r3
 8008138:	f000 f866 	bl	8008208 <prvSampleTimeNow>
 800813c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d130      	bne.n	80081a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d10a      	bne.n	8008160 <prvProcessTimerOrBlockTask+0x3c>
 800814a:	687a      	ldr	r2, [r7, #4]
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	429a      	cmp	r2, r3
 8008150:	d806      	bhi.n	8008160 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008152:	f7ff fa53 	bl	80075fc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008156:	68f9      	ldr	r1, [r7, #12]
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f7ff ff91 	bl	8008080 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800815e:	e024      	b.n	80081aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d008      	beq.n	8008178 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008166:	4b13      	ldr	r3, [pc, #76]	; (80081b4 <prvProcessTimerOrBlockTask+0x90>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	2b00      	cmp	r3, #0
 800816e:	bf0c      	ite	eq
 8008170:	2301      	moveq	r3, #1
 8008172:	2300      	movne	r3, #0
 8008174:	b2db      	uxtb	r3, r3
 8008176:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008178:	4b0f      	ldr	r3, [pc, #60]	; (80081b8 <prvProcessTimerOrBlockTask+0x94>)
 800817a:	6818      	ldr	r0, [r3, #0]
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	1ad3      	subs	r3, r2, r3
 8008182:	683a      	ldr	r2, [r7, #0]
 8008184:	4619      	mov	r1, r3
 8008186:	f7fe ffcb 	bl	8007120 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800818a:	f7ff fa37 	bl	80075fc <xTaskResumeAll>
 800818e:	4603      	mov	r3, r0
 8008190:	2b00      	cmp	r3, #0
 8008192:	d10a      	bne.n	80081aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008194:	4b09      	ldr	r3, [pc, #36]	; (80081bc <prvProcessTimerOrBlockTask+0x98>)
 8008196:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800819a:	601a      	str	r2, [r3, #0]
 800819c:	f3bf 8f4f 	dsb	sy
 80081a0:	f3bf 8f6f 	isb	sy
}
 80081a4:	e001      	b.n	80081aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80081a6:	f7ff fa29 	bl	80075fc <xTaskResumeAll>
}
 80081aa:	bf00      	nop
 80081ac:	3710      	adds	r7, #16
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}
 80081b2:	bf00      	nop
 80081b4:	20000da8 	.word	0x20000da8
 80081b8:	20000dac 	.word	0x20000dac
 80081bc:	e000ed04 	.word	0xe000ed04

080081c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80081c0:	b480      	push	{r7}
 80081c2:	b085      	sub	sp, #20
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80081c8:	4b0e      	ldr	r3, [pc, #56]	; (8008204 <prvGetNextExpireTime+0x44>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	bf0c      	ite	eq
 80081d2:	2301      	moveq	r3, #1
 80081d4:	2300      	movne	r3, #0
 80081d6:	b2db      	uxtb	r3, r3
 80081d8:	461a      	mov	r2, r3
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d105      	bne.n	80081f2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80081e6:	4b07      	ldr	r3, [pc, #28]	; (8008204 <prvGetNextExpireTime+0x44>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	68db      	ldr	r3, [r3, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	60fb      	str	r3, [r7, #12]
 80081f0:	e001      	b.n	80081f6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80081f2:	2300      	movs	r3, #0
 80081f4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80081f6:	68fb      	ldr	r3, [r7, #12]
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3714      	adds	r7, #20
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr
 8008204:	20000da4 	.word	0x20000da4

08008208 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b084      	sub	sp, #16
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008210:	f7ff fa90 	bl	8007734 <xTaskGetTickCount>
 8008214:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008216:	4b0b      	ldr	r3, [pc, #44]	; (8008244 <prvSampleTimeNow+0x3c>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	68fa      	ldr	r2, [r7, #12]
 800821c:	429a      	cmp	r2, r3
 800821e:	d205      	bcs.n	800822c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008220:	f000 f904 	bl	800842c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2201      	movs	r2, #1
 8008228:	601a      	str	r2, [r3, #0]
 800822a:	e002      	b.n	8008232 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2200      	movs	r2, #0
 8008230:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008232:	4a04      	ldr	r2, [pc, #16]	; (8008244 <prvSampleTimeNow+0x3c>)
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008238:	68fb      	ldr	r3, [r7, #12]
}
 800823a:	4618      	mov	r0, r3
 800823c:	3710      	adds	r7, #16
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
 8008242:	bf00      	nop
 8008244:	20000db4 	.word	0x20000db4

08008248 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b086      	sub	sp, #24
 800824c:	af00      	add	r7, sp, #0
 800824e:	60f8      	str	r0, [r7, #12]
 8008250:	60b9      	str	r1, [r7, #8]
 8008252:	607a      	str	r2, [r7, #4]
 8008254:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008256:	2300      	movs	r3, #0
 8008258:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	68ba      	ldr	r2, [r7, #8]
 800825e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	68fa      	ldr	r2, [r7, #12]
 8008264:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008266:	68ba      	ldr	r2, [r7, #8]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	429a      	cmp	r2, r3
 800826c:	d812      	bhi.n	8008294 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	1ad2      	subs	r2, r2, r3
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	699b      	ldr	r3, [r3, #24]
 8008278:	429a      	cmp	r2, r3
 800827a:	d302      	bcc.n	8008282 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800827c:	2301      	movs	r3, #1
 800827e:	617b      	str	r3, [r7, #20]
 8008280:	e01b      	b.n	80082ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008282:	4b10      	ldr	r3, [pc, #64]	; (80082c4 <prvInsertTimerInActiveList+0x7c>)
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	3304      	adds	r3, #4
 800828a:	4619      	mov	r1, r3
 800828c:	4610      	mov	r0, r2
 800828e:	f7fe fa44 	bl	800671a <vListInsert>
 8008292:	e012      	b.n	80082ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	429a      	cmp	r2, r3
 800829a:	d206      	bcs.n	80082aa <prvInsertTimerInActiveList+0x62>
 800829c:	68ba      	ldr	r2, [r7, #8]
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d302      	bcc.n	80082aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80082a4:	2301      	movs	r3, #1
 80082a6:	617b      	str	r3, [r7, #20]
 80082a8:	e007      	b.n	80082ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80082aa:	4b07      	ldr	r3, [pc, #28]	; (80082c8 <prvInsertTimerInActiveList+0x80>)
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	3304      	adds	r3, #4
 80082b2:	4619      	mov	r1, r3
 80082b4:	4610      	mov	r0, r2
 80082b6:	f7fe fa30 	bl	800671a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80082ba:	697b      	ldr	r3, [r7, #20]
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3718      	adds	r7, #24
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}
 80082c4:	20000da8 	.word	0x20000da8
 80082c8:	20000da4 	.word	0x20000da4

080082cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b08e      	sub	sp, #56	; 0x38
 80082d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80082d2:	e099      	b.n	8008408 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	da17      	bge.n	800830a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80082da:	1d3b      	adds	r3, r7, #4
 80082dc:	3304      	adds	r3, #4
 80082de:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80082e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d109      	bne.n	80082fa <prvProcessReceivedCommands+0x2e>
 80082e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ea:	f383 8811 	msr	BASEPRI, r3
 80082ee:	f3bf 8f6f 	isb	sy
 80082f2:	f3bf 8f4f 	dsb	sy
 80082f6:	61fb      	str	r3, [r7, #28]
 80082f8:	e7fe      	b.n	80082f8 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80082fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008300:	6850      	ldr	r0, [r2, #4]
 8008302:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008304:	6892      	ldr	r2, [r2, #8]
 8008306:	4611      	mov	r1, r2
 8008308:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2b00      	cmp	r3, #0
 800830e:	db7a      	blt.n	8008406 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008316:	695b      	ldr	r3, [r3, #20]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d004      	beq.n	8008326 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800831c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800831e:	3304      	adds	r3, #4
 8008320:	4618      	mov	r0, r3
 8008322:	f7fe fa33 	bl	800678c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008326:	463b      	mov	r3, r7
 8008328:	4618      	mov	r0, r3
 800832a:	f7ff ff6d 	bl	8008208 <prvSampleTimeNow>
 800832e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2b09      	cmp	r3, #9
 8008334:	d868      	bhi.n	8008408 <prvProcessReceivedCommands+0x13c>
 8008336:	a201      	add	r2, pc, #4	; (adr r2, 800833c <prvProcessReceivedCommands+0x70>)
 8008338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800833c:	08008365 	.word	0x08008365
 8008340:	08008365 	.word	0x08008365
 8008344:	08008365 	.word	0x08008365
 8008348:	08008409 	.word	0x08008409
 800834c:	080083bf 	.word	0x080083bf
 8008350:	080083f5 	.word	0x080083f5
 8008354:	08008365 	.word	0x08008365
 8008358:	08008365 	.word	0x08008365
 800835c:	08008409 	.word	0x08008409
 8008360:	080083bf 	.word	0x080083bf
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008364:	68ba      	ldr	r2, [r7, #8]
 8008366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008368:	699b      	ldr	r3, [r3, #24]
 800836a:	18d1      	adds	r1, r2, r3
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008370:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008372:	f7ff ff69 	bl	8008248 <prvInsertTimerInActiveList>
 8008376:	4603      	mov	r3, r0
 8008378:	2b00      	cmp	r3, #0
 800837a:	d045      	beq.n	8008408 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800837c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800837e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008380:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008382:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008386:	69db      	ldr	r3, [r3, #28]
 8008388:	2b01      	cmp	r3, #1
 800838a:	d13d      	bne.n	8008408 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800838c:	68ba      	ldr	r2, [r7, #8]
 800838e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008390:	699b      	ldr	r3, [r3, #24]
 8008392:	441a      	add	r2, r3
 8008394:	2300      	movs	r3, #0
 8008396:	9300      	str	r3, [sp, #0]
 8008398:	2300      	movs	r3, #0
 800839a:	2100      	movs	r1, #0
 800839c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800839e:	f7ff fe23 	bl	8007fe8 <xTimerGenericCommand>
 80083a2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80083a4:	6a3b      	ldr	r3, [r7, #32]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d12e      	bne.n	8008408 <prvProcessReceivedCommands+0x13c>
 80083aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ae:	f383 8811 	msr	BASEPRI, r3
 80083b2:	f3bf 8f6f 	isb	sy
 80083b6:	f3bf 8f4f 	dsb	sy
 80083ba:	61bb      	str	r3, [r7, #24]
 80083bc:	e7fe      	b.n	80083bc <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80083be:	68ba      	ldr	r2, [r7, #8]
 80083c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80083c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c6:	699b      	ldr	r3, [r3, #24]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d109      	bne.n	80083e0 <prvProcessReceivedCommands+0x114>
 80083cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d0:	f383 8811 	msr	BASEPRI, r3
 80083d4:	f3bf 8f6f 	isb	sy
 80083d8:	f3bf 8f4f 	dsb	sy
 80083dc:	617b      	str	r3, [r7, #20]
 80083de:	e7fe      	b.n	80083de <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80083e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e2:	699a      	ldr	r2, [r3, #24]
 80083e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e6:	18d1      	adds	r1, r2, r3
 80083e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083ee:	f7ff ff2b 	bl	8008248 <prvInsertTimerInActiveList>
					break;
 80083f2:	e009      	b.n	8008408 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80083f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d104      	bne.n	8008408 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 80083fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008400:	f000 fbb8 	bl	8008b74 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008404:	e000      	b.n	8008408 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008406:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008408:	4b07      	ldr	r3, [pc, #28]	; (8008428 <prvProcessReceivedCommands+0x15c>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	1d39      	adds	r1, r7, #4
 800840e:	2200      	movs	r2, #0
 8008410:	4618      	mov	r0, r3
 8008412:	f7fe fc71 	bl	8006cf8 <xQueueReceive>
 8008416:	4603      	mov	r3, r0
 8008418:	2b00      	cmp	r3, #0
 800841a:	f47f af5b 	bne.w	80082d4 <prvProcessReceivedCommands+0x8>
	}
}
 800841e:	bf00      	nop
 8008420:	3730      	adds	r7, #48	; 0x30
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}
 8008426:	bf00      	nop
 8008428:	20000dac 	.word	0x20000dac

0800842c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b088      	sub	sp, #32
 8008430:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008432:	e044      	b.n	80084be <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008434:	4b2b      	ldr	r3, [pc, #172]	; (80084e4 <prvSwitchTimerLists+0xb8>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	68db      	ldr	r3, [r3, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800843e:	4b29      	ldr	r3, [pc, #164]	; (80084e4 <prvSwitchTimerLists+0xb8>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	68db      	ldr	r3, [r3, #12]
 8008444:	68db      	ldr	r3, [r3, #12]
 8008446:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	3304      	adds	r3, #4
 800844c:	4618      	mov	r0, r3
 800844e:	f7fe f99d 	bl	800678c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008456:	68f8      	ldr	r0, [r7, #12]
 8008458:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	69db      	ldr	r3, [r3, #28]
 800845e:	2b01      	cmp	r3, #1
 8008460:	d12d      	bne.n	80084be <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	699b      	ldr	r3, [r3, #24]
 8008466:	693a      	ldr	r2, [r7, #16]
 8008468:	4413      	add	r3, r2
 800846a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800846c:	68ba      	ldr	r2, [r7, #8]
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	429a      	cmp	r2, r3
 8008472:	d90e      	bls.n	8008492 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	68ba      	ldr	r2, [r7, #8]
 8008478:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	68fa      	ldr	r2, [r7, #12]
 800847e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008480:	4b18      	ldr	r3, [pc, #96]	; (80084e4 <prvSwitchTimerLists+0xb8>)
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	3304      	adds	r3, #4
 8008488:	4619      	mov	r1, r3
 800848a:	4610      	mov	r0, r2
 800848c:	f7fe f945 	bl	800671a <vListInsert>
 8008490:	e015      	b.n	80084be <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008492:	2300      	movs	r3, #0
 8008494:	9300      	str	r3, [sp, #0]
 8008496:	2300      	movs	r3, #0
 8008498:	693a      	ldr	r2, [r7, #16]
 800849a:	2100      	movs	r1, #0
 800849c:	68f8      	ldr	r0, [r7, #12]
 800849e:	f7ff fda3 	bl	8007fe8 <xTimerGenericCommand>
 80084a2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d109      	bne.n	80084be <prvSwitchTimerLists+0x92>
 80084aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ae:	f383 8811 	msr	BASEPRI, r3
 80084b2:	f3bf 8f6f 	isb	sy
 80084b6:	f3bf 8f4f 	dsb	sy
 80084ba:	603b      	str	r3, [r7, #0]
 80084bc:	e7fe      	b.n	80084bc <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80084be:	4b09      	ldr	r3, [pc, #36]	; (80084e4 <prvSwitchTimerLists+0xb8>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d1b5      	bne.n	8008434 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80084c8:	4b06      	ldr	r3, [pc, #24]	; (80084e4 <prvSwitchTimerLists+0xb8>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80084ce:	4b06      	ldr	r3, [pc, #24]	; (80084e8 <prvSwitchTimerLists+0xbc>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4a04      	ldr	r2, [pc, #16]	; (80084e4 <prvSwitchTimerLists+0xb8>)
 80084d4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80084d6:	4a04      	ldr	r2, [pc, #16]	; (80084e8 <prvSwitchTimerLists+0xbc>)
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	6013      	str	r3, [r2, #0]
}
 80084dc:	bf00      	nop
 80084de:	3718      	adds	r7, #24
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}
 80084e4:	20000da4 	.word	0x20000da4
 80084e8:	20000da8 	.word	0x20000da8

080084ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b082      	sub	sp, #8
 80084f0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80084f2:	f000 f963 	bl	80087bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80084f6:	4b15      	ldr	r3, [pc, #84]	; (800854c <prvCheckForValidListAndQueue+0x60>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d120      	bne.n	8008540 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80084fe:	4814      	ldr	r0, [pc, #80]	; (8008550 <prvCheckForValidListAndQueue+0x64>)
 8008500:	f7fe f8ba 	bl	8006678 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008504:	4813      	ldr	r0, [pc, #76]	; (8008554 <prvCheckForValidListAndQueue+0x68>)
 8008506:	f7fe f8b7 	bl	8006678 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800850a:	4b13      	ldr	r3, [pc, #76]	; (8008558 <prvCheckForValidListAndQueue+0x6c>)
 800850c:	4a10      	ldr	r2, [pc, #64]	; (8008550 <prvCheckForValidListAndQueue+0x64>)
 800850e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008510:	4b12      	ldr	r3, [pc, #72]	; (800855c <prvCheckForValidListAndQueue+0x70>)
 8008512:	4a10      	ldr	r2, [pc, #64]	; (8008554 <prvCheckForValidListAndQueue+0x68>)
 8008514:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008516:	2300      	movs	r3, #0
 8008518:	9300      	str	r3, [sp, #0]
 800851a:	4b11      	ldr	r3, [pc, #68]	; (8008560 <prvCheckForValidListAndQueue+0x74>)
 800851c:	4a11      	ldr	r2, [pc, #68]	; (8008564 <prvCheckForValidListAndQueue+0x78>)
 800851e:	2110      	movs	r1, #16
 8008520:	200a      	movs	r0, #10
 8008522:	f7fe f9c5 	bl	80068b0 <xQueueGenericCreateStatic>
 8008526:	4602      	mov	r2, r0
 8008528:	4b08      	ldr	r3, [pc, #32]	; (800854c <prvCheckForValidListAndQueue+0x60>)
 800852a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800852c:	4b07      	ldr	r3, [pc, #28]	; (800854c <prvCheckForValidListAndQueue+0x60>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d005      	beq.n	8008540 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008534:	4b05      	ldr	r3, [pc, #20]	; (800854c <prvCheckForValidListAndQueue+0x60>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	490b      	ldr	r1, [pc, #44]	; (8008568 <prvCheckForValidListAndQueue+0x7c>)
 800853a:	4618      	mov	r0, r3
 800853c:	f7fe fdc8 	bl	80070d0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008540:	f000 f96a 	bl	8008818 <vPortExitCritical>
}
 8008544:	bf00      	nop
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop
 800854c:	20000dac 	.word	0x20000dac
 8008550:	20000d7c 	.word	0x20000d7c
 8008554:	20000d90 	.word	0x20000d90
 8008558:	20000da4 	.word	0x20000da4
 800855c:	20000da8 	.word	0x20000da8
 8008560:	20000e58 	.word	0x20000e58
 8008564:	20000db8 	.word	0x20000db8
 8008568:	08009704 	.word	0x08009704

0800856c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800856c:	b480      	push	{r7}
 800856e:	b085      	sub	sp, #20
 8008570:	af00      	add	r7, sp, #0
 8008572:	60f8      	str	r0, [r7, #12]
 8008574:	60b9      	str	r1, [r7, #8]
 8008576:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	3b04      	subs	r3, #4
 800857c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008584:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	3b04      	subs	r3, #4
 800858a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	f023 0201 	bic.w	r2, r3, #1
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	3b04      	subs	r3, #4
 800859a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800859c:	4a0c      	ldr	r2, [pc, #48]	; (80085d0 <pxPortInitialiseStack+0x64>)
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	3b14      	subs	r3, #20
 80085a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80085a8:	687a      	ldr	r2, [r7, #4]
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	3b04      	subs	r3, #4
 80085b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f06f 0202 	mvn.w	r2, #2
 80085ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	3b20      	subs	r3, #32
 80085c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80085c2:	68fb      	ldr	r3, [r7, #12]
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3714      	adds	r7, #20
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr
 80085d0:	080085d5 	.word	0x080085d5

080085d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80085d4:	b480      	push	{r7}
 80085d6:	b085      	sub	sp, #20
 80085d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80085da:	2300      	movs	r3, #0
 80085dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80085de:	4b11      	ldr	r3, [pc, #68]	; (8008624 <prvTaskExitError+0x50>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085e6:	d009      	beq.n	80085fc <prvTaskExitError+0x28>
 80085e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ec:	f383 8811 	msr	BASEPRI, r3
 80085f0:	f3bf 8f6f 	isb	sy
 80085f4:	f3bf 8f4f 	dsb	sy
 80085f8:	60fb      	str	r3, [r7, #12]
 80085fa:	e7fe      	b.n	80085fa <prvTaskExitError+0x26>
 80085fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008600:	f383 8811 	msr	BASEPRI, r3
 8008604:	f3bf 8f6f 	isb	sy
 8008608:	f3bf 8f4f 	dsb	sy
 800860c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800860e:	bf00      	nop
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d0fc      	beq.n	8008610 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008616:	bf00      	nop
 8008618:	3714      	adds	r7, #20
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr
 8008622:	bf00      	nop
 8008624:	200000a4 	.word	0x200000a4
	...

08008630 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008630:	4b07      	ldr	r3, [pc, #28]	; (8008650 <pxCurrentTCBConst2>)
 8008632:	6819      	ldr	r1, [r3, #0]
 8008634:	6808      	ldr	r0, [r1, #0]
 8008636:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800863a:	f380 8809 	msr	PSP, r0
 800863e:	f3bf 8f6f 	isb	sy
 8008642:	f04f 0000 	mov.w	r0, #0
 8008646:	f380 8811 	msr	BASEPRI, r0
 800864a:	4770      	bx	lr
 800864c:	f3af 8000 	nop.w

08008650 <pxCurrentTCBConst2>:
 8008650:	2000087c 	.word	0x2000087c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008654:	bf00      	nop
 8008656:	bf00      	nop

08008658 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008658:	4808      	ldr	r0, [pc, #32]	; (800867c <prvPortStartFirstTask+0x24>)
 800865a:	6800      	ldr	r0, [r0, #0]
 800865c:	6800      	ldr	r0, [r0, #0]
 800865e:	f380 8808 	msr	MSP, r0
 8008662:	f04f 0000 	mov.w	r0, #0
 8008666:	f380 8814 	msr	CONTROL, r0
 800866a:	b662      	cpsie	i
 800866c:	b661      	cpsie	f
 800866e:	f3bf 8f4f 	dsb	sy
 8008672:	f3bf 8f6f 	isb	sy
 8008676:	df00      	svc	0
 8008678:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800867a:	bf00      	nop
 800867c:	e000ed08 	.word	0xe000ed08

08008680 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b086      	sub	sp, #24
 8008684:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008686:	4b44      	ldr	r3, [pc, #272]	; (8008798 <xPortStartScheduler+0x118>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a44      	ldr	r2, [pc, #272]	; (800879c <xPortStartScheduler+0x11c>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d109      	bne.n	80086a4 <xPortStartScheduler+0x24>
 8008690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008694:	f383 8811 	msr	BASEPRI, r3
 8008698:	f3bf 8f6f 	isb	sy
 800869c:	f3bf 8f4f 	dsb	sy
 80086a0:	613b      	str	r3, [r7, #16]
 80086a2:	e7fe      	b.n	80086a2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80086a4:	4b3c      	ldr	r3, [pc, #240]	; (8008798 <xPortStartScheduler+0x118>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a3d      	ldr	r2, [pc, #244]	; (80087a0 <xPortStartScheduler+0x120>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d109      	bne.n	80086c2 <xPortStartScheduler+0x42>
 80086ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b2:	f383 8811 	msr	BASEPRI, r3
 80086b6:	f3bf 8f6f 	isb	sy
 80086ba:	f3bf 8f4f 	dsb	sy
 80086be:	60fb      	str	r3, [r7, #12]
 80086c0:	e7fe      	b.n	80086c0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80086c2:	4b38      	ldr	r3, [pc, #224]	; (80087a4 <xPortStartScheduler+0x124>)
 80086c4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	781b      	ldrb	r3, [r3, #0]
 80086ca:	b2db      	uxtb	r3, r3
 80086cc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	22ff      	movs	r2, #255	; 0xff
 80086d2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	b2db      	uxtb	r3, r3
 80086da:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80086dc:	78fb      	ldrb	r3, [r7, #3]
 80086de:	b2db      	uxtb	r3, r3
 80086e0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80086e4:	b2da      	uxtb	r2, r3
 80086e6:	4b30      	ldr	r3, [pc, #192]	; (80087a8 <xPortStartScheduler+0x128>)
 80086e8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80086ea:	4b30      	ldr	r3, [pc, #192]	; (80087ac <xPortStartScheduler+0x12c>)
 80086ec:	2207      	movs	r2, #7
 80086ee:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80086f0:	e009      	b.n	8008706 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80086f2:	4b2e      	ldr	r3, [pc, #184]	; (80087ac <xPortStartScheduler+0x12c>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	3b01      	subs	r3, #1
 80086f8:	4a2c      	ldr	r2, [pc, #176]	; (80087ac <xPortStartScheduler+0x12c>)
 80086fa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80086fc:	78fb      	ldrb	r3, [r7, #3]
 80086fe:	b2db      	uxtb	r3, r3
 8008700:	005b      	lsls	r3, r3, #1
 8008702:	b2db      	uxtb	r3, r3
 8008704:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008706:	78fb      	ldrb	r3, [r7, #3]
 8008708:	b2db      	uxtb	r3, r3
 800870a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800870e:	2b80      	cmp	r3, #128	; 0x80
 8008710:	d0ef      	beq.n	80086f2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008712:	4b26      	ldr	r3, [pc, #152]	; (80087ac <xPortStartScheduler+0x12c>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f1c3 0307 	rsb	r3, r3, #7
 800871a:	2b04      	cmp	r3, #4
 800871c:	d009      	beq.n	8008732 <xPortStartScheduler+0xb2>
 800871e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008722:	f383 8811 	msr	BASEPRI, r3
 8008726:	f3bf 8f6f 	isb	sy
 800872a:	f3bf 8f4f 	dsb	sy
 800872e:	60bb      	str	r3, [r7, #8]
 8008730:	e7fe      	b.n	8008730 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008732:	4b1e      	ldr	r3, [pc, #120]	; (80087ac <xPortStartScheduler+0x12c>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	021b      	lsls	r3, r3, #8
 8008738:	4a1c      	ldr	r2, [pc, #112]	; (80087ac <xPortStartScheduler+0x12c>)
 800873a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800873c:	4b1b      	ldr	r3, [pc, #108]	; (80087ac <xPortStartScheduler+0x12c>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008744:	4a19      	ldr	r2, [pc, #100]	; (80087ac <xPortStartScheduler+0x12c>)
 8008746:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	b2da      	uxtb	r2, r3
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008750:	4b17      	ldr	r3, [pc, #92]	; (80087b0 <xPortStartScheduler+0x130>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a16      	ldr	r2, [pc, #88]	; (80087b0 <xPortStartScheduler+0x130>)
 8008756:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800875a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800875c:	4b14      	ldr	r3, [pc, #80]	; (80087b0 <xPortStartScheduler+0x130>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a13      	ldr	r2, [pc, #76]	; (80087b0 <xPortStartScheduler+0x130>)
 8008762:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008766:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008768:	f000 f8d6 	bl	8008918 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800876c:	4b11      	ldr	r3, [pc, #68]	; (80087b4 <xPortStartScheduler+0x134>)
 800876e:	2200      	movs	r2, #0
 8008770:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008772:	f000 f8f5 	bl	8008960 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008776:	4b10      	ldr	r3, [pc, #64]	; (80087b8 <xPortStartScheduler+0x138>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a0f      	ldr	r2, [pc, #60]	; (80087b8 <xPortStartScheduler+0x138>)
 800877c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008780:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008782:	f7ff ff69 	bl	8008658 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008786:	f7ff f8a3 	bl	80078d0 <vTaskSwitchContext>
	prvTaskExitError();
 800878a:	f7ff ff23 	bl	80085d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800878e:	2300      	movs	r3, #0
}
 8008790:	4618      	mov	r0, r3
 8008792:	3718      	adds	r7, #24
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}
 8008798:	e000ed00 	.word	0xe000ed00
 800879c:	410fc271 	.word	0x410fc271
 80087a0:	410fc270 	.word	0x410fc270
 80087a4:	e000e400 	.word	0xe000e400
 80087a8:	20000ea8 	.word	0x20000ea8
 80087ac:	20000eac 	.word	0x20000eac
 80087b0:	e000ed20 	.word	0xe000ed20
 80087b4:	200000a4 	.word	0x200000a4
 80087b8:	e000ef34 	.word	0xe000ef34

080087bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80087bc:	b480      	push	{r7}
 80087be:	b083      	sub	sp, #12
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c6:	f383 8811 	msr	BASEPRI, r3
 80087ca:	f3bf 8f6f 	isb	sy
 80087ce:	f3bf 8f4f 	dsb	sy
 80087d2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80087d4:	4b0e      	ldr	r3, [pc, #56]	; (8008810 <vPortEnterCritical+0x54>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	3301      	adds	r3, #1
 80087da:	4a0d      	ldr	r2, [pc, #52]	; (8008810 <vPortEnterCritical+0x54>)
 80087dc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80087de:	4b0c      	ldr	r3, [pc, #48]	; (8008810 <vPortEnterCritical+0x54>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	d10e      	bne.n	8008804 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80087e6:	4b0b      	ldr	r3, [pc, #44]	; (8008814 <vPortEnterCritical+0x58>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	b2db      	uxtb	r3, r3
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d009      	beq.n	8008804 <vPortEnterCritical+0x48>
 80087f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f4:	f383 8811 	msr	BASEPRI, r3
 80087f8:	f3bf 8f6f 	isb	sy
 80087fc:	f3bf 8f4f 	dsb	sy
 8008800:	603b      	str	r3, [r7, #0]
 8008802:	e7fe      	b.n	8008802 <vPortEnterCritical+0x46>
	}
}
 8008804:	bf00      	nop
 8008806:	370c      	adds	r7, #12
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr
 8008810:	200000a4 	.word	0x200000a4
 8008814:	e000ed04 	.word	0xe000ed04

08008818 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008818:	b480      	push	{r7}
 800881a:	b083      	sub	sp, #12
 800881c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800881e:	4b11      	ldr	r3, [pc, #68]	; (8008864 <vPortExitCritical+0x4c>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d109      	bne.n	800883a <vPortExitCritical+0x22>
 8008826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800882a:	f383 8811 	msr	BASEPRI, r3
 800882e:	f3bf 8f6f 	isb	sy
 8008832:	f3bf 8f4f 	dsb	sy
 8008836:	607b      	str	r3, [r7, #4]
 8008838:	e7fe      	b.n	8008838 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800883a:	4b0a      	ldr	r3, [pc, #40]	; (8008864 <vPortExitCritical+0x4c>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	3b01      	subs	r3, #1
 8008840:	4a08      	ldr	r2, [pc, #32]	; (8008864 <vPortExitCritical+0x4c>)
 8008842:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008844:	4b07      	ldr	r3, [pc, #28]	; (8008864 <vPortExitCritical+0x4c>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d104      	bne.n	8008856 <vPortExitCritical+0x3e>
 800884c:	2300      	movs	r3, #0
 800884e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008856:	bf00      	nop
 8008858:	370c      	adds	r7, #12
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr
 8008862:	bf00      	nop
 8008864:	200000a4 	.word	0x200000a4
	...

08008870 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008870:	f3ef 8009 	mrs	r0, PSP
 8008874:	f3bf 8f6f 	isb	sy
 8008878:	4b15      	ldr	r3, [pc, #84]	; (80088d0 <pxCurrentTCBConst>)
 800887a:	681a      	ldr	r2, [r3, #0]
 800887c:	f01e 0f10 	tst.w	lr, #16
 8008880:	bf08      	it	eq
 8008882:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008886:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800888a:	6010      	str	r0, [r2, #0]
 800888c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008890:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008894:	f380 8811 	msr	BASEPRI, r0
 8008898:	f3bf 8f4f 	dsb	sy
 800889c:	f3bf 8f6f 	isb	sy
 80088a0:	f7ff f816 	bl	80078d0 <vTaskSwitchContext>
 80088a4:	f04f 0000 	mov.w	r0, #0
 80088a8:	f380 8811 	msr	BASEPRI, r0
 80088ac:	bc09      	pop	{r0, r3}
 80088ae:	6819      	ldr	r1, [r3, #0]
 80088b0:	6808      	ldr	r0, [r1, #0]
 80088b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088b6:	f01e 0f10 	tst.w	lr, #16
 80088ba:	bf08      	it	eq
 80088bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80088c0:	f380 8809 	msr	PSP, r0
 80088c4:	f3bf 8f6f 	isb	sy
 80088c8:	4770      	bx	lr
 80088ca:	bf00      	nop
 80088cc:	f3af 8000 	nop.w

080088d0 <pxCurrentTCBConst>:
 80088d0:	2000087c 	.word	0x2000087c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80088d4:	bf00      	nop
 80088d6:	bf00      	nop

080088d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b082      	sub	sp, #8
 80088dc:	af00      	add	r7, sp, #0
	__asm volatile
 80088de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e2:	f383 8811 	msr	BASEPRI, r3
 80088e6:	f3bf 8f6f 	isb	sy
 80088ea:	f3bf 8f4f 	dsb	sy
 80088ee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80088f0:	f7fe ff30 	bl	8007754 <xTaskIncrementTick>
 80088f4:	4603      	mov	r3, r0
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d003      	beq.n	8008902 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80088fa:	4b06      	ldr	r3, [pc, #24]	; (8008914 <SysTick_Handler+0x3c>)
 80088fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008900:	601a      	str	r2, [r3, #0]
 8008902:	2300      	movs	r3, #0
 8008904:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800890c:	bf00      	nop
 800890e:	3708      	adds	r7, #8
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}
 8008914:	e000ed04 	.word	0xe000ed04

08008918 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008918:	b480      	push	{r7}
 800891a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800891c:	4b0b      	ldr	r3, [pc, #44]	; (800894c <vPortSetupTimerInterrupt+0x34>)
 800891e:	2200      	movs	r2, #0
 8008920:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008922:	4b0b      	ldr	r3, [pc, #44]	; (8008950 <vPortSetupTimerInterrupt+0x38>)
 8008924:	2200      	movs	r2, #0
 8008926:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008928:	4b0a      	ldr	r3, [pc, #40]	; (8008954 <vPortSetupTimerInterrupt+0x3c>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a0a      	ldr	r2, [pc, #40]	; (8008958 <vPortSetupTimerInterrupt+0x40>)
 800892e:	fba2 2303 	umull	r2, r3, r2, r3
 8008932:	099b      	lsrs	r3, r3, #6
 8008934:	4a09      	ldr	r2, [pc, #36]	; (800895c <vPortSetupTimerInterrupt+0x44>)
 8008936:	3b01      	subs	r3, #1
 8008938:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800893a:	4b04      	ldr	r3, [pc, #16]	; (800894c <vPortSetupTimerInterrupt+0x34>)
 800893c:	2207      	movs	r2, #7
 800893e:	601a      	str	r2, [r3, #0]
}
 8008940:	bf00      	nop
 8008942:	46bd      	mov	sp, r7
 8008944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008948:	4770      	bx	lr
 800894a:	bf00      	nop
 800894c:	e000e010 	.word	0xe000e010
 8008950:	e000e018 	.word	0xe000e018
 8008954:	2000008c 	.word	0x2000008c
 8008958:	10624dd3 	.word	0x10624dd3
 800895c:	e000e014 	.word	0xe000e014

08008960 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008960:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008970 <vPortEnableVFP+0x10>
 8008964:	6801      	ldr	r1, [r0, #0]
 8008966:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800896a:	6001      	str	r1, [r0, #0]
 800896c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800896e:	bf00      	nop
 8008970:	e000ed88 	.word	0xe000ed88

08008974 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008974:	b480      	push	{r7}
 8008976:	b085      	sub	sp, #20
 8008978:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800897a:	f3ef 8305 	mrs	r3, IPSR
 800897e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2b0f      	cmp	r3, #15
 8008984:	d913      	bls.n	80089ae <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008986:	4a16      	ldr	r2, [pc, #88]	; (80089e0 <vPortValidateInterruptPriority+0x6c>)
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	4413      	add	r3, r2
 800898c:	781b      	ldrb	r3, [r3, #0]
 800898e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008990:	4b14      	ldr	r3, [pc, #80]	; (80089e4 <vPortValidateInterruptPriority+0x70>)
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	7afa      	ldrb	r2, [r7, #11]
 8008996:	429a      	cmp	r2, r3
 8008998:	d209      	bcs.n	80089ae <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800899a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800899e:	f383 8811 	msr	BASEPRI, r3
 80089a2:	f3bf 8f6f 	isb	sy
 80089a6:	f3bf 8f4f 	dsb	sy
 80089aa:	607b      	str	r3, [r7, #4]
 80089ac:	e7fe      	b.n	80089ac <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80089ae:	4b0e      	ldr	r3, [pc, #56]	; (80089e8 <vPortValidateInterruptPriority+0x74>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80089b6:	4b0d      	ldr	r3, [pc, #52]	; (80089ec <vPortValidateInterruptPriority+0x78>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	429a      	cmp	r2, r3
 80089bc:	d909      	bls.n	80089d2 <vPortValidateInterruptPriority+0x5e>
 80089be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c2:	f383 8811 	msr	BASEPRI, r3
 80089c6:	f3bf 8f6f 	isb	sy
 80089ca:	f3bf 8f4f 	dsb	sy
 80089ce:	603b      	str	r3, [r7, #0]
 80089d0:	e7fe      	b.n	80089d0 <vPortValidateInterruptPriority+0x5c>
	}
 80089d2:	bf00      	nop
 80089d4:	3714      	adds	r7, #20
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr
 80089de:	bf00      	nop
 80089e0:	e000e3f0 	.word	0xe000e3f0
 80089e4:	20000ea8 	.word	0x20000ea8
 80089e8:	e000ed0c 	.word	0xe000ed0c
 80089ec:	20000eac 	.word	0x20000eac

080089f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b08a      	sub	sp, #40	; 0x28
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80089f8:	2300      	movs	r3, #0
 80089fa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80089fc:	f7fe fdf0 	bl	80075e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008a00:	4b57      	ldr	r3, [pc, #348]	; (8008b60 <pvPortMalloc+0x170>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d101      	bne.n	8008a0c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008a08:	f000 f90c 	bl	8008c24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008a0c:	4b55      	ldr	r3, [pc, #340]	; (8008b64 <pvPortMalloc+0x174>)
 8008a0e:	681a      	ldr	r2, [r3, #0]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	4013      	ands	r3, r2
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	f040 808c 	bne.w	8008b32 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d01c      	beq.n	8008a5a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008a20:	2208      	movs	r2, #8
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	4413      	add	r3, r2
 8008a26:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f003 0307 	and.w	r3, r3, #7
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d013      	beq.n	8008a5a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f023 0307 	bic.w	r3, r3, #7
 8008a38:	3308      	adds	r3, #8
 8008a3a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f003 0307 	and.w	r3, r3, #7
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d009      	beq.n	8008a5a <pvPortMalloc+0x6a>
 8008a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a4a:	f383 8811 	msr	BASEPRI, r3
 8008a4e:	f3bf 8f6f 	isb	sy
 8008a52:	f3bf 8f4f 	dsb	sy
 8008a56:	617b      	str	r3, [r7, #20]
 8008a58:	e7fe      	b.n	8008a58 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d068      	beq.n	8008b32 <pvPortMalloc+0x142>
 8008a60:	4b41      	ldr	r3, [pc, #260]	; (8008b68 <pvPortMalloc+0x178>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d863      	bhi.n	8008b32 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008a6a:	4b40      	ldr	r3, [pc, #256]	; (8008b6c <pvPortMalloc+0x17c>)
 8008a6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008a6e:	4b3f      	ldr	r3, [pc, #252]	; (8008b6c <pvPortMalloc+0x17c>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a74:	e004      	b.n	8008a80 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	687a      	ldr	r2, [r7, #4]
 8008a86:	429a      	cmp	r2, r3
 8008a88:	d903      	bls.n	8008a92 <pvPortMalloc+0xa2>
 8008a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d1f1      	bne.n	8008a76 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008a92:	4b33      	ldr	r3, [pc, #204]	; (8008b60 <pvPortMalloc+0x170>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	d04a      	beq.n	8008b32 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008a9c:	6a3b      	ldr	r3, [r7, #32]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	2208      	movs	r2, #8
 8008aa2:	4413      	add	r3, r2
 8008aa4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa8:	681a      	ldr	r2, [r3, #0]
 8008aaa:	6a3b      	ldr	r3, [r7, #32]
 8008aac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab0:	685a      	ldr	r2, [r3, #4]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	1ad2      	subs	r2, r2, r3
 8008ab6:	2308      	movs	r3, #8
 8008ab8:	005b      	lsls	r3, r3, #1
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d91e      	bls.n	8008afc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	4413      	add	r3, r2
 8008ac4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ac6:	69bb      	ldr	r3, [r7, #24]
 8008ac8:	f003 0307 	and.w	r3, r3, #7
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d009      	beq.n	8008ae4 <pvPortMalloc+0xf4>
 8008ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad4:	f383 8811 	msr	BASEPRI, r3
 8008ad8:	f3bf 8f6f 	isb	sy
 8008adc:	f3bf 8f4f 	dsb	sy
 8008ae0:	613b      	str	r3, [r7, #16]
 8008ae2:	e7fe      	b.n	8008ae2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae6:	685a      	ldr	r2, [r3, #4]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	1ad2      	subs	r2, r2, r3
 8008aec:	69bb      	ldr	r3, [r7, #24]
 8008aee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af2:	687a      	ldr	r2, [r7, #4]
 8008af4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008af6:	69b8      	ldr	r0, [r7, #24]
 8008af8:	f000 f8f6 	bl	8008ce8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008afc:	4b1a      	ldr	r3, [pc, #104]	; (8008b68 <pvPortMalloc+0x178>)
 8008afe:	681a      	ldr	r2, [r3, #0]
 8008b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b02:	685b      	ldr	r3, [r3, #4]
 8008b04:	1ad3      	subs	r3, r2, r3
 8008b06:	4a18      	ldr	r2, [pc, #96]	; (8008b68 <pvPortMalloc+0x178>)
 8008b08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008b0a:	4b17      	ldr	r3, [pc, #92]	; (8008b68 <pvPortMalloc+0x178>)
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	4b18      	ldr	r3, [pc, #96]	; (8008b70 <pvPortMalloc+0x180>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	429a      	cmp	r2, r3
 8008b14:	d203      	bcs.n	8008b1e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008b16:	4b14      	ldr	r3, [pc, #80]	; (8008b68 <pvPortMalloc+0x178>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a15      	ldr	r2, [pc, #84]	; (8008b70 <pvPortMalloc+0x180>)
 8008b1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b20:	685a      	ldr	r2, [r3, #4]
 8008b22:	4b10      	ldr	r3, [pc, #64]	; (8008b64 <pvPortMalloc+0x174>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	431a      	orrs	r2, r3
 8008b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2e:	2200      	movs	r2, #0
 8008b30:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008b32:	f7fe fd63 	bl	80075fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b36:	69fb      	ldr	r3, [r7, #28]
 8008b38:	f003 0307 	and.w	r3, r3, #7
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d009      	beq.n	8008b54 <pvPortMalloc+0x164>
 8008b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b44:	f383 8811 	msr	BASEPRI, r3
 8008b48:	f3bf 8f6f 	isb	sy
 8008b4c:	f3bf 8f4f 	dsb	sy
 8008b50:	60fb      	str	r3, [r7, #12]
 8008b52:	e7fe      	b.n	8008b52 <pvPortMalloc+0x162>
	return pvReturn;
 8008b54:	69fb      	ldr	r3, [r7, #28]
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3728      	adds	r7, #40	; 0x28
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}
 8008b5e:	bf00      	nop
 8008b60:	20001a70 	.word	0x20001a70
 8008b64:	20001a7c 	.word	0x20001a7c
 8008b68:	20001a74 	.word	0x20001a74
 8008b6c:	20001a68 	.word	0x20001a68
 8008b70:	20001a78 	.word	0x20001a78

08008b74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b086      	sub	sp, #24
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d046      	beq.n	8008c14 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008b86:	2308      	movs	r3, #8
 8008b88:	425b      	negs	r3, r3
 8008b8a:	697a      	ldr	r2, [r7, #20]
 8008b8c:	4413      	add	r3, r2
 8008b8e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	685a      	ldr	r2, [r3, #4]
 8008b98:	4b20      	ldr	r3, [pc, #128]	; (8008c1c <vPortFree+0xa8>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4013      	ands	r3, r2
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d109      	bne.n	8008bb6 <vPortFree+0x42>
 8008ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ba6:	f383 8811 	msr	BASEPRI, r3
 8008baa:	f3bf 8f6f 	isb	sy
 8008bae:	f3bf 8f4f 	dsb	sy
 8008bb2:	60fb      	str	r3, [r7, #12]
 8008bb4:	e7fe      	b.n	8008bb4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d009      	beq.n	8008bd2 <vPortFree+0x5e>
 8008bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc2:	f383 8811 	msr	BASEPRI, r3
 8008bc6:	f3bf 8f6f 	isb	sy
 8008bca:	f3bf 8f4f 	dsb	sy
 8008bce:	60bb      	str	r3, [r7, #8]
 8008bd0:	e7fe      	b.n	8008bd0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	685a      	ldr	r2, [r3, #4]
 8008bd6:	4b11      	ldr	r3, [pc, #68]	; (8008c1c <vPortFree+0xa8>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4013      	ands	r3, r2
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d019      	beq.n	8008c14 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d115      	bne.n	8008c14 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	685a      	ldr	r2, [r3, #4]
 8008bec:	4b0b      	ldr	r3, [pc, #44]	; (8008c1c <vPortFree+0xa8>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	43db      	mvns	r3, r3
 8008bf2:	401a      	ands	r2, r3
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008bf8:	f7fe fcf2 	bl	80075e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	685a      	ldr	r2, [r3, #4]
 8008c00:	4b07      	ldr	r3, [pc, #28]	; (8008c20 <vPortFree+0xac>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	4413      	add	r3, r2
 8008c06:	4a06      	ldr	r2, [pc, #24]	; (8008c20 <vPortFree+0xac>)
 8008c08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008c0a:	6938      	ldr	r0, [r7, #16]
 8008c0c:	f000 f86c 	bl	8008ce8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008c10:	f7fe fcf4 	bl	80075fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008c14:	bf00      	nop
 8008c16:	3718      	adds	r7, #24
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}
 8008c1c:	20001a7c 	.word	0x20001a7c
 8008c20:	20001a74 	.word	0x20001a74

08008c24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008c24:	b480      	push	{r7}
 8008c26:	b085      	sub	sp, #20
 8008c28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008c2a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8008c2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008c30:	4b27      	ldr	r3, [pc, #156]	; (8008cd0 <prvHeapInit+0xac>)
 8008c32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f003 0307 	and.w	r3, r3, #7
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d00c      	beq.n	8008c58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	3307      	adds	r3, #7
 8008c42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	f023 0307 	bic.w	r3, r3, #7
 8008c4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008c4c:	68ba      	ldr	r2, [r7, #8]
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	1ad3      	subs	r3, r2, r3
 8008c52:	4a1f      	ldr	r2, [pc, #124]	; (8008cd0 <prvHeapInit+0xac>)
 8008c54:	4413      	add	r3, r2
 8008c56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008c5c:	4a1d      	ldr	r2, [pc, #116]	; (8008cd4 <prvHeapInit+0xb0>)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008c62:	4b1c      	ldr	r3, [pc, #112]	; (8008cd4 <prvHeapInit+0xb0>)
 8008c64:	2200      	movs	r2, #0
 8008c66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	68ba      	ldr	r2, [r7, #8]
 8008c6c:	4413      	add	r3, r2
 8008c6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008c70:	2208      	movs	r2, #8
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	1a9b      	subs	r3, r3, r2
 8008c76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f023 0307 	bic.w	r3, r3, #7
 8008c7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	4a15      	ldr	r2, [pc, #84]	; (8008cd8 <prvHeapInit+0xb4>)
 8008c84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008c86:	4b14      	ldr	r3, [pc, #80]	; (8008cd8 <prvHeapInit+0xb4>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008c8e:	4b12      	ldr	r3, [pc, #72]	; (8008cd8 <prvHeapInit+0xb4>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	2200      	movs	r2, #0
 8008c94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	68fa      	ldr	r2, [r7, #12]
 8008c9e:	1ad2      	subs	r2, r2, r3
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008ca4:	4b0c      	ldr	r3, [pc, #48]	; (8008cd8 <prvHeapInit+0xb4>)
 8008ca6:	681a      	ldr	r2, [r3, #0]
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	4a0a      	ldr	r2, [pc, #40]	; (8008cdc <prvHeapInit+0xb8>)
 8008cb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	4a09      	ldr	r2, [pc, #36]	; (8008ce0 <prvHeapInit+0xbc>)
 8008cba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008cbc:	4b09      	ldr	r3, [pc, #36]	; (8008ce4 <prvHeapInit+0xc0>)
 8008cbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008cc2:	601a      	str	r2, [r3, #0]
}
 8008cc4:	bf00      	nop
 8008cc6:	3714      	adds	r7, #20
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cce:	4770      	bx	lr
 8008cd0:	20000eb0 	.word	0x20000eb0
 8008cd4:	20001a68 	.word	0x20001a68
 8008cd8:	20001a70 	.word	0x20001a70
 8008cdc:	20001a78 	.word	0x20001a78
 8008ce0:	20001a74 	.word	0x20001a74
 8008ce4:	20001a7c 	.word	0x20001a7c

08008ce8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b085      	sub	sp, #20
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008cf0:	4b28      	ldr	r3, [pc, #160]	; (8008d94 <prvInsertBlockIntoFreeList+0xac>)
 8008cf2:	60fb      	str	r3, [r7, #12]
 8008cf4:	e002      	b.n	8008cfc <prvInsertBlockIntoFreeList+0x14>
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	60fb      	str	r3, [r7, #12]
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	687a      	ldr	r2, [r7, #4]
 8008d02:	429a      	cmp	r2, r3
 8008d04:	d8f7      	bhi.n	8008cf6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	68ba      	ldr	r2, [r7, #8]
 8008d10:	4413      	add	r3, r2
 8008d12:	687a      	ldr	r2, [r7, #4]
 8008d14:	429a      	cmp	r2, r3
 8008d16:	d108      	bne.n	8008d2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	685a      	ldr	r2, [r3, #4]
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	685b      	ldr	r3, [r3, #4]
 8008d20:	441a      	add	r2, r3
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	68ba      	ldr	r2, [r7, #8]
 8008d34:	441a      	add	r2, r3
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	d118      	bne.n	8008d70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681a      	ldr	r2, [r3, #0]
 8008d42:	4b15      	ldr	r3, [pc, #84]	; (8008d98 <prvInsertBlockIntoFreeList+0xb0>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d00d      	beq.n	8008d66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	685a      	ldr	r2, [r3, #4]
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	441a      	add	r2, r3
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	681a      	ldr	r2, [r3, #0]
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	601a      	str	r2, [r3, #0]
 8008d64:	e008      	b.n	8008d78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008d66:	4b0c      	ldr	r3, [pc, #48]	; (8008d98 <prvInsertBlockIntoFreeList+0xb0>)
 8008d68:	681a      	ldr	r2, [r3, #0]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	601a      	str	r2, [r3, #0]
 8008d6e:	e003      	b.n	8008d78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681a      	ldr	r2, [r3, #0]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008d78:	68fa      	ldr	r2, [r7, #12]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	d002      	beq.n	8008d86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	687a      	ldr	r2, [r7, #4]
 8008d84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d86:	bf00      	nop
 8008d88:	3714      	adds	r7, #20
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d90:	4770      	bx	lr
 8008d92:	bf00      	nop
 8008d94:	20001a68 	.word	0x20001a68
 8008d98:	20001a70 	.word	0x20001a70

08008d9c <__errno>:
 8008d9c:	4b01      	ldr	r3, [pc, #4]	; (8008da4 <__errno+0x8>)
 8008d9e:	6818      	ldr	r0, [r3, #0]
 8008da0:	4770      	bx	lr
 8008da2:	bf00      	nop
 8008da4:	200000a8 	.word	0x200000a8

08008da8 <__libc_init_array>:
 8008da8:	b570      	push	{r4, r5, r6, lr}
 8008daa:	4e0d      	ldr	r6, [pc, #52]	; (8008de0 <__libc_init_array+0x38>)
 8008dac:	4c0d      	ldr	r4, [pc, #52]	; (8008de4 <__libc_init_array+0x3c>)
 8008dae:	1ba4      	subs	r4, r4, r6
 8008db0:	10a4      	asrs	r4, r4, #2
 8008db2:	2500      	movs	r5, #0
 8008db4:	42a5      	cmp	r5, r4
 8008db6:	d109      	bne.n	8008dcc <__libc_init_array+0x24>
 8008db8:	4e0b      	ldr	r6, [pc, #44]	; (8008de8 <__libc_init_array+0x40>)
 8008dba:	4c0c      	ldr	r4, [pc, #48]	; (8008dec <__libc_init_array+0x44>)
 8008dbc:	f000 fc76 	bl	80096ac <_init>
 8008dc0:	1ba4      	subs	r4, r4, r6
 8008dc2:	10a4      	asrs	r4, r4, #2
 8008dc4:	2500      	movs	r5, #0
 8008dc6:	42a5      	cmp	r5, r4
 8008dc8:	d105      	bne.n	8008dd6 <__libc_init_array+0x2e>
 8008dca:	bd70      	pop	{r4, r5, r6, pc}
 8008dcc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008dd0:	4798      	blx	r3
 8008dd2:	3501      	adds	r5, #1
 8008dd4:	e7ee      	b.n	8008db4 <__libc_init_array+0xc>
 8008dd6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008dda:	4798      	blx	r3
 8008ddc:	3501      	adds	r5, #1
 8008dde:	e7f2      	b.n	8008dc6 <__libc_init_array+0x1e>
 8008de0:	08009790 	.word	0x08009790
 8008de4:	08009790 	.word	0x08009790
 8008de8:	08009790 	.word	0x08009790
 8008dec:	08009794 	.word	0x08009794

08008df0 <memcpy>:
 8008df0:	b510      	push	{r4, lr}
 8008df2:	1e43      	subs	r3, r0, #1
 8008df4:	440a      	add	r2, r1
 8008df6:	4291      	cmp	r1, r2
 8008df8:	d100      	bne.n	8008dfc <memcpy+0xc>
 8008dfa:	bd10      	pop	{r4, pc}
 8008dfc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e04:	e7f7      	b.n	8008df6 <memcpy+0x6>

08008e06 <memset>:
 8008e06:	4402      	add	r2, r0
 8008e08:	4603      	mov	r3, r0
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d100      	bne.n	8008e10 <memset+0xa>
 8008e0e:	4770      	bx	lr
 8008e10:	f803 1b01 	strb.w	r1, [r3], #1
 8008e14:	e7f9      	b.n	8008e0a <memset+0x4>
	...

08008e18 <sniprintf>:
 8008e18:	b40c      	push	{r2, r3}
 8008e1a:	b530      	push	{r4, r5, lr}
 8008e1c:	4b17      	ldr	r3, [pc, #92]	; (8008e7c <sniprintf+0x64>)
 8008e1e:	1e0c      	subs	r4, r1, #0
 8008e20:	b09d      	sub	sp, #116	; 0x74
 8008e22:	681d      	ldr	r5, [r3, #0]
 8008e24:	da08      	bge.n	8008e38 <sniprintf+0x20>
 8008e26:	238b      	movs	r3, #139	; 0x8b
 8008e28:	602b      	str	r3, [r5, #0]
 8008e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8008e2e:	b01d      	add	sp, #116	; 0x74
 8008e30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e34:	b002      	add	sp, #8
 8008e36:	4770      	bx	lr
 8008e38:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008e3c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008e40:	bf14      	ite	ne
 8008e42:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008e46:	4623      	moveq	r3, r4
 8008e48:	9304      	str	r3, [sp, #16]
 8008e4a:	9307      	str	r3, [sp, #28]
 8008e4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008e50:	9002      	str	r0, [sp, #8]
 8008e52:	9006      	str	r0, [sp, #24]
 8008e54:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008e58:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008e5a:	ab21      	add	r3, sp, #132	; 0x84
 8008e5c:	a902      	add	r1, sp, #8
 8008e5e:	4628      	mov	r0, r5
 8008e60:	9301      	str	r3, [sp, #4]
 8008e62:	f000 f867 	bl	8008f34 <_svfiprintf_r>
 8008e66:	1c43      	adds	r3, r0, #1
 8008e68:	bfbc      	itt	lt
 8008e6a:	238b      	movlt	r3, #139	; 0x8b
 8008e6c:	602b      	strlt	r3, [r5, #0]
 8008e6e:	2c00      	cmp	r4, #0
 8008e70:	d0dd      	beq.n	8008e2e <sniprintf+0x16>
 8008e72:	9b02      	ldr	r3, [sp, #8]
 8008e74:	2200      	movs	r2, #0
 8008e76:	701a      	strb	r2, [r3, #0]
 8008e78:	e7d9      	b.n	8008e2e <sniprintf+0x16>
 8008e7a:	bf00      	nop
 8008e7c:	200000a8 	.word	0x200000a8

08008e80 <__ssputs_r>:
 8008e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e84:	688e      	ldr	r6, [r1, #8]
 8008e86:	429e      	cmp	r6, r3
 8008e88:	4682      	mov	sl, r0
 8008e8a:	460c      	mov	r4, r1
 8008e8c:	4690      	mov	r8, r2
 8008e8e:	4699      	mov	r9, r3
 8008e90:	d837      	bhi.n	8008f02 <__ssputs_r+0x82>
 8008e92:	898a      	ldrh	r2, [r1, #12]
 8008e94:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008e98:	d031      	beq.n	8008efe <__ssputs_r+0x7e>
 8008e9a:	6825      	ldr	r5, [r4, #0]
 8008e9c:	6909      	ldr	r1, [r1, #16]
 8008e9e:	1a6f      	subs	r7, r5, r1
 8008ea0:	6965      	ldr	r5, [r4, #20]
 8008ea2:	2302      	movs	r3, #2
 8008ea4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ea8:	fb95 f5f3 	sdiv	r5, r5, r3
 8008eac:	f109 0301 	add.w	r3, r9, #1
 8008eb0:	443b      	add	r3, r7
 8008eb2:	429d      	cmp	r5, r3
 8008eb4:	bf38      	it	cc
 8008eb6:	461d      	movcc	r5, r3
 8008eb8:	0553      	lsls	r3, r2, #21
 8008eba:	d530      	bpl.n	8008f1e <__ssputs_r+0x9e>
 8008ebc:	4629      	mov	r1, r5
 8008ebe:	f000 fb21 	bl	8009504 <_malloc_r>
 8008ec2:	4606      	mov	r6, r0
 8008ec4:	b950      	cbnz	r0, 8008edc <__ssputs_r+0x5c>
 8008ec6:	230c      	movs	r3, #12
 8008ec8:	f8ca 3000 	str.w	r3, [sl]
 8008ecc:	89a3      	ldrh	r3, [r4, #12]
 8008ece:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ed2:	81a3      	strh	r3, [r4, #12]
 8008ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008edc:	463a      	mov	r2, r7
 8008ede:	6921      	ldr	r1, [r4, #16]
 8008ee0:	f7ff ff86 	bl	8008df0 <memcpy>
 8008ee4:	89a3      	ldrh	r3, [r4, #12]
 8008ee6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008eea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008eee:	81a3      	strh	r3, [r4, #12]
 8008ef0:	6126      	str	r6, [r4, #16]
 8008ef2:	6165      	str	r5, [r4, #20]
 8008ef4:	443e      	add	r6, r7
 8008ef6:	1bed      	subs	r5, r5, r7
 8008ef8:	6026      	str	r6, [r4, #0]
 8008efa:	60a5      	str	r5, [r4, #8]
 8008efc:	464e      	mov	r6, r9
 8008efe:	454e      	cmp	r6, r9
 8008f00:	d900      	bls.n	8008f04 <__ssputs_r+0x84>
 8008f02:	464e      	mov	r6, r9
 8008f04:	4632      	mov	r2, r6
 8008f06:	4641      	mov	r1, r8
 8008f08:	6820      	ldr	r0, [r4, #0]
 8008f0a:	f000 fa93 	bl	8009434 <memmove>
 8008f0e:	68a3      	ldr	r3, [r4, #8]
 8008f10:	1b9b      	subs	r3, r3, r6
 8008f12:	60a3      	str	r3, [r4, #8]
 8008f14:	6823      	ldr	r3, [r4, #0]
 8008f16:	441e      	add	r6, r3
 8008f18:	6026      	str	r6, [r4, #0]
 8008f1a:	2000      	movs	r0, #0
 8008f1c:	e7dc      	b.n	8008ed8 <__ssputs_r+0x58>
 8008f1e:	462a      	mov	r2, r5
 8008f20:	f000 fb4a 	bl	80095b8 <_realloc_r>
 8008f24:	4606      	mov	r6, r0
 8008f26:	2800      	cmp	r0, #0
 8008f28:	d1e2      	bne.n	8008ef0 <__ssputs_r+0x70>
 8008f2a:	6921      	ldr	r1, [r4, #16]
 8008f2c:	4650      	mov	r0, sl
 8008f2e:	f000 fa9b 	bl	8009468 <_free_r>
 8008f32:	e7c8      	b.n	8008ec6 <__ssputs_r+0x46>

08008f34 <_svfiprintf_r>:
 8008f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f38:	461d      	mov	r5, r3
 8008f3a:	898b      	ldrh	r3, [r1, #12]
 8008f3c:	061f      	lsls	r7, r3, #24
 8008f3e:	b09d      	sub	sp, #116	; 0x74
 8008f40:	4680      	mov	r8, r0
 8008f42:	460c      	mov	r4, r1
 8008f44:	4616      	mov	r6, r2
 8008f46:	d50f      	bpl.n	8008f68 <_svfiprintf_r+0x34>
 8008f48:	690b      	ldr	r3, [r1, #16]
 8008f4a:	b96b      	cbnz	r3, 8008f68 <_svfiprintf_r+0x34>
 8008f4c:	2140      	movs	r1, #64	; 0x40
 8008f4e:	f000 fad9 	bl	8009504 <_malloc_r>
 8008f52:	6020      	str	r0, [r4, #0]
 8008f54:	6120      	str	r0, [r4, #16]
 8008f56:	b928      	cbnz	r0, 8008f64 <_svfiprintf_r+0x30>
 8008f58:	230c      	movs	r3, #12
 8008f5a:	f8c8 3000 	str.w	r3, [r8]
 8008f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8008f62:	e0c8      	b.n	80090f6 <_svfiprintf_r+0x1c2>
 8008f64:	2340      	movs	r3, #64	; 0x40
 8008f66:	6163      	str	r3, [r4, #20]
 8008f68:	2300      	movs	r3, #0
 8008f6a:	9309      	str	r3, [sp, #36]	; 0x24
 8008f6c:	2320      	movs	r3, #32
 8008f6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f72:	2330      	movs	r3, #48	; 0x30
 8008f74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f78:	9503      	str	r5, [sp, #12]
 8008f7a:	f04f 0b01 	mov.w	fp, #1
 8008f7e:	4637      	mov	r7, r6
 8008f80:	463d      	mov	r5, r7
 8008f82:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008f86:	b10b      	cbz	r3, 8008f8c <_svfiprintf_r+0x58>
 8008f88:	2b25      	cmp	r3, #37	; 0x25
 8008f8a:	d13e      	bne.n	800900a <_svfiprintf_r+0xd6>
 8008f8c:	ebb7 0a06 	subs.w	sl, r7, r6
 8008f90:	d00b      	beq.n	8008faa <_svfiprintf_r+0x76>
 8008f92:	4653      	mov	r3, sl
 8008f94:	4632      	mov	r2, r6
 8008f96:	4621      	mov	r1, r4
 8008f98:	4640      	mov	r0, r8
 8008f9a:	f7ff ff71 	bl	8008e80 <__ssputs_r>
 8008f9e:	3001      	adds	r0, #1
 8008fa0:	f000 80a4 	beq.w	80090ec <_svfiprintf_r+0x1b8>
 8008fa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fa6:	4453      	add	r3, sl
 8008fa8:	9309      	str	r3, [sp, #36]	; 0x24
 8008faa:	783b      	ldrb	r3, [r7, #0]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	f000 809d 	beq.w	80090ec <_svfiprintf_r+0x1b8>
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8008fb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fbc:	9304      	str	r3, [sp, #16]
 8008fbe:	9307      	str	r3, [sp, #28]
 8008fc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008fc4:	931a      	str	r3, [sp, #104]	; 0x68
 8008fc6:	462f      	mov	r7, r5
 8008fc8:	2205      	movs	r2, #5
 8008fca:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008fce:	4850      	ldr	r0, [pc, #320]	; (8009110 <_svfiprintf_r+0x1dc>)
 8008fd0:	f7f7 f8fe 	bl	80001d0 <memchr>
 8008fd4:	9b04      	ldr	r3, [sp, #16]
 8008fd6:	b9d0      	cbnz	r0, 800900e <_svfiprintf_r+0xda>
 8008fd8:	06d9      	lsls	r1, r3, #27
 8008fda:	bf44      	itt	mi
 8008fdc:	2220      	movmi	r2, #32
 8008fde:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008fe2:	071a      	lsls	r2, r3, #28
 8008fe4:	bf44      	itt	mi
 8008fe6:	222b      	movmi	r2, #43	; 0x2b
 8008fe8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008fec:	782a      	ldrb	r2, [r5, #0]
 8008fee:	2a2a      	cmp	r2, #42	; 0x2a
 8008ff0:	d015      	beq.n	800901e <_svfiprintf_r+0xea>
 8008ff2:	9a07      	ldr	r2, [sp, #28]
 8008ff4:	462f      	mov	r7, r5
 8008ff6:	2000      	movs	r0, #0
 8008ff8:	250a      	movs	r5, #10
 8008ffa:	4639      	mov	r1, r7
 8008ffc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009000:	3b30      	subs	r3, #48	; 0x30
 8009002:	2b09      	cmp	r3, #9
 8009004:	d94d      	bls.n	80090a2 <_svfiprintf_r+0x16e>
 8009006:	b1b8      	cbz	r0, 8009038 <_svfiprintf_r+0x104>
 8009008:	e00f      	b.n	800902a <_svfiprintf_r+0xf6>
 800900a:	462f      	mov	r7, r5
 800900c:	e7b8      	b.n	8008f80 <_svfiprintf_r+0x4c>
 800900e:	4a40      	ldr	r2, [pc, #256]	; (8009110 <_svfiprintf_r+0x1dc>)
 8009010:	1a80      	subs	r0, r0, r2
 8009012:	fa0b f000 	lsl.w	r0, fp, r0
 8009016:	4318      	orrs	r0, r3
 8009018:	9004      	str	r0, [sp, #16]
 800901a:	463d      	mov	r5, r7
 800901c:	e7d3      	b.n	8008fc6 <_svfiprintf_r+0x92>
 800901e:	9a03      	ldr	r2, [sp, #12]
 8009020:	1d11      	adds	r1, r2, #4
 8009022:	6812      	ldr	r2, [r2, #0]
 8009024:	9103      	str	r1, [sp, #12]
 8009026:	2a00      	cmp	r2, #0
 8009028:	db01      	blt.n	800902e <_svfiprintf_r+0xfa>
 800902a:	9207      	str	r2, [sp, #28]
 800902c:	e004      	b.n	8009038 <_svfiprintf_r+0x104>
 800902e:	4252      	negs	r2, r2
 8009030:	f043 0302 	orr.w	r3, r3, #2
 8009034:	9207      	str	r2, [sp, #28]
 8009036:	9304      	str	r3, [sp, #16]
 8009038:	783b      	ldrb	r3, [r7, #0]
 800903a:	2b2e      	cmp	r3, #46	; 0x2e
 800903c:	d10c      	bne.n	8009058 <_svfiprintf_r+0x124>
 800903e:	787b      	ldrb	r3, [r7, #1]
 8009040:	2b2a      	cmp	r3, #42	; 0x2a
 8009042:	d133      	bne.n	80090ac <_svfiprintf_r+0x178>
 8009044:	9b03      	ldr	r3, [sp, #12]
 8009046:	1d1a      	adds	r2, r3, #4
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	9203      	str	r2, [sp, #12]
 800904c:	2b00      	cmp	r3, #0
 800904e:	bfb8      	it	lt
 8009050:	f04f 33ff 	movlt.w	r3, #4294967295
 8009054:	3702      	adds	r7, #2
 8009056:	9305      	str	r3, [sp, #20]
 8009058:	4d2e      	ldr	r5, [pc, #184]	; (8009114 <_svfiprintf_r+0x1e0>)
 800905a:	7839      	ldrb	r1, [r7, #0]
 800905c:	2203      	movs	r2, #3
 800905e:	4628      	mov	r0, r5
 8009060:	f7f7 f8b6 	bl	80001d0 <memchr>
 8009064:	b138      	cbz	r0, 8009076 <_svfiprintf_r+0x142>
 8009066:	2340      	movs	r3, #64	; 0x40
 8009068:	1b40      	subs	r0, r0, r5
 800906a:	fa03 f000 	lsl.w	r0, r3, r0
 800906e:	9b04      	ldr	r3, [sp, #16]
 8009070:	4303      	orrs	r3, r0
 8009072:	3701      	adds	r7, #1
 8009074:	9304      	str	r3, [sp, #16]
 8009076:	7839      	ldrb	r1, [r7, #0]
 8009078:	4827      	ldr	r0, [pc, #156]	; (8009118 <_svfiprintf_r+0x1e4>)
 800907a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800907e:	2206      	movs	r2, #6
 8009080:	1c7e      	adds	r6, r7, #1
 8009082:	f7f7 f8a5 	bl	80001d0 <memchr>
 8009086:	2800      	cmp	r0, #0
 8009088:	d038      	beq.n	80090fc <_svfiprintf_r+0x1c8>
 800908a:	4b24      	ldr	r3, [pc, #144]	; (800911c <_svfiprintf_r+0x1e8>)
 800908c:	bb13      	cbnz	r3, 80090d4 <_svfiprintf_r+0x1a0>
 800908e:	9b03      	ldr	r3, [sp, #12]
 8009090:	3307      	adds	r3, #7
 8009092:	f023 0307 	bic.w	r3, r3, #7
 8009096:	3308      	adds	r3, #8
 8009098:	9303      	str	r3, [sp, #12]
 800909a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800909c:	444b      	add	r3, r9
 800909e:	9309      	str	r3, [sp, #36]	; 0x24
 80090a0:	e76d      	b.n	8008f7e <_svfiprintf_r+0x4a>
 80090a2:	fb05 3202 	mla	r2, r5, r2, r3
 80090a6:	2001      	movs	r0, #1
 80090a8:	460f      	mov	r7, r1
 80090aa:	e7a6      	b.n	8008ffa <_svfiprintf_r+0xc6>
 80090ac:	2300      	movs	r3, #0
 80090ae:	3701      	adds	r7, #1
 80090b0:	9305      	str	r3, [sp, #20]
 80090b2:	4619      	mov	r1, r3
 80090b4:	250a      	movs	r5, #10
 80090b6:	4638      	mov	r0, r7
 80090b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090bc:	3a30      	subs	r2, #48	; 0x30
 80090be:	2a09      	cmp	r2, #9
 80090c0:	d903      	bls.n	80090ca <_svfiprintf_r+0x196>
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d0c8      	beq.n	8009058 <_svfiprintf_r+0x124>
 80090c6:	9105      	str	r1, [sp, #20]
 80090c8:	e7c6      	b.n	8009058 <_svfiprintf_r+0x124>
 80090ca:	fb05 2101 	mla	r1, r5, r1, r2
 80090ce:	2301      	movs	r3, #1
 80090d0:	4607      	mov	r7, r0
 80090d2:	e7f0      	b.n	80090b6 <_svfiprintf_r+0x182>
 80090d4:	ab03      	add	r3, sp, #12
 80090d6:	9300      	str	r3, [sp, #0]
 80090d8:	4622      	mov	r2, r4
 80090da:	4b11      	ldr	r3, [pc, #68]	; (8009120 <_svfiprintf_r+0x1ec>)
 80090dc:	a904      	add	r1, sp, #16
 80090de:	4640      	mov	r0, r8
 80090e0:	f3af 8000 	nop.w
 80090e4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80090e8:	4681      	mov	r9, r0
 80090ea:	d1d6      	bne.n	800909a <_svfiprintf_r+0x166>
 80090ec:	89a3      	ldrh	r3, [r4, #12]
 80090ee:	065b      	lsls	r3, r3, #25
 80090f0:	f53f af35 	bmi.w	8008f5e <_svfiprintf_r+0x2a>
 80090f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090f6:	b01d      	add	sp, #116	; 0x74
 80090f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090fc:	ab03      	add	r3, sp, #12
 80090fe:	9300      	str	r3, [sp, #0]
 8009100:	4622      	mov	r2, r4
 8009102:	4b07      	ldr	r3, [pc, #28]	; (8009120 <_svfiprintf_r+0x1ec>)
 8009104:	a904      	add	r1, sp, #16
 8009106:	4640      	mov	r0, r8
 8009108:	f000 f882 	bl	8009210 <_printf_i>
 800910c:	e7ea      	b.n	80090e4 <_svfiprintf_r+0x1b0>
 800910e:	bf00      	nop
 8009110:	08009754 	.word	0x08009754
 8009114:	0800975a 	.word	0x0800975a
 8009118:	0800975e 	.word	0x0800975e
 800911c:	00000000 	.word	0x00000000
 8009120:	08008e81 	.word	0x08008e81

08009124 <_printf_common>:
 8009124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009128:	4691      	mov	r9, r2
 800912a:	461f      	mov	r7, r3
 800912c:	688a      	ldr	r2, [r1, #8]
 800912e:	690b      	ldr	r3, [r1, #16]
 8009130:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009134:	4293      	cmp	r3, r2
 8009136:	bfb8      	it	lt
 8009138:	4613      	movlt	r3, r2
 800913a:	f8c9 3000 	str.w	r3, [r9]
 800913e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009142:	4606      	mov	r6, r0
 8009144:	460c      	mov	r4, r1
 8009146:	b112      	cbz	r2, 800914e <_printf_common+0x2a>
 8009148:	3301      	adds	r3, #1
 800914a:	f8c9 3000 	str.w	r3, [r9]
 800914e:	6823      	ldr	r3, [r4, #0]
 8009150:	0699      	lsls	r1, r3, #26
 8009152:	bf42      	ittt	mi
 8009154:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009158:	3302      	addmi	r3, #2
 800915a:	f8c9 3000 	strmi.w	r3, [r9]
 800915e:	6825      	ldr	r5, [r4, #0]
 8009160:	f015 0506 	ands.w	r5, r5, #6
 8009164:	d107      	bne.n	8009176 <_printf_common+0x52>
 8009166:	f104 0a19 	add.w	sl, r4, #25
 800916a:	68e3      	ldr	r3, [r4, #12]
 800916c:	f8d9 2000 	ldr.w	r2, [r9]
 8009170:	1a9b      	subs	r3, r3, r2
 8009172:	42ab      	cmp	r3, r5
 8009174:	dc28      	bgt.n	80091c8 <_printf_common+0xa4>
 8009176:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800917a:	6822      	ldr	r2, [r4, #0]
 800917c:	3300      	adds	r3, #0
 800917e:	bf18      	it	ne
 8009180:	2301      	movne	r3, #1
 8009182:	0692      	lsls	r2, r2, #26
 8009184:	d42d      	bmi.n	80091e2 <_printf_common+0xbe>
 8009186:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800918a:	4639      	mov	r1, r7
 800918c:	4630      	mov	r0, r6
 800918e:	47c0      	blx	r8
 8009190:	3001      	adds	r0, #1
 8009192:	d020      	beq.n	80091d6 <_printf_common+0xb2>
 8009194:	6823      	ldr	r3, [r4, #0]
 8009196:	68e5      	ldr	r5, [r4, #12]
 8009198:	f8d9 2000 	ldr.w	r2, [r9]
 800919c:	f003 0306 	and.w	r3, r3, #6
 80091a0:	2b04      	cmp	r3, #4
 80091a2:	bf08      	it	eq
 80091a4:	1aad      	subeq	r5, r5, r2
 80091a6:	68a3      	ldr	r3, [r4, #8]
 80091a8:	6922      	ldr	r2, [r4, #16]
 80091aa:	bf0c      	ite	eq
 80091ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80091b0:	2500      	movne	r5, #0
 80091b2:	4293      	cmp	r3, r2
 80091b4:	bfc4      	itt	gt
 80091b6:	1a9b      	subgt	r3, r3, r2
 80091b8:	18ed      	addgt	r5, r5, r3
 80091ba:	f04f 0900 	mov.w	r9, #0
 80091be:	341a      	adds	r4, #26
 80091c0:	454d      	cmp	r5, r9
 80091c2:	d11a      	bne.n	80091fa <_printf_common+0xd6>
 80091c4:	2000      	movs	r0, #0
 80091c6:	e008      	b.n	80091da <_printf_common+0xb6>
 80091c8:	2301      	movs	r3, #1
 80091ca:	4652      	mov	r2, sl
 80091cc:	4639      	mov	r1, r7
 80091ce:	4630      	mov	r0, r6
 80091d0:	47c0      	blx	r8
 80091d2:	3001      	adds	r0, #1
 80091d4:	d103      	bne.n	80091de <_printf_common+0xba>
 80091d6:	f04f 30ff 	mov.w	r0, #4294967295
 80091da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091de:	3501      	adds	r5, #1
 80091e0:	e7c3      	b.n	800916a <_printf_common+0x46>
 80091e2:	18e1      	adds	r1, r4, r3
 80091e4:	1c5a      	adds	r2, r3, #1
 80091e6:	2030      	movs	r0, #48	; 0x30
 80091e8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80091ec:	4422      	add	r2, r4
 80091ee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80091f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80091f6:	3302      	adds	r3, #2
 80091f8:	e7c5      	b.n	8009186 <_printf_common+0x62>
 80091fa:	2301      	movs	r3, #1
 80091fc:	4622      	mov	r2, r4
 80091fe:	4639      	mov	r1, r7
 8009200:	4630      	mov	r0, r6
 8009202:	47c0      	blx	r8
 8009204:	3001      	adds	r0, #1
 8009206:	d0e6      	beq.n	80091d6 <_printf_common+0xb2>
 8009208:	f109 0901 	add.w	r9, r9, #1
 800920c:	e7d8      	b.n	80091c0 <_printf_common+0x9c>
	...

08009210 <_printf_i>:
 8009210:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009214:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009218:	460c      	mov	r4, r1
 800921a:	7e09      	ldrb	r1, [r1, #24]
 800921c:	b085      	sub	sp, #20
 800921e:	296e      	cmp	r1, #110	; 0x6e
 8009220:	4617      	mov	r7, r2
 8009222:	4606      	mov	r6, r0
 8009224:	4698      	mov	r8, r3
 8009226:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009228:	f000 80b3 	beq.w	8009392 <_printf_i+0x182>
 800922c:	d822      	bhi.n	8009274 <_printf_i+0x64>
 800922e:	2963      	cmp	r1, #99	; 0x63
 8009230:	d036      	beq.n	80092a0 <_printf_i+0x90>
 8009232:	d80a      	bhi.n	800924a <_printf_i+0x3a>
 8009234:	2900      	cmp	r1, #0
 8009236:	f000 80b9 	beq.w	80093ac <_printf_i+0x19c>
 800923a:	2958      	cmp	r1, #88	; 0x58
 800923c:	f000 8083 	beq.w	8009346 <_printf_i+0x136>
 8009240:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009244:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009248:	e032      	b.n	80092b0 <_printf_i+0xa0>
 800924a:	2964      	cmp	r1, #100	; 0x64
 800924c:	d001      	beq.n	8009252 <_printf_i+0x42>
 800924e:	2969      	cmp	r1, #105	; 0x69
 8009250:	d1f6      	bne.n	8009240 <_printf_i+0x30>
 8009252:	6820      	ldr	r0, [r4, #0]
 8009254:	6813      	ldr	r3, [r2, #0]
 8009256:	0605      	lsls	r5, r0, #24
 8009258:	f103 0104 	add.w	r1, r3, #4
 800925c:	d52a      	bpl.n	80092b4 <_printf_i+0xa4>
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	6011      	str	r1, [r2, #0]
 8009262:	2b00      	cmp	r3, #0
 8009264:	da03      	bge.n	800926e <_printf_i+0x5e>
 8009266:	222d      	movs	r2, #45	; 0x2d
 8009268:	425b      	negs	r3, r3
 800926a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800926e:	486f      	ldr	r0, [pc, #444]	; (800942c <_printf_i+0x21c>)
 8009270:	220a      	movs	r2, #10
 8009272:	e039      	b.n	80092e8 <_printf_i+0xd8>
 8009274:	2973      	cmp	r1, #115	; 0x73
 8009276:	f000 809d 	beq.w	80093b4 <_printf_i+0x1a4>
 800927a:	d808      	bhi.n	800928e <_printf_i+0x7e>
 800927c:	296f      	cmp	r1, #111	; 0x6f
 800927e:	d020      	beq.n	80092c2 <_printf_i+0xb2>
 8009280:	2970      	cmp	r1, #112	; 0x70
 8009282:	d1dd      	bne.n	8009240 <_printf_i+0x30>
 8009284:	6823      	ldr	r3, [r4, #0]
 8009286:	f043 0320 	orr.w	r3, r3, #32
 800928a:	6023      	str	r3, [r4, #0]
 800928c:	e003      	b.n	8009296 <_printf_i+0x86>
 800928e:	2975      	cmp	r1, #117	; 0x75
 8009290:	d017      	beq.n	80092c2 <_printf_i+0xb2>
 8009292:	2978      	cmp	r1, #120	; 0x78
 8009294:	d1d4      	bne.n	8009240 <_printf_i+0x30>
 8009296:	2378      	movs	r3, #120	; 0x78
 8009298:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800929c:	4864      	ldr	r0, [pc, #400]	; (8009430 <_printf_i+0x220>)
 800929e:	e055      	b.n	800934c <_printf_i+0x13c>
 80092a0:	6813      	ldr	r3, [r2, #0]
 80092a2:	1d19      	adds	r1, r3, #4
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	6011      	str	r1, [r2, #0]
 80092a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80092ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80092b0:	2301      	movs	r3, #1
 80092b2:	e08c      	b.n	80093ce <_printf_i+0x1be>
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	6011      	str	r1, [r2, #0]
 80092b8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80092bc:	bf18      	it	ne
 80092be:	b21b      	sxthne	r3, r3
 80092c0:	e7cf      	b.n	8009262 <_printf_i+0x52>
 80092c2:	6813      	ldr	r3, [r2, #0]
 80092c4:	6825      	ldr	r5, [r4, #0]
 80092c6:	1d18      	adds	r0, r3, #4
 80092c8:	6010      	str	r0, [r2, #0]
 80092ca:	0628      	lsls	r0, r5, #24
 80092cc:	d501      	bpl.n	80092d2 <_printf_i+0xc2>
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	e002      	b.n	80092d8 <_printf_i+0xc8>
 80092d2:	0668      	lsls	r0, r5, #25
 80092d4:	d5fb      	bpl.n	80092ce <_printf_i+0xbe>
 80092d6:	881b      	ldrh	r3, [r3, #0]
 80092d8:	4854      	ldr	r0, [pc, #336]	; (800942c <_printf_i+0x21c>)
 80092da:	296f      	cmp	r1, #111	; 0x6f
 80092dc:	bf14      	ite	ne
 80092de:	220a      	movne	r2, #10
 80092e0:	2208      	moveq	r2, #8
 80092e2:	2100      	movs	r1, #0
 80092e4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80092e8:	6865      	ldr	r5, [r4, #4]
 80092ea:	60a5      	str	r5, [r4, #8]
 80092ec:	2d00      	cmp	r5, #0
 80092ee:	f2c0 8095 	blt.w	800941c <_printf_i+0x20c>
 80092f2:	6821      	ldr	r1, [r4, #0]
 80092f4:	f021 0104 	bic.w	r1, r1, #4
 80092f8:	6021      	str	r1, [r4, #0]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d13d      	bne.n	800937a <_printf_i+0x16a>
 80092fe:	2d00      	cmp	r5, #0
 8009300:	f040 808e 	bne.w	8009420 <_printf_i+0x210>
 8009304:	4665      	mov	r5, ip
 8009306:	2a08      	cmp	r2, #8
 8009308:	d10b      	bne.n	8009322 <_printf_i+0x112>
 800930a:	6823      	ldr	r3, [r4, #0]
 800930c:	07db      	lsls	r3, r3, #31
 800930e:	d508      	bpl.n	8009322 <_printf_i+0x112>
 8009310:	6923      	ldr	r3, [r4, #16]
 8009312:	6862      	ldr	r2, [r4, #4]
 8009314:	429a      	cmp	r2, r3
 8009316:	bfde      	ittt	le
 8009318:	2330      	movle	r3, #48	; 0x30
 800931a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800931e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009322:	ebac 0305 	sub.w	r3, ip, r5
 8009326:	6123      	str	r3, [r4, #16]
 8009328:	f8cd 8000 	str.w	r8, [sp]
 800932c:	463b      	mov	r3, r7
 800932e:	aa03      	add	r2, sp, #12
 8009330:	4621      	mov	r1, r4
 8009332:	4630      	mov	r0, r6
 8009334:	f7ff fef6 	bl	8009124 <_printf_common>
 8009338:	3001      	adds	r0, #1
 800933a:	d14d      	bne.n	80093d8 <_printf_i+0x1c8>
 800933c:	f04f 30ff 	mov.w	r0, #4294967295
 8009340:	b005      	add	sp, #20
 8009342:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009346:	4839      	ldr	r0, [pc, #228]	; (800942c <_printf_i+0x21c>)
 8009348:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800934c:	6813      	ldr	r3, [r2, #0]
 800934e:	6821      	ldr	r1, [r4, #0]
 8009350:	1d1d      	adds	r5, r3, #4
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	6015      	str	r5, [r2, #0]
 8009356:	060a      	lsls	r2, r1, #24
 8009358:	d50b      	bpl.n	8009372 <_printf_i+0x162>
 800935a:	07ca      	lsls	r2, r1, #31
 800935c:	bf44      	itt	mi
 800935e:	f041 0120 	orrmi.w	r1, r1, #32
 8009362:	6021      	strmi	r1, [r4, #0]
 8009364:	b91b      	cbnz	r3, 800936e <_printf_i+0x15e>
 8009366:	6822      	ldr	r2, [r4, #0]
 8009368:	f022 0220 	bic.w	r2, r2, #32
 800936c:	6022      	str	r2, [r4, #0]
 800936e:	2210      	movs	r2, #16
 8009370:	e7b7      	b.n	80092e2 <_printf_i+0xd2>
 8009372:	064d      	lsls	r5, r1, #25
 8009374:	bf48      	it	mi
 8009376:	b29b      	uxthmi	r3, r3
 8009378:	e7ef      	b.n	800935a <_printf_i+0x14a>
 800937a:	4665      	mov	r5, ip
 800937c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009380:	fb02 3311 	mls	r3, r2, r1, r3
 8009384:	5cc3      	ldrb	r3, [r0, r3]
 8009386:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800938a:	460b      	mov	r3, r1
 800938c:	2900      	cmp	r1, #0
 800938e:	d1f5      	bne.n	800937c <_printf_i+0x16c>
 8009390:	e7b9      	b.n	8009306 <_printf_i+0xf6>
 8009392:	6813      	ldr	r3, [r2, #0]
 8009394:	6825      	ldr	r5, [r4, #0]
 8009396:	6961      	ldr	r1, [r4, #20]
 8009398:	1d18      	adds	r0, r3, #4
 800939a:	6010      	str	r0, [r2, #0]
 800939c:	0628      	lsls	r0, r5, #24
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	d501      	bpl.n	80093a6 <_printf_i+0x196>
 80093a2:	6019      	str	r1, [r3, #0]
 80093a4:	e002      	b.n	80093ac <_printf_i+0x19c>
 80093a6:	066a      	lsls	r2, r5, #25
 80093a8:	d5fb      	bpl.n	80093a2 <_printf_i+0x192>
 80093aa:	8019      	strh	r1, [r3, #0]
 80093ac:	2300      	movs	r3, #0
 80093ae:	6123      	str	r3, [r4, #16]
 80093b0:	4665      	mov	r5, ip
 80093b2:	e7b9      	b.n	8009328 <_printf_i+0x118>
 80093b4:	6813      	ldr	r3, [r2, #0]
 80093b6:	1d19      	adds	r1, r3, #4
 80093b8:	6011      	str	r1, [r2, #0]
 80093ba:	681d      	ldr	r5, [r3, #0]
 80093bc:	6862      	ldr	r2, [r4, #4]
 80093be:	2100      	movs	r1, #0
 80093c0:	4628      	mov	r0, r5
 80093c2:	f7f6 ff05 	bl	80001d0 <memchr>
 80093c6:	b108      	cbz	r0, 80093cc <_printf_i+0x1bc>
 80093c8:	1b40      	subs	r0, r0, r5
 80093ca:	6060      	str	r0, [r4, #4]
 80093cc:	6863      	ldr	r3, [r4, #4]
 80093ce:	6123      	str	r3, [r4, #16]
 80093d0:	2300      	movs	r3, #0
 80093d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093d6:	e7a7      	b.n	8009328 <_printf_i+0x118>
 80093d8:	6923      	ldr	r3, [r4, #16]
 80093da:	462a      	mov	r2, r5
 80093dc:	4639      	mov	r1, r7
 80093de:	4630      	mov	r0, r6
 80093e0:	47c0      	blx	r8
 80093e2:	3001      	adds	r0, #1
 80093e4:	d0aa      	beq.n	800933c <_printf_i+0x12c>
 80093e6:	6823      	ldr	r3, [r4, #0]
 80093e8:	079b      	lsls	r3, r3, #30
 80093ea:	d413      	bmi.n	8009414 <_printf_i+0x204>
 80093ec:	68e0      	ldr	r0, [r4, #12]
 80093ee:	9b03      	ldr	r3, [sp, #12]
 80093f0:	4298      	cmp	r0, r3
 80093f2:	bfb8      	it	lt
 80093f4:	4618      	movlt	r0, r3
 80093f6:	e7a3      	b.n	8009340 <_printf_i+0x130>
 80093f8:	2301      	movs	r3, #1
 80093fa:	464a      	mov	r2, r9
 80093fc:	4639      	mov	r1, r7
 80093fe:	4630      	mov	r0, r6
 8009400:	47c0      	blx	r8
 8009402:	3001      	adds	r0, #1
 8009404:	d09a      	beq.n	800933c <_printf_i+0x12c>
 8009406:	3501      	adds	r5, #1
 8009408:	68e3      	ldr	r3, [r4, #12]
 800940a:	9a03      	ldr	r2, [sp, #12]
 800940c:	1a9b      	subs	r3, r3, r2
 800940e:	42ab      	cmp	r3, r5
 8009410:	dcf2      	bgt.n	80093f8 <_printf_i+0x1e8>
 8009412:	e7eb      	b.n	80093ec <_printf_i+0x1dc>
 8009414:	2500      	movs	r5, #0
 8009416:	f104 0919 	add.w	r9, r4, #25
 800941a:	e7f5      	b.n	8009408 <_printf_i+0x1f8>
 800941c:	2b00      	cmp	r3, #0
 800941e:	d1ac      	bne.n	800937a <_printf_i+0x16a>
 8009420:	7803      	ldrb	r3, [r0, #0]
 8009422:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009426:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800942a:	e76c      	b.n	8009306 <_printf_i+0xf6>
 800942c:	08009765 	.word	0x08009765
 8009430:	08009776 	.word	0x08009776

08009434 <memmove>:
 8009434:	4288      	cmp	r0, r1
 8009436:	b510      	push	{r4, lr}
 8009438:	eb01 0302 	add.w	r3, r1, r2
 800943c:	d807      	bhi.n	800944e <memmove+0x1a>
 800943e:	1e42      	subs	r2, r0, #1
 8009440:	4299      	cmp	r1, r3
 8009442:	d00a      	beq.n	800945a <memmove+0x26>
 8009444:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009448:	f802 4f01 	strb.w	r4, [r2, #1]!
 800944c:	e7f8      	b.n	8009440 <memmove+0xc>
 800944e:	4283      	cmp	r3, r0
 8009450:	d9f5      	bls.n	800943e <memmove+0xa>
 8009452:	1881      	adds	r1, r0, r2
 8009454:	1ad2      	subs	r2, r2, r3
 8009456:	42d3      	cmn	r3, r2
 8009458:	d100      	bne.n	800945c <memmove+0x28>
 800945a:	bd10      	pop	{r4, pc}
 800945c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009460:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009464:	e7f7      	b.n	8009456 <memmove+0x22>
	...

08009468 <_free_r>:
 8009468:	b538      	push	{r3, r4, r5, lr}
 800946a:	4605      	mov	r5, r0
 800946c:	2900      	cmp	r1, #0
 800946e:	d045      	beq.n	80094fc <_free_r+0x94>
 8009470:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009474:	1f0c      	subs	r4, r1, #4
 8009476:	2b00      	cmp	r3, #0
 8009478:	bfb8      	it	lt
 800947a:	18e4      	addlt	r4, r4, r3
 800947c:	f000 f8d2 	bl	8009624 <__malloc_lock>
 8009480:	4a1f      	ldr	r2, [pc, #124]	; (8009500 <_free_r+0x98>)
 8009482:	6813      	ldr	r3, [r2, #0]
 8009484:	4610      	mov	r0, r2
 8009486:	b933      	cbnz	r3, 8009496 <_free_r+0x2e>
 8009488:	6063      	str	r3, [r4, #4]
 800948a:	6014      	str	r4, [r2, #0]
 800948c:	4628      	mov	r0, r5
 800948e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009492:	f000 b8c8 	b.w	8009626 <__malloc_unlock>
 8009496:	42a3      	cmp	r3, r4
 8009498:	d90c      	bls.n	80094b4 <_free_r+0x4c>
 800949a:	6821      	ldr	r1, [r4, #0]
 800949c:	1862      	adds	r2, r4, r1
 800949e:	4293      	cmp	r3, r2
 80094a0:	bf04      	itt	eq
 80094a2:	681a      	ldreq	r2, [r3, #0]
 80094a4:	685b      	ldreq	r3, [r3, #4]
 80094a6:	6063      	str	r3, [r4, #4]
 80094a8:	bf04      	itt	eq
 80094aa:	1852      	addeq	r2, r2, r1
 80094ac:	6022      	streq	r2, [r4, #0]
 80094ae:	6004      	str	r4, [r0, #0]
 80094b0:	e7ec      	b.n	800948c <_free_r+0x24>
 80094b2:	4613      	mov	r3, r2
 80094b4:	685a      	ldr	r2, [r3, #4]
 80094b6:	b10a      	cbz	r2, 80094bc <_free_r+0x54>
 80094b8:	42a2      	cmp	r2, r4
 80094ba:	d9fa      	bls.n	80094b2 <_free_r+0x4a>
 80094bc:	6819      	ldr	r1, [r3, #0]
 80094be:	1858      	adds	r0, r3, r1
 80094c0:	42a0      	cmp	r0, r4
 80094c2:	d10b      	bne.n	80094dc <_free_r+0x74>
 80094c4:	6820      	ldr	r0, [r4, #0]
 80094c6:	4401      	add	r1, r0
 80094c8:	1858      	adds	r0, r3, r1
 80094ca:	4282      	cmp	r2, r0
 80094cc:	6019      	str	r1, [r3, #0]
 80094ce:	d1dd      	bne.n	800948c <_free_r+0x24>
 80094d0:	6810      	ldr	r0, [r2, #0]
 80094d2:	6852      	ldr	r2, [r2, #4]
 80094d4:	605a      	str	r2, [r3, #4]
 80094d6:	4401      	add	r1, r0
 80094d8:	6019      	str	r1, [r3, #0]
 80094da:	e7d7      	b.n	800948c <_free_r+0x24>
 80094dc:	d902      	bls.n	80094e4 <_free_r+0x7c>
 80094de:	230c      	movs	r3, #12
 80094e0:	602b      	str	r3, [r5, #0]
 80094e2:	e7d3      	b.n	800948c <_free_r+0x24>
 80094e4:	6820      	ldr	r0, [r4, #0]
 80094e6:	1821      	adds	r1, r4, r0
 80094e8:	428a      	cmp	r2, r1
 80094ea:	bf04      	itt	eq
 80094ec:	6811      	ldreq	r1, [r2, #0]
 80094ee:	6852      	ldreq	r2, [r2, #4]
 80094f0:	6062      	str	r2, [r4, #4]
 80094f2:	bf04      	itt	eq
 80094f4:	1809      	addeq	r1, r1, r0
 80094f6:	6021      	streq	r1, [r4, #0]
 80094f8:	605c      	str	r4, [r3, #4]
 80094fa:	e7c7      	b.n	800948c <_free_r+0x24>
 80094fc:	bd38      	pop	{r3, r4, r5, pc}
 80094fe:	bf00      	nop
 8009500:	20001a80 	.word	0x20001a80

08009504 <_malloc_r>:
 8009504:	b570      	push	{r4, r5, r6, lr}
 8009506:	1ccd      	adds	r5, r1, #3
 8009508:	f025 0503 	bic.w	r5, r5, #3
 800950c:	3508      	adds	r5, #8
 800950e:	2d0c      	cmp	r5, #12
 8009510:	bf38      	it	cc
 8009512:	250c      	movcc	r5, #12
 8009514:	2d00      	cmp	r5, #0
 8009516:	4606      	mov	r6, r0
 8009518:	db01      	blt.n	800951e <_malloc_r+0x1a>
 800951a:	42a9      	cmp	r1, r5
 800951c:	d903      	bls.n	8009526 <_malloc_r+0x22>
 800951e:	230c      	movs	r3, #12
 8009520:	6033      	str	r3, [r6, #0]
 8009522:	2000      	movs	r0, #0
 8009524:	bd70      	pop	{r4, r5, r6, pc}
 8009526:	f000 f87d 	bl	8009624 <__malloc_lock>
 800952a:	4a21      	ldr	r2, [pc, #132]	; (80095b0 <_malloc_r+0xac>)
 800952c:	6814      	ldr	r4, [r2, #0]
 800952e:	4621      	mov	r1, r4
 8009530:	b991      	cbnz	r1, 8009558 <_malloc_r+0x54>
 8009532:	4c20      	ldr	r4, [pc, #128]	; (80095b4 <_malloc_r+0xb0>)
 8009534:	6823      	ldr	r3, [r4, #0]
 8009536:	b91b      	cbnz	r3, 8009540 <_malloc_r+0x3c>
 8009538:	4630      	mov	r0, r6
 800953a:	f000 f863 	bl	8009604 <_sbrk_r>
 800953e:	6020      	str	r0, [r4, #0]
 8009540:	4629      	mov	r1, r5
 8009542:	4630      	mov	r0, r6
 8009544:	f000 f85e 	bl	8009604 <_sbrk_r>
 8009548:	1c43      	adds	r3, r0, #1
 800954a:	d124      	bne.n	8009596 <_malloc_r+0x92>
 800954c:	230c      	movs	r3, #12
 800954e:	6033      	str	r3, [r6, #0]
 8009550:	4630      	mov	r0, r6
 8009552:	f000 f868 	bl	8009626 <__malloc_unlock>
 8009556:	e7e4      	b.n	8009522 <_malloc_r+0x1e>
 8009558:	680b      	ldr	r3, [r1, #0]
 800955a:	1b5b      	subs	r3, r3, r5
 800955c:	d418      	bmi.n	8009590 <_malloc_r+0x8c>
 800955e:	2b0b      	cmp	r3, #11
 8009560:	d90f      	bls.n	8009582 <_malloc_r+0x7e>
 8009562:	600b      	str	r3, [r1, #0]
 8009564:	50cd      	str	r5, [r1, r3]
 8009566:	18cc      	adds	r4, r1, r3
 8009568:	4630      	mov	r0, r6
 800956a:	f000 f85c 	bl	8009626 <__malloc_unlock>
 800956e:	f104 000b 	add.w	r0, r4, #11
 8009572:	1d23      	adds	r3, r4, #4
 8009574:	f020 0007 	bic.w	r0, r0, #7
 8009578:	1ac3      	subs	r3, r0, r3
 800957a:	d0d3      	beq.n	8009524 <_malloc_r+0x20>
 800957c:	425a      	negs	r2, r3
 800957e:	50e2      	str	r2, [r4, r3]
 8009580:	e7d0      	b.n	8009524 <_malloc_r+0x20>
 8009582:	428c      	cmp	r4, r1
 8009584:	684b      	ldr	r3, [r1, #4]
 8009586:	bf16      	itet	ne
 8009588:	6063      	strne	r3, [r4, #4]
 800958a:	6013      	streq	r3, [r2, #0]
 800958c:	460c      	movne	r4, r1
 800958e:	e7eb      	b.n	8009568 <_malloc_r+0x64>
 8009590:	460c      	mov	r4, r1
 8009592:	6849      	ldr	r1, [r1, #4]
 8009594:	e7cc      	b.n	8009530 <_malloc_r+0x2c>
 8009596:	1cc4      	adds	r4, r0, #3
 8009598:	f024 0403 	bic.w	r4, r4, #3
 800959c:	42a0      	cmp	r0, r4
 800959e:	d005      	beq.n	80095ac <_malloc_r+0xa8>
 80095a0:	1a21      	subs	r1, r4, r0
 80095a2:	4630      	mov	r0, r6
 80095a4:	f000 f82e 	bl	8009604 <_sbrk_r>
 80095a8:	3001      	adds	r0, #1
 80095aa:	d0cf      	beq.n	800954c <_malloc_r+0x48>
 80095ac:	6025      	str	r5, [r4, #0]
 80095ae:	e7db      	b.n	8009568 <_malloc_r+0x64>
 80095b0:	20001a80 	.word	0x20001a80
 80095b4:	20001a84 	.word	0x20001a84

080095b8 <_realloc_r>:
 80095b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ba:	4607      	mov	r7, r0
 80095bc:	4614      	mov	r4, r2
 80095be:	460e      	mov	r6, r1
 80095c0:	b921      	cbnz	r1, 80095cc <_realloc_r+0x14>
 80095c2:	4611      	mov	r1, r2
 80095c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80095c8:	f7ff bf9c 	b.w	8009504 <_malloc_r>
 80095cc:	b922      	cbnz	r2, 80095d8 <_realloc_r+0x20>
 80095ce:	f7ff ff4b 	bl	8009468 <_free_r>
 80095d2:	4625      	mov	r5, r4
 80095d4:	4628      	mov	r0, r5
 80095d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095d8:	f000 f826 	bl	8009628 <_malloc_usable_size_r>
 80095dc:	42a0      	cmp	r0, r4
 80095de:	d20f      	bcs.n	8009600 <_realloc_r+0x48>
 80095e0:	4621      	mov	r1, r4
 80095e2:	4638      	mov	r0, r7
 80095e4:	f7ff ff8e 	bl	8009504 <_malloc_r>
 80095e8:	4605      	mov	r5, r0
 80095ea:	2800      	cmp	r0, #0
 80095ec:	d0f2      	beq.n	80095d4 <_realloc_r+0x1c>
 80095ee:	4631      	mov	r1, r6
 80095f0:	4622      	mov	r2, r4
 80095f2:	f7ff fbfd 	bl	8008df0 <memcpy>
 80095f6:	4631      	mov	r1, r6
 80095f8:	4638      	mov	r0, r7
 80095fa:	f7ff ff35 	bl	8009468 <_free_r>
 80095fe:	e7e9      	b.n	80095d4 <_realloc_r+0x1c>
 8009600:	4635      	mov	r5, r6
 8009602:	e7e7      	b.n	80095d4 <_realloc_r+0x1c>

08009604 <_sbrk_r>:
 8009604:	b538      	push	{r3, r4, r5, lr}
 8009606:	4c06      	ldr	r4, [pc, #24]	; (8009620 <_sbrk_r+0x1c>)
 8009608:	2300      	movs	r3, #0
 800960a:	4605      	mov	r5, r0
 800960c:	4608      	mov	r0, r1
 800960e:	6023      	str	r3, [r4, #0]
 8009610:	f7f8 f914 	bl	800183c <_sbrk>
 8009614:	1c43      	adds	r3, r0, #1
 8009616:	d102      	bne.n	800961e <_sbrk_r+0x1a>
 8009618:	6823      	ldr	r3, [r4, #0]
 800961a:	b103      	cbz	r3, 800961e <_sbrk_r+0x1a>
 800961c:	602b      	str	r3, [r5, #0]
 800961e:	bd38      	pop	{r3, r4, r5, pc}
 8009620:	20002214 	.word	0x20002214

08009624 <__malloc_lock>:
 8009624:	4770      	bx	lr

08009626 <__malloc_unlock>:
 8009626:	4770      	bx	lr

08009628 <_malloc_usable_size_r>:
 8009628:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800962c:	1f18      	subs	r0, r3, #4
 800962e:	2b00      	cmp	r3, #0
 8009630:	bfbc      	itt	lt
 8009632:	580b      	ldrlt	r3, [r1, r0]
 8009634:	18c0      	addlt	r0, r0, r3
 8009636:	4770      	bx	lr

08009638 <trunc>:
 8009638:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 800963c:	ec5c bb10 	vmov	fp, ip, d0
 8009640:	f3cc 500a 	ubfx	r0, ip, #20, #11
 8009644:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
 8009648:	2913      	cmp	r1, #19
 800964a:	4664      	mov	r4, ip
 800964c:	dc11      	bgt.n	8009672 <trunc+0x3a>
 800964e:	2900      	cmp	r1, #0
 8009650:	bfa7      	ittee	ge
 8009652:	4b15      	ldrge	r3, [pc, #84]	; (80096a8 <trunc+0x70>)
 8009654:	fa43 f101 	asrge.w	r1, r3, r1
 8009658:	2200      	movlt	r2, #0
 800965a:	f00c 4300 	andlt.w	r3, ip, #2147483648	; 0x80000000
 800965e:	bfa4      	itt	ge
 8009660:	2200      	movge	r2, #0
 8009662:	ea2c 0301 	bicge.w	r3, ip, r1
 8009666:	4693      	mov	fp, r2
 8009668:	469c      	mov	ip, r3
 800966a:	ec4c bb10 	vmov	d0, fp, ip
 800966e:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 8009672:	2933      	cmp	r1, #51	; 0x33
 8009674:	dd0d      	ble.n	8009692 <trunc+0x5a>
 8009676:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800967a:	d1f6      	bne.n	800966a <trunc+0x32>
 800967c:	4663      	mov	r3, ip
 800967e:	ee10 2a10 	vmov	r2, s0
 8009682:	ee10 0a10 	vmov	r0, s0
 8009686:	4621      	mov	r1, r4
 8009688:	f7f6 fdf8 	bl	800027c <__adddf3>
 800968c:	4683      	mov	fp, r0
 800968e:	468c      	mov	ip, r1
 8009690:	e7eb      	b.n	800966a <trunc+0x32>
 8009692:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
 8009696:	f04f 33ff 	mov.w	r3, #4294967295
 800969a:	fa23 f000 	lsr.w	r0, r3, r0
 800969e:	ea2b 0600 	bic.w	r6, fp, r0
 80096a2:	46b3      	mov	fp, r6
 80096a4:	46a4      	mov	ip, r4
 80096a6:	e7e0      	b.n	800966a <trunc+0x32>
 80096a8:	000fffff 	.word	0x000fffff

080096ac <_init>:
 80096ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ae:	bf00      	nop
 80096b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096b2:	bc08      	pop	{r3}
 80096b4:	469e      	mov	lr, r3
 80096b6:	4770      	bx	lr

080096b8 <_fini>:
 80096b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ba:	bf00      	nop
 80096bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096be:	bc08      	pop	{r3}
 80096c0:	469e      	mov	lr, r3
 80096c2:	4770      	bx	lr
